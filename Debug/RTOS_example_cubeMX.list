
RTOS_example_cubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000902c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a0  08009140  08009140  00019140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2e0  0800a2e0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a2e0  0800a2e0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a2e0  0800a2e0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2e0  0800a2e0  0001a2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2e4  0800a2e4  0001a2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a2e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020f8  200001e8  0800a4d0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022e0  0800a4d0  000222e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d82b  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037d5  00000000  00000000  0003da3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001800  00000000  00000000  00041218  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016c0  00000000  00000000  00042a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a3ce  00000000  00000000  000440d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013aa3  00000000  00000000  0005e4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c1b9  00000000  00000000  00071f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e102  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f6c  00000000  00000000  0010e180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009124 	.word	0x08009124

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009124 	.word	0x08009124

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 ff64 	bl	8001958 <HAL_Init>

	  // initialise
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f878 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f968 	bl	8000d68 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a98:	f000 f8d0 	bl	8000c3c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000a9c:	f000 f90c 	bl	8000cb8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000aa0:	f000 f938 	bl	8000d14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 8000aa4:	f000 fada 	bl	800105c <SSD1306_Init>
  SSD1306_Clear();
 8000aa8:	f000 fcfb 	bl	80014a2 <SSD1306_Clear>
  SSD1306_UpdateScreen();
 8000aac:	f000 fb9a 	bl	80011e4 <SSD1306_UpdateScreen>

  SSD1306_GotoXY (0,0);
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 fc3a 	bl	800132c <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4920      	ldr	r1, [pc, #128]	; (8000b3c <main+0xb4>)
 8000abc:	4820      	ldr	r0, [pc, #128]	; (8000b40 <main+0xb8>)
 8000abe:	f000 fccb 	bl	8001458 <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 8000ac2:	211e      	movs	r1, #30
 8000ac4:	200a      	movs	r0, #10
 8000ac6:	f000 fc31 	bl	800132c <SSD1306_GotoXY>
  SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	491b      	ldr	r1, [pc, #108]	; (8000b3c <main+0xb4>)
 8000ace:	481d      	ldr	r0, [pc, #116]	; (8000b44 <main+0xbc>)
 8000ad0:	f000 fcc2 	bl	8001458 <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 8000ad4:	f000 fb86 	bl	80011e4 <SSD1306_UpdateScreen>

  HAL_Delay(2000);
 8000ad8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000adc:	f000 ff6e 	bl	80019bc <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ae0:	f003 fe1e 	bl	8004720 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ae4:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <main+0xc0>)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4818      	ldr	r0, [pc, #96]	; (8000b4c <main+0xc4>)
 8000aea:	f003 fe7f 	bl	80047ec <osThreadNew>
 8000aee:	4602      	mov	r2, r0
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <main+0xc8>)
 8000af2:	601a      	str	r2, [r3, #0]

  /* creation of pickButtonTask */
  pickButtonTaskHandle = osThreadNew(pickButton, NULL, &pickButtonTask_attributes);
 8000af4:	4a17      	ldr	r2, [pc, #92]	; (8000b54 <main+0xcc>)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4817      	ldr	r0, [pc, #92]	; (8000b58 <main+0xd0>)
 8000afa:	f003 fe77 	bl	80047ec <osThreadNew>
 8000afe:	4602      	mov	r2, r0
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <main+0xd4>)
 8000b02:	601a      	str	r2, [r3, #0]

  /* creation of getADCTask */
  getADCTaskHandle = osThreadNew(getADC, NULL, &getADCTask_attributes);
 8000b04:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <main+0xd8>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4816      	ldr	r0, [pc, #88]	; (8000b64 <main+0xdc>)
 8000b0a:	f003 fe6f 	bl	80047ec <osThreadNew>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <main+0xe0>)
 8000b12:	601a      	str	r2, [r3, #0]

  /* creation of dispOLEDTask */
  dispOLEDTaskHandle = osThreadNew(dispOLED, NULL, &dispOLEDTask_attributes);
 8000b14:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <main+0xe4>)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4815      	ldr	r0, [pc, #84]	; (8000b70 <main+0xe8>)
 8000b1a:	f003 fe67 	bl	80047ec <osThreadNew>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <main+0xec>)
 8000b22:	601a      	str	r2, [r3, #0]

  /* creation of dispUARTTask */
  dispUARTTaskHandle = osThreadNew(dispUART, NULL, &dispUARTTask_attributes);
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <main+0xf0>)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4814      	ldr	r0, [pc, #80]	; (8000b7c <main+0xf4>)
 8000b2a:	f003 fe5f 	bl	80047ec <osThreadNew>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <main+0xf8>)
 8000b32:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b34:	f003 fe26 	bl	8004784 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <main+0xb0>
 8000b3a:	bf00      	nop
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	08009188 	.word	0x08009188
 8000b44:	08009190 	.word	0x08009190
 8000b48:	08009fb4 	.word	0x08009fb4
 8000b4c:	08000e99 	.word	0x08000e99
 8000b50:	20002138 	.word	0x20002138
 8000b54:	08009fd8 	.word	0x08009fd8
 8000b58:	08000ea9 	.word	0x08000ea9
 8000b5c:	2000224c 	.word	0x2000224c
 8000b60:	08009ffc 	.word	0x08009ffc
 8000b64:	08000f01 	.word	0x08000f01
 8000b68:	20002248 	.word	0x20002248
 8000b6c:	0800a020 	.word	0x0800a020
 8000b70:	08000f39 	.word	0x08000f39
 8000b74:	20002194 	.word	0x20002194
 8000b78:	0800a044 	.word	0x0800a044
 8000b7c:	08000f81 	.word	0x08000f81
 8000b80:	20002240 	.word	0x20002240

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b094      	sub	sp, #80	; 0x50
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b8e:	2228      	movs	r2, #40	; 0x28
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f006 fa8f 	bl	80070b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bd0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 fb3e 	bl	800325c <HAL_RCC_OscConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000be6:	f000 fa35 	bl	8001054 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	230f      	movs	r3, #15
 8000bec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2102      	movs	r1, #2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 fda8 	bl	800375c <HAL_RCC_ClockConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c12:	f000 fa1f 	bl	8001054 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c16:	2302      	movs	r3, #2
 8000c18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c1e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f002 ff66 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c2e:	f000 fa11 	bl	8001054 <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3750      	adds	r7, #80	; 0x50
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_ADC1_Init+0x74>)
 8000c4e:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <MX_ADC1_Init+0x78>)
 8000c50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_ADC1_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_ADC1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_ADC1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_ADC1_Init+0x74>)
 8000c66:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c6c:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <MX_ADC1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_ADC1_Init+0x74>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_ADC1_Init+0x74>)
 8000c7a:	f000 fec1 	bl	8001a00 <HAL_ADC_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c84:	f000 f9e6 	bl	8001054 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000c90:	2303      	movs	r3, #3
 8000c92:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_ADC1_Init+0x74>)
 8000c9a:	f001 f975 	bl	8001f88 <HAL_ADC_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ca4:	f000 f9d6 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20002198 	.word	0x20002198
 8000cb4:	40012400 	.word	0x40012400

08000cb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cbe:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <MX_I2C1_Init+0x54>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cc4:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <MX_I2C1_Init+0x58>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cf6:	f001 fd45 	bl	8002784 <HAL_I2C_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d00:	f000 f9a8 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000213c 	.word	0x2000213c
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	00061a80 	.word	0x00061a80

08000d14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <MX_USART1_UART_Init+0x50>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	f003 fa8e 	bl	800426c <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d56:	f000 f97d 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200021c8 	.word	0x200021c8
 8000d64:	40013800 	.word	0x40013800

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a29      	ldr	r2, [pc, #164]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0310 	and.w	r3, r3, #16
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d94:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a23      	ldr	r2, [pc, #140]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000d9a:	f043 0320 	orr.w	r3, r3, #32
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0320 	and.w	r3, r3, #32
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de2:	4812      	ldr	r0, [pc, #72]	; (8000e2c <MX_GPIO_Init+0xc4>)
 8000de4:	f001 fcb5 	bl	8002752 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8000de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480a      	ldr	r0, [pc, #40]	; (8000e2c <MX_GPIO_Init+0xc4>)
 8000e02:	f001 fb35 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button1_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button1_Pin;
 8000e06:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_GPIO_Init+0xc8>)
 8000e1c:	f001 fb28 	bl	8002470 <HAL_GPIO_Init>

}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40011000 	.word	0x40011000
 8000e30:	40010c00 	.word	0x40010c00

08000e34 <Menu_Display>:

/* USER CODE BEGIN 4 */


void Menu_Display(void)
{
 8000e34:	b5b0      	push	{r4, r5, r7, lr}
 8000e36:	b08e      	sub	sp, #56	; 0x38
 8000e38:	af00      	add	r7, sp, #0
	uint8_t menu_1[] = "\r\n1. Voltage monitor read\r\n";
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <Menu_Display+0x58>)
 8000e3c:	f107 041c 	add.w	r4, r7, #28
 8000e40:	461d      	mov	r5, r3
 8000e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint8_t menu_2[] = "2. Re-display Menu\r\n\r\n";
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <Menu_Display+0x5c>)
 8000e50:	1d3c      	adds	r4, r7, #4
 8000e52:	461d      	mov	r5, r3
 8000e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e5c:	6020      	str	r0, [r4, #0]
 8000e5e:	3404      	adds	r4, #4
 8000e60:	8021      	strh	r1, [r4, #0]
 8000e62:	3402      	adds	r4, #2
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart1, menu_1, sizeof(menu_1), 10);
 8000e68:	f107 011c 	add.w	r1, r7, #28
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	221c      	movs	r2, #28
 8000e70:	4808      	ldr	r0, [pc, #32]	; (8000e94 <Menu_Display+0x60>)
 8000e72:	f003 fa48 	bl	8004306 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, menu_2, sizeof(menu_2), 10);
 8000e76:	1d39      	adds	r1, r7, #4
 8000e78:	230a      	movs	r3, #10
 8000e7a:	2217      	movs	r2, #23
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <Menu_Display+0x60>)
 8000e7e:	f003 fa42 	bl	8004306 <HAL_UART_Transmit>

}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	; 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bdb0      	pop	{r4, r5, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	0800919c 	.word	0x0800919c
 8000e90:	080091b8 	.word	0x080091b8
 8000e94:	200021c8 	.word	0x200021c8

08000e98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f003 fd4d 	bl	8004940 <osDelay>
 8000ea6:	e7fb      	b.n	8000ea0 <StartDefaultTask+0x8>

08000ea8 <pickButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pickButton */
void pickButton(void *argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pickButton */
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_RESET)
 8000eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb4:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <pickButton+0x4c>)
 8000eb6:	f001 fc35 	bl	8002724 <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d106      	bne.n	8000ece <pickButton+0x26>
	  {
		  osDelay(300);	// debounce
 8000ec0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ec4:	f003 fd3c 	bl	8004940 <osDelay>
		  button1_pressed = 1;
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <pickButton+0x50>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
	  }

	  if(HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin) == GPIO_PIN_RESET)
 8000ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <pickButton+0x4c>)
 8000ed4:	f001 fc26 	bl	8002724 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d106      	bne.n	8000eec <pickButton+0x44>
	  {
		  osDelay(300);	// debounce
 8000ede:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ee2:	f003 fd2d 	bl	8004940 <osDelay>
		  button2_pressed = 1;
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <pickButton+0x54>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
	  }

    osDelay(100);
 8000eec:	2064      	movs	r0, #100	; 0x64
 8000eee:	f003 fd27 	bl	8004940 <osDelay>
	  if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_RESET)
 8000ef2:	e7dd      	b.n	8000eb0 <pickButton+0x8>
 8000ef4:	40010c00 	.word	0x40010c00
 8000ef8:	20000204 	.word	0x20000204
 8000efc:	20000208 	.word	0x20000208

08000f00 <getADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getADC */
void getADC(void *argument)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getADC */
  /* Infinite loop */
  for(;;)
  {

	  HAL_ADC_Start(&hadc1);
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <getADC+0x30>)
 8000f0a:	f000 fe51 	bl	8001bb0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000f0e:	210a      	movs	r1, #10
 8000f10:	4807      	ldr	r0, [pc, #28]	; (8000f30 <getADC+0x30>)
 8000f12:	f000 ff27 	bl	8001d64 <HAL_ADC_PollForConversion>
	  x_val = (HAL_ADC_GetValue(&hadc1));
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <getADC+0x30>)
 8000f18:	f001 f82a 	bl	8001f70 <HAL_ADC_GetValue>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <getADC+0x34>)
 8000f20:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000f22:	4803      	ldr	r0, [pc, #12]	; (8000f30 <getADC+0x30>)
 8000f24:	f000 fef2 	bl	8001d0c <HAL_ADC_Stop>

	  // process ADC values here


    osDelay(100);
 8000f28:	2064      	movs	r0, #100	; 0x64
 8000f2a:	f003 fd09 	bl	8004940 <osDelay>
	  HAL_ADC_Start(&hadc1);
 8000f2e:	e7eb      	b.n	8000f08 <getADC+0x8>
 8000f30:	20002198 	.word	0x20002198
 8000f34:	20002190 	.word	0x20002190

08000f38 <dispOLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispOLED */
void dispOLED(void *argument)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dispOLED */
	  SSD1306_Clear();
 8000f40:	f000 faaf 	bl	80014a2 <SSD1306_Clear>
	  SSD1306_UpdateScreen();
 8000f44:	f000 f94e 	bl	80011e4 <SSD1306_UpdateScreen>
  /* Infinite loop */
  for(;;)
  {

	  SSD1306_GotoXY (0,0);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f9ee 	bl	800132c <SSD1306_GotoXY>
	  sprintf(buffer, "ADC=%d      ", x_val);
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <dispOLED+0x38>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4907      	ldr	r1, [pc, #28]	; (8000f74 <dispOLED+0x3c>)
 8000f58:	4807      	ldr	r0, [pc, #28]	; (8000f78 <dispOLED+0x40>)
 8000f5a:	f006 fd03 	bl	8007964 <siprintf>
	  SSD1306_Puts (buffer, &Font_11x18, 1);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4906      	ldr	r1, [pc, #24]	; (8000f7c <dispOLED+0x44>)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <dispOLED+0x40>)
 8000f64:	f000 fa78 	bl	8001458 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 8000f68:	f000 f93c 	bl	80011e4 <SSD1306_UpdateScreen>
	  SSD1306_GotoXY (0,0);
 8000f6c:	e7ec      	b.n	8000f48 <dispOLED+0x10>
 8000f6e:	bf00      	nop
 8000f70:	20002190 	.word	0x20002190
 8000f74:	080091d0 	.word	0x080091d0
 8000f78:	2000220c 	.word	0x2000220c
 8000f7c:	20000000 	.word	0x20000000

08000f80 <dispUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispUART */
void dispUART(void *argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	  /* USER CODE BEGIN UARTmenu */
	  /* Infinite loop */

		Menu_Display();
 8000f88:	f7ff ff54 	bl	8000e34 <Menu_Display>

	  for(;;)
	  {
		  // select user input
		  if (HAL_UART_Receive(&huart1, &choice, sizeof(choice), 10) == HAL_OK)
 8000f8c:	230a      	movs	r3, #10
 8000f8e:	2201      	movs	r2, #1
 8000f90:	491e      	ldr	r1, [pc, #120]	; (800100c <dispUART+0x8c>)
 8000f92:	481f      	ldr	r0, [pc, #124]	; (8001010 <dispUART+0x90>)
 8000f94:	f003 fa49 	bl	800442a <HAL_UART_Receive>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d117      	bne.n	8000fce <dispUART+0x4e>
		  {
			switch (choice) {
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <dispUART+0x8c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b31      	cmp	r3, #49	; 0x31
 8000fa4:	d002      	beq.n	8000fac <dispUART+0x2c>
 8000fa6:	2b32      	cmp	r3, #50	; 0x32
 8000fa8:	d00e      	beq.n	8000fc8 <dispUART+0x48>
					break;
				case '2':
					Menu_Display();
					break;
				default:
					break;
 8000faa:	e010      	b.n	8000fce <dispUART+0x4e>
					sprintf(buffer, "Voltage = %d\r\n",x_val);
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <dispUART+0x94>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4919      	ldr	r1, [pc, #100]	; (8001018 <dispUART+0x98>)
 8000fb4:	4819      	ldr	r0, [pc, #100]	; (800101c <dispUART+0x9c>)
 8000fb6:	f006 fcd5 	bl	8007964 <siprintf>
					HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8000fba:	230a      	movs	r3, #10
 8000fbc:	2232      	movs	r2, #50	; 0x32
 8000fbe:	4917      	ldr	r1, [pc, #92]	; (800101c <dispUART+0x9c>)
 8000fc0:	4813      	ldr	r0, [pc, #76]	; (8001010 <dispUART+0x90>)
 8000fc2:	f003 f9a0 	bl	8004306 <HAL_UART_Transmit>
					break;
 8000fc6:	e002      	b.n	8000fce <dispUART+0x4e>
					Menu_Display();
 8000fc8:	f7ff ff34 	bl	8000e34 <Menu_Display>
					break;
 8000fcc:	bf00      	nop
			}
		  }else{

		  }

		  if(button1_pressed)
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <dispUART+0xa0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d008      	beq.n	8000fe8 <dispUART+0x68>
		  {
			  HAL_UART_Transmit(&huart1, (uint8_t*)"Button1 pressed\r\n", sizeof("Button1 pressed\r\n"), 10);
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	2212      	movs	r2, #18
 8000fda:	4912      	ldr	r1, [pc, #72]	; (8001024 <dispUART+0xa4>)
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <dispUART+0x90>)
 8000fde:	f003 f992 	bl	8004306 <HAL_UART_Transmit>
			  button1_pressed = 0;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <dispUART+0xa0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
		  }

		  if(button2_pressed)
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <dispUART+0xa8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d008      	beq.n	8001002 <dispUART+0x82>
		  {
			  HAL_UART_Transmit(&huart1, (uint8_t*)"Button2 pressed\r\n", sizeof("Button2 pressed\r\n"), 10);
 8000ff0:	230a      	movs	r3, #10
 8000ff2:	2212      	movs	r2, #18
 8000ff4:	490d      	ldr	r1, [pc, #52]	; (800102c <dispUART+0xac>)
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <dispUART+0x90>)
 8000ff8:	f003 f985 	bl	8004306 <HAL_UART_Transmit>
			  button2_pressed = 0;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <dispUART+0xa8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
		  }


	    osDelay(100);
 8001002:	2064      	movs	r0, #100	; 0x64
 8001004:	f003 fc9c 	bl	8004940 <osDelay>
		  if (HAL_UART_Receive(&huart1, &choice, sizeof(choice), 10) == HAL_OK)
 8001008:	e7c0      	b.n	8000f8c <dispUART+0xc>
 800100a:	bf00      	nop
 800100c:	20002244 	.word	0x20002244
 8001010:	200021c8 	.word	0x200021c8
 8001014:	20002190 	.word	0x20002190
 8001018:	080091e0 	.word	0x080091e0
 800101c:	2000220c 	.word	0x2000220c
 8001020:	20000204 	.word	0x20000204
 8001024:	080091f0 	.word	0x080091f0
 8001028:	20000208 	.word	0x20000208
 800102c:	08009204 	.word	0x08009204

08001030 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001042:	f000 fc9f 	bl	8001984 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40000800 	.word	0x40000800

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105a:	e7fe      	b.n	800105a <Error_Handler+0x6>

0800105c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001062:	f000 fa27 	bl	80014b4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001066:	f644 6320 	movw	r3, #20000	; 0x4e20
 800106a:	2201      	movs	r2, #1
 800106c:	2178      	movs	r1, #120	; 0x78
 800106e:	485b      	ldr	r0, [pc, #364]	; (80011dc <SSD1306_Init+0x180>)
 8001070:	f001 fdbe 	bl	8002bf0 <HAL_I2C_IsDeviceReady>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800107a:	2300      	movs	r3, #0
 800107c:	e0a9      	b.n	80011d2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800107e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001082:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001084:	e002      	b.n	800108c <SSD1306_Init+0x30>
		p--;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3b01      	subs	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f9      	bne.n	8001086 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001092:	22ae      	movs	r2, #174	; 0xae
 8001094:	2100      	movs	r1, #0
 8001096:	2078      	movs	r0, #120	; 0x78
 8001098:	f000 fa68 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800109c:	2220      	movs	r2, #32
 800109e:	2100      	movs	r1, #0
 80010a0:	2078      	movs	r0, #120	; 0x78
 80010a2:	f000 fa63 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010a6:	2210      	movs	r2, #16
 80010a8:	2100      	movs	r1, #0
 80010aa:	2078      	movs	r0, #120	; 0x78
 80010ac:	f000 fa5e 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010b0:	22b0      	movs	r2, #176	; 0xb0
 80010b2:	2100      	movs	r1, #0
 80010b4:	2078      	movs	r0, #120	; 0x78
 80010b6:	f000 fa59 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010ba:	22c8      	movs	r2, #200	; 0xc8
 80010bc:	2100      	movs	r1, #0
 80010be:	2078      	movs	r0, #120	; 0x78
 80010c0:	f000 fa54 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2078      	movs	r0, #120	; 0x78
 80010ca:	f000 fa4f 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80010ce:	2210      	movs	r2, #16
 80010d0:	2100      	movs	r1, #0
 80010d2:	2078      	movs	r0, #120	; 0x78
 80010d4:	f000 fa4a 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80010d8:	2240      	movs	r2, #64	; 0x40
 80010da:	2100      	movs	r1, #0
 80010dc:	2078      	movs	r0, #120	; 0x78
 80010de:	f000 fa45 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010e2:	2281      	movs	r2, #129	; 0x81
 80010e4:	2100      	movs	r1, #0
 80010e6:	2078      	movs	r0, #120	; 0x78
 80010e8:	f000 fa40 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010ec:	22ff      	movs	r2, #255	; 0xff
 80010ee:	2100      	movs	r1, #0
 80010f0:	2078      	movs	r0, #120	; 0x78
 80010f2:	f000 fa3b 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80010f6:	22a1      	movs	r2, #161	; 0xa1
 80010f8:	2100      	movs	r1, #0
 80010fa:	2078      	movs	r0, #120	; 0x78
 80010fc:	f000 fa36 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001100:	22a6      	movs	r2, #166	; 0xa6
 8001102:	2100      	movs	r1, #0
 8001104:	2078      	movs	r0, #120	; 0x78
 8001106:	f000 fa31 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800110a:	22a8      	movs	r2, #168	; 0xa8
 800110c:	2100      	movs	r1, #0
 800110e:	2078      	movs	r0, #120	; 0x78
 8001110:	f000 fa2c 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001114:	223f      	movs	r2, #63	; 0x3f
 8001116:	2100      	movs	r1, #0
 8001118:	2078      	movs	r0, #120	; 0x78
 800111a:	f000 fa27 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800111e:	22a4      	movs	r2, #164	; 0xa4
 8001120:	2100      	movs	r1, #0
 8001122:	2078      	movs	r0, #120	; 0x78
 8001124:	f000 fa22 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001128:	22d3      	movs	r2, #211	; 0xd3
 800112a:	2100      	movs	r1, #0
 800112c:	2078      	movs	r0, #120	; 0x78
 800112e:	f000 fa1d 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	2078      	movs	r0, #120	; 0x78
 8001138:	f000 fa18 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800113c:	22d5      	movs	r2, #213	; 0xd5
 800113e:	2100      	movs	r1, #0
 8001140:	2078      	movs	r0, #120	; 0x78
 8001142:	f000 fa13 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001146:	22f0      	movs	r2, #240	; 0xf0
 8001148:	2100      	movs	r1, #0
 800114a:	2078      	movs	r0, #120	; 0x78
 800114c:	f000 fa0e 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001150:	22d9      	movs	r2, #217	; 0xd9
 8001152:	2100      	movs	r1, #0
 8001154:	2078      	movs	r0, #120	; 0x78
 8001156:	f000 fa09 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800115a:	2222      	movs	r2, #34	; 0x22
 800115c:	2100      	movs	r1, #0
 800115e:	2078      	movs	r0, #120	; 0x78
 8001160:	f000 fa04 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001164:	22da      	movs	r2, #218	; 0xda
 8001166:	2100      	movs	r1, #0
 8001168:	2078      	movs	r0, #120	; 0x78
 800116a:	f000 f9ff 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800116e:	2212      	movs	r2, #18
 8001170:	2100      	movs	r1, #0
 8001172:	2078      	movs	r0, #120	; 0x78
 8001174:	f000 f9fa 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001178:	22db      	movs	r2, #219	; 0xdb
 800117a:	2100      	movs	r1, #0
 800117c:	2078      	movs	r0, #120	; 0x78
 800117e:	f000 f9f5 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001182:	2220      	movs	r2, #32
 8001184:	2100      	movs	r1, #0
 8001186:	2078      	movs	r0, #120	; 0x78
 8001188:	f000 f9f0 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800118c:	228d      	movs	r2, #141	; 0x8d
 800118e:	2100      	movs	r1, #0
 8001190:	2078      	movs	r0, #120	; 0x78
 8001192:	f000 f9eb 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001196:	2214      	movs	r2, #20
 8001198:	2100      	movs	r1, #0
 800119a:	2078      	movs	r0, #120	; 0x78
 800119c:	f000 f9e6 	bl	800156c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011a0:	22af      	movs	r2, #175	; 0xaf
 80011a2:	2100      	movs	r1, #0
 80011a4:	2078      	movs	r0, #120	; 0x78
 80011a6:	f000 f9e1 	bl	800156c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011aa:	222e      	movs	r2, #46	; 0x2e
 80011ac:	2100      	movs	r1, #0
 80011ae:	2078      	movs	r0, #120	; 0x78
 80011b0:	f000 f9dc 	bl	800156c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 f843 	bl	8001240 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80011ba:	f000 f813 	bl	80011e4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <SSD1306_Init+0x184>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <SSD1306_Init+0x184>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SSD1306_Init+0x184>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80011d0:	2301      	movs	r3, #1
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000213c 	.word	0x2000213c
 80011e0:	2000060c 	.word	0x2000060c

080011e4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	71fb      	strb	r3, [r7, #7]
 80011ee:	e01d      	b.n	800122c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	3b50      	subs	r3, #80	; 0x50
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	2100      	movs	r1, #0
 80011fa:	2078      	movs	r0, #120	; 0x78
 80011fc:	f000 f9b6 	bl	800156c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	2078      	movs	r0, #120	; 0x78
 8001206:	f000 f9b1 	bl	800156c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800120a:	2210      	movs	r2, #16
 800120c:	2100      	movs	r1, #0
 800120e:	2078      	movs	r0, #120	; 0x78
 8001210:	f000 f9ac 	bl	800156c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	01db      	lsls	r3, r3, #7
 8001218:	4a08      	ldr	r2, [pc, #32]	; (800123c <SSD1306_UpdateScreen+0x58>)
 800121a:	441a      	add	r2, r3
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	2140      	movs	r1, #64	; 0x40
 8001220:	2078      	movs	r0, #120	; 0x78
 8001222:	f000 f95b 	bl	80014dc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	3301      	adds	r3, #1
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b07      	cmp	r3, #7
 8001230:	d9de      	bls.n	80011f0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000020c 	.word	0x2000020c

08001240 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <SSD1306_Fill+0x14>
 8001250:	2300      	movs	r3, #0
 8001252:	e000      	b.n	8001256 <SSD1306_Fill+0x16>
 8001254:	23ff      	movs	r3, #255	; 0xff
 8001256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125a:	4619      	mov	r1, r3
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <SSD1306_Fill+0x2c>)
 800125e:	f005 ff2a 	bl	80070b6 <memset>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000020c 	.word	0x2000020c

08001270 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
 800127a:	460b      	mov	r3, r1
 800127c:	80bb      	strh	r3, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	70fb      	strb	r3, [r7, #3]
	if (
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	2b7f      	cmp	r3, #127	; 0x7f
 8001286:	d848      	bhi.n	800131a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001288:	88bb      	ldrh	r3, [r7, #4]
 800128a:	2b3f      	cmp	r3, #63	; 0x3f
 800128c:	d845      	bhi.n	800131a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800128e:	4b25      	ldr	r3, [pc, #148]	; (8001324 <SSD1306_DrawPixel+0xb4>)
 8001290:	791b      	ldrb	r3, [r3, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	2b00      	cmp	r3, #0
 800129a:	bf0c      	ite	eq
 800129c:	2301      	moveq	r3, #1
 800129e:	2300      	movne	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012a4:	78fb      	ldrb	r3, [r7, #3]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d11a      	bne.n	80012e0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012aa:	88fa      	ldrh	r2, [r7, #6]
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	08db      	lsrs	r3, r3, #3
 80012b0:	b298      	uxth	r0, r3
 80012b2:	4603      	mov	r3, r0
 80012b4:	01db      	lsls	r3, r3, #7
 80012b6:	4413      	add	r3, r2
 80012b8:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <SSD1306_DrawPixel+0xb8>)
 80012ba:	5cd3      	ldrb	r3, [r2, r3]
 80012bc:	b25a      	sxtb	r2, r3
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	2101      	movs	r1, #1
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b259      	sxtb	r1, r3
 80012d0:	88fa      	ldrh	r2, [r7, #6]
 80012d2:	4603      	mov	r3, r0
 80012d4:	01db      	lsls	r3, r3, #7
 80012d6:	4413      	add	r3, r2
 80012d8:	b2c9      	uxtb	r1, r1
 80012da:	4a13      	ldr	r2, [pc, #76]	; (8001328 <SSD1306_DrawPixel+0xb8>)
 80012dc:	54d1      	strb	r1, [r2, r3]
 80012de:	e01d      	b.n	800131c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012e0:	88fa      	ldrh	r2, [r7, #6]
 80012e2:	88bb      	ldrh	r3, [r7, #4]
 80012e4:	08db      	lsrs	r3, r3, #3
 80012e6:	b298      	uxth	r0, r3
 80012e8:	4603      	mov	r3, r0
 80012ea:	01db      	lsls	r3, r3, #7
 80012ec:	4413      	add	r3, r2
 80012ee:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <SSD1306_DrawPixel+0xb8>)
 80012f0:	5cd3      	ldrb	r3, [r2, r3]
 80012f2:	b25a      	sxtb	r2, r3
 80012f4:	88bb      	ldrh	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	2101      	movs	r1, #1
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	b25b      	sxtb	r3, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	b25b      	sxtb	r3, r3
 8001306:	4013      	ands	r3, r2
 8001308:	b259      	sxtb	r1, r3
 800130a:	88fa      	ldrh	r2, [r7, #6]
 800130c:	4603      	mov	r3, r0
 800130e:	01db      	lsls	r3, r3, #7
 8001310:	4413      	add	r3, r2
 8001312:	b2c9      	uxtb	r1, r1
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <SSD1306_DrawPixel+0xb8>)
 8001316:	54d1      	strb	r1, [r2, r3]
 8001318:	e000      	b.n	800131c <SSD1306_DrawPixel+0xac>
		return;
 800131a:	bf00      	nop
	}
}
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	2000060c 	.word	0x2000060c
 8001328:	2000020c 	.word	0x2000020c

0800132c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	460a      	mov	r2, r1
 8001336:	80fb      	strh	r3, [r7, #6]
 8001338:	4613      	mov	r3, r2
 800133a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800133c:	4a05      	ldr	r2, [pc, #20]	; (8001354 <SSD1306_GotoXY+0x28>)
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <SSD1306_GotoXY+0x28>)
 8001344:	88bb      	ldrh	r3, [r7, #4]
 8001346:	8053      	strh	r3, [r2, #2]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	2000060c 	.word	0x2000060c

08001358 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	4613      	mov	r3, r2
 8001366:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001368:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <SSD1306_Putc+0xfc>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
	if (
 8001374:	2b7f      	cmp	r3, #127	; 0x7f
 8001376:	dc07      	bgt.n	8001388 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001378:	4b36      	ldr	r3, [pc, #216]	; (8001454 <SSD1306_Putc+0xfc>)
 800137a:	885b      	ldrh	r3, [r3, #2]
 800137c:	461a      	mov	r2, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	785b      	ldrb	r3, [r3, #1]
 8001382:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001384:	2b3f      	cmp	r3, #63	; 0x3f
 8001386:	dd01      	ble.n	800138c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001388:	2300      	movs	r3, #0
 800138a:	e05e      	b.n	800144a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e04b      	b.n	800142a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	3b20      	subs	r3, #32
 800139a:	6839      	ldr	r1, [r7, #0]
 800139c:	7849      	ldrb	r1, [r1, #1]
 800139e:	fb01 f303 	mul.w	r3, r1, r3
 80013a2:	4619      	mov	r1, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	440b      	add	r3, r1
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	e030      	b.n	8001418 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d010      	beq.n	80013e8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <SSD1306_Putc+0xfc>)
 80013c8:	881a      	ldrh	r2, [r3, #0]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	b298      	uxth	r0, r3
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <SSD1306_Putc+0xfc>)
 80013d4:	885a      	ldrh	r2, [r3, #2]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	4413      	add	r3, r2
 80013dc:	b29b      	uxth	r3, r3
 80013de:	79ba      	ldrb	r2, [r7, #6]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f7ff ff45 	bl	8001270 <SSD1306_DrawPixel>
 80013e6:	e014      	b.n	8001412 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <SSD1306_Putc+0xfc>)
 80013ea:	881a      	ldrh	r2, [r3, #0]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	b298      	uxth	r0, r3
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <SSD1306_Putc+0xfc>)
 80013f6:	885a      	ldrh	r2, [r3, #2]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4413      	add	r3, r2
 80013fe:	b299      	uxth	r1, r3
 8001400:	79bb      	ldrb	r3, [r7, #6]
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf0c      	ite	eq
 8001406:	2301      	moveq	r3, #1
 8001408:	2300      	movne	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	f7ff ff2f 	bl	8001270 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	3301      	adds	r3, #1
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4293      	cmp	r3, r2
 8001422:	d3c8      	bcc.n	80013b6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	785b      	ldrb	r3, [r3, #1]
 800142e:	461a      	mov	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	4293      	cmp	r3, r2
 8001434:	d3ad      	bcc.n	8001392 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <SSD1306_Putc+0xfc>)
 8001438:	881a      	ldrh	r2, [r3, #0]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	4413      	add	r3, r2
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <SSD1306_Putc+0xfc>)
 8001446:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001448:	79fb      	ldrb	r3, [r7, #7]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000060c 	.word	0x2000060c

08001458 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	4613      	mov	r3, r2
 8001464:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001466:	e012      	b.n	800148e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff71 	bl	8001358 <SSD1306_Putc>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d002      	beq.n	8001488 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	e008      	b.n	800149a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3301      	adds	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1e8      	bne.n	8001468 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	781b      	ldrb	r3, [r3, #0]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff feca 	bl	8001240 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80014ac:	f7ff fe9a 	bl	80011e4 <SSD1306_UpdateScreen>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <ssd1306_I2C_Init+0x24>)
 80014bc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014be:	e002      	b.n	80014c6 <ssd1306_I2C_Init+0x12>
		p--;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f9      	bne.n	80014c0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	0003d090 	.word	0x0003d090

080014dc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b0c7      	sub	sp, #284	; 0x11c
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	4604      	mov	r4, r0
 80014e4:	4608      	mov	r0, r1
 80014e6:	4639      	mov	r1, r7
 80014e8:	600a      	str	r2, [r1, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	4622      	mov	r2, r4
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	1dbb      	adds	r3, r7, #6
 80014f4:	4602      	mov	r2, r0
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	460a      	mov	r2, r1
 80014fc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	1dba      	adds	r2, r7, #6
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001508:	2300      	movs	r3, #0
 800150a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800150e:	e010      	b.n	8001532 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001510:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001514:	463a      	mov	r2, r7
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	441a      	add	r2, r3
 800151a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800151e:	3301      	adds	r3, #1
 8001520:	7811      	ldrb	r1, [r2, #0]
 8001522:	f107 020c 	add.w	r2, r7, #12
 8001526:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001528:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800152c:	3301      	adds	r3, #1
 800152e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001532:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001536:	b29b      	uxth	r3, r3
 8001538:	1d3a      	adds	r2, r7, #4
 800153a:	8812      	ldrh	r2, [r2, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8e7      	bhi.n	8001510 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b299      	uxth	r1, r3
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	b298      	uxth	r0, r3
 800154e:	f107 020c 	add.w	r2, r7, #12
 8001552:	230a      	movs	r3, #10
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	4603      	mov	r3, r0
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <ssd1306_I2C_WriteMulti+0x8c>)
 800155a:	f001 fa4b 	bl	80029f4 <HAL_I2C_Master_Transmit>
}
 800155e:	bf00      	nop
 8001560:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001564:	46bd      	mov	sp, r7
 8001566:	bd90      	pop	{r4, r7, pc}
 8001568:	2000213c 	.word	0x2000213c

0800156c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af02      	add	r7, sp, #8
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
 8001576:	460b      	mov	r3, r1
 8001578:	71bb      	strb	r3, [r7, #6]
 800157a:	4613      	mov	r3, r2
 800157c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800157e:	79bb      	ldrb	r3, [r7, #6]
 8001580:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001582:	797b      	ldrb	r3, [r7, #5]
 8001584:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	b299      	uxth	r1, r3
 800158a:	f107 020c 	add.w	r2, r7, #12
 800158e:	230a      	movs	r3, #10
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2302      	movs	r3, #2
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <ssd1306_I2C_Write+0x38>)
 8001596:	f001 fa2d 	bl	80029f4 <HAL_I2C_Master_Transmit>
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000213c 	.word	0x2000213c

080015a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_MspInit+0x68>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	4a17      	ldr	r2, [pc, #92]	; (8001610 <HAL_MspInit+0x68>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6193      	str	r3, [r2, #24]
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_MspInit+0x68>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_MspInit+0x68>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a11      	ldr	r2, [pc, #68]	; (8001610 <HAL_MspInit+0x68>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d0:	61d3      	str	r3, [r2, #28]
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_MspInit+0x68>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	210f      	movs	r1, #15
 80015e2:	f06f 0001 	mvn.w	r0, #1
 80015e6:	f000 ff18 	bl	800241a <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_MspInit+0x6c>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_MspInit+0x6c>)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000
 8001614:	40010000 	.word	0x40010000

08001618 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a14      	ldr	r2, [pc, #80]	; (8001684 <HAL_ADC_MspInit+0x6c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d121      	bne.n	800167c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_ADC_MspInit+0x70>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a12      	ldr	r2, [pc, #72]	; (8001688 <HAL_ADC_MspInit+0x70>)
 800163e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_ADC_MspInit+0x70>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_ADC_MspInit+0x70>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <HAL_ADC_MspInit+0x70>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_ADC_MspInit+0x70>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_X_Pin;
 8001668:	2301      	movs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800166c:	2303      	movs	r3, #3
 800166e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC1_X_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4619      	mov	r1, r3
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_ADC_MspInit+0x74>)
 8001678:	f000 fefa 	bl	8002470 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800167c:	bf00      	nop
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40012400 	.word	0x40012400
 8001688:	40021000 	.word	0x40021000
 800168c:	40010800 	.word	0x40010800

08001690 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a15      	ldr	r2, [pc, #84]	; (8001700 <HAL_I2C_MspInit+0x70>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d123      	bne.n	80016f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HAL_I2C_MspInit+0x74>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a13      	ldr	r2, [pc, #76]	; (8001704 <HAL_I2C_MspInit+0x74>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_I2C_MspInit+0x74>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016c8:	23c0      	movs	r3, #192	; 0xc0
 80016ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016cc:	2312      	movs	r3, #18
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	4619      	mov	r1, r3
 80016da:	480b      	ldr	r0, [pc, #44]	; (8001708 <HAL_I2C_MspInit+0x78>)
 80016dc:	f000 fec8 	bl	8002470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_I2C_MspInit+0x74>)
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_I2C_MspInit+0x74>)
 80016e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ea:	61d3      	str	r3, [r2, #28]
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_I2C_MspInit+0x74>)
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016f8:	bf00      	nop
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40005400 	.word	0x40005400
 8001704:	40021000 	.word	0x40021000
 8001708:	40010c00 	.word	0x40010c00

0800170c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <HAL_UART_MspInit+0x8c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d131      	bne.n	8001790 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_UART_MspInit+0x90>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a1a      	ldr	r2, [pc, #104]	; (800179c <HAL_UART_MspInit+0x90>)
 8001732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_UART_MspInit+0x90>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_UART_MspInit+0x90>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_UART_MspInit+0x90>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_UART_MspInit+0x90>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800175c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	4619      	mov	r1, r3
 8001770:	480b      	ldr	r0, [pc, #44]	; (80017a0 <HAL_UART_MspInit+0x94>)
 8001772:	f000 fe7d 	bl	8002470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	4619      	mov	r1, r3
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <HAL_UART_MspInit+0x94>)
 800178c:	f000 fe70 	bl	8002470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40013800 	.word	0x40013800
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010800 	.word	0x40010800

080017a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	; 0x30
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	201e      	movs	r0, #30
 80017ba:	f000 fe2e 	bl	800241a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017be:	201e      	movs	r0, #30
 80017c0:	f000 fe47 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <HAL_InitTick+0xa0>)
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <HAL_InitTick+0xa0>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	61d3      	str	r3, [r2, #28]
 80017d0:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_InitTick+0xa0>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017dc:	f107 0210 	add.w	r2, r7, #16
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 f936 	bl	8003a58 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80017ec:	f002 f90c 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 80017f0:	4603      	mov	r3, r0
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f8:	4a13      	ldr	r2, [pc, #76]	; (8001848 <HAL_InitTick+0xa4>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	0c9b      	lsrs	r3, r3, #18
 8001800:	3b01      	subs	r3, #1
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_InitTick+0xa8>)
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <HAL_InitTick+0xac>)
 8001808:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_InitTick+0xa8>)
 800180c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001810:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001812:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_InitTick+0xa8>)
 8001814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001816:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_InitTick+0xa8>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_InitTick+0xa8>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001824:	4809      	ldr	r0, [pc, #36]	; (800184c <HAL_InitTick+0xa8>)
 8001826:	f002 fad7 	bl	8003dd8 <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d104      	bne.n	800183a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001830:	4806      	ldr	r0, [pc, #24]	; (800184c <HAL_InitTick+0xa8>)
 8001832:	f002 fb29 	bl	8003e88 <HAL_TIM_Base_Start_IT>
 8001836:	4603      	mov	r3, r0
 8001838:	e000      	b.n	800183c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	3730      	adds	r7, #48	; 0x30
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000
 8001848:	431bde83 	.word	0x431bde83
 800184c:	20002250 	.word	0x20002250
 8001850:	40000800 	.word	0x40000800

08001854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <NMI_Handler+0x4>

0800185a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <MemManage_Handler+0x4>

08001866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <BusFault_Handler+0x4>

0800186c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <UsageFault_Handler+0x4>

08001872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
	...

08001880 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <TIM4_IRQHandler+0x10>)
 8001886:	f002 fb51 	bl	8003f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20002250 	.word	0x20002250

08001894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800189c:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <_sbrk+0x5c>)
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <_sbrk+0x60>)
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <_sbrk+0x64>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <_sbrk+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d207      	bcs.n	80018d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c4:	f005 fbc2 	bl	800704c <__errno>
 80018c8:	4602      	mov	r2, r0
 80018ca:	230c      	movs	r3, #12
 80018cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e009      	b.n	80018e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <_sbrk+0x64>)
 80018e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20005000 	.word	0x20005000
 80018f4:	00000400 	.word	0x00000400
 80018f8:	20000614 	.word	0x20000614
 80018fc:	200022e0 	.word	0x200022e0

08001900 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800190c:	480c      	ldr	r0, [pc, #48]	; (8001940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800190e:	490d      	ldr	r1, [pc, #52]	; (8001944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001910:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001924:	4c0a      	ldr	r4, [pc, #40]	; (8001950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001932:	f7ff ffe5 	bl	8001900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001936:	f005 fb8f 	bl	8007058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800193a:	f7ff f8a5 	bl	8000a88 <main>
  bx lr
 800193e:	4770      	bx	lr
  ldr r0, =_sdata
 8001940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001944:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001948:	0800a2e8 	.word	0x0800a2e8
  ldr r2, =_sbss
 800194c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001950:	200022e0 	.word	0x200022e0

08001954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <ADC1_2_IRQHandler>
	...

08001958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <HAL_Init+0x28>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a07      	ldr	r2, [pc, #28]	; (8001980 <HAL_Init+0x28>)
 8001962:	f043 0310 	orr.w	r3, r3, #16
 8001966:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001968:	2003      	movs	r0, #3
 800196a:	f000 fd4b 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff ff18 	bl	80017a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001974:	f7ff fe18 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40022000 	.word	0x40022000

08001984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_IncTick+0x1c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_IncTick+0x20>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <HAL_IncTick+0x20>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	20000010 	.word	0x20000010
 80019a4:	20002298 	.word	0x20002298

080019a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b02      	ldr	r3, [pc, #8]	; (80019b8 <HAL_GetTick+0x10>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	20002298 	.word	0x20002298

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff fff0 	bl	80019a8 <HAL_GetTick>
 80019c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d4:	d005      	beq.n	80019e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_Delay+0x40>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019e2:	bf00      	nop
 80019e4:	f7ff ffe0 	bl	80019a8 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f7      	bhi.n	80019e4 <HAL_Delay+0x28>
  {
  }
}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000010 	.word	0x20000010

08001a00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0be      	b.n	8001ba0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fdea 	bl	8001618 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fbf1 	bl	800222c <ADC_ConversionStop_Disable>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f040 8099 	bne.w	8001b8e <HAL_ADC_Init+0x18e>
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f040 8095 	bne.w	8001b8e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a6c:	f023 0302 	bic.w	r3, r3, #2
 8001a70:	f043 0202 	orr.w	r2, r3, #2
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a80:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7b1b      	ldrb	r3, [r3, #12]
 8001a86:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a88:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a98:	d003      	beq.n	8001aa2 <HAL_ADC_Init+0xa2>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d102      	bne.n	8001aa8 <HAL_ADC_Init+0xa8>
 8001aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa6:	e000      	b.n	8001aaa <HAL_ADC_Init+0xaa>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7d1b      	ldrb	r3, [r3, #20]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d119      	bne.n	8001aec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7b1b      	ldrb	r3, [r3, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d109      	bne.n	8001ad4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	035a      	lsls	r2, r3, #13
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	e00b      	b.n	8001aec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	f043 0220 	orr.w	r2, r3, #32
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	f043 0201 	orr.w	r2, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <HAL_ADC_Init+0x1a8>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	430b      	orrs	r3, r1
 8001b12:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b1c:	d003      	beq.n	8001b26 <HAL_ADC_Init+0x126>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d104      	bne.n	8001b30 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	051b      	lsls	r3, r3, #20
 8001b2e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_ADC_Init+0x1ac>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d10b      	bne.n	8001b6c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	f023 0303 	bic.w	r3, r3, #3
 8001b62:	f043 0201 	orr.w	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b6a:	e018      	b.n	8001b9e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	f023 0312 	bic.w	r3, r3, #18
 8001b74:	f043 0210 	orr.w	r2, r3, #16
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	f043 0201 	orr.w	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b8c:	e007      	b.n	8001b9e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	f043 0210 	orr.w	r2, r3, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	ffe1f7fd 	.word	0xffe1f7fd
 8001bac:	ff1f0efe 	.word	0xff1f0efe

08001bb0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_ADC_Start+0x1a>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e098      	b.n	8001cfc <HAL_ADC_Start+0x14c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fad0 	bl	8002178 <ADC_Enable>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 8087 	bne.w	8001cf2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a41      	ldr	r2, [pc, #260]	; (8001d04 <HAL_ADC_Start+0x154>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d105      	bne.n	8001c0e <HAL_ADC_Start+0x5e>
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <HAL_ADC_Start+0x158>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d115      	bne.n	8001c3a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d026      	beq.n	8001c76 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c38:	e01d      	b.n	8001c76 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a2f      	ldr	r2, [pc, #188]	; (8001d08 <HAL_ADC_Start+0x158>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d004      	beq.n	8001c5a <HAL_ADC_Start+0xaa>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a2b      	ldr	r2, [pc, #172]	; (8001d04 <HAL_ADC_Start+0x154>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10d      	bne.n	8001c76 <HAL_ADC_Start+0xc6>
 8001c5a:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <HAL_ADC_Start+0x158>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d006      	beq.n	8001c90 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c86:	f023 0206 	bic.w	r2, r3, #6
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c8e:	e002      	b.n	8001c96 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f06f 0202 	mvn.w	r2, #2
 8001ca6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cb2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cb6:	d113      	bne.n	8001ce0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001cbc:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_ADC_Start+0x154>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d105      	bne.n	8001cce <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_ADC_Start+0x158>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d108      	bne.n	8001ce0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	e00c      	b.n	8001cfa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	e003      	b.n	8001cfa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40012800 	.word	0x40012800
 8001d08:	40012400 	.word	0x40012400

08001d0c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_Stop+0x1a>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e01a      	b.n	8001d5c <HAL_ADC_Stop+0x50>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fa7c 	bl	800222c <ADC_ConversionStop_Disable>
 8001d34:	4603      	mov	r3, r0
 8001d36:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d46:	f023 0301 	bic.w	r3, r3, #1
 8001d4a:	f043 0201 	orr.w	r2, r3, #1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d7a:	f7ff fe15 	bl	80019a8 <HAL_GetTick>
 8001d7e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d92:	f043 0220 	orr.w	r2, r3, #32
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e0d3      	b.n	8001f4e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d131      	bne.n	8001e18 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d12a      	bne.n	8001e18 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001dc2:	e021      	b.n	8001e08 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dca:	d01d      	beq.n	8001e08 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_ADC_PollForConversion+0x7e>
 8001dd2:	f7ff fde9 	bl	80019a8 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d212      	bcs.n	8001e08 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10b      	bne.n	8001e08 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	f043 0204 	orr.w	r2, r3, #4
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e0a2      	b.n	8001f4e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0d6      	beq.n	8001dc4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e16:	e070      	b.n	8001efa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e18:	4b4f      	ldr	r3, [pc, #316]	; (8001f58 <HAL_ADC_PollForConversion+0x1f4>)
 8001e1a:	681c      	ldr	r4, [r3, #0]
 8001e1c:	2002      	movs	r0, #2
 8001e1e:	f001 ff1f 	bl	8003c60 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e22:	4603      	mov	r3, r0
 8001e24:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6919      	ldr	r1, [r3, #16]
 8001e2e:	4b4b      	ldr	r3, [pc, #300]	; (8001f5c <HAL_ADC_PollForConversion+0x1f8>)
 8001e30:	400b      	ands	r3, r1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d118      	bne.n	8001e68 <HAL_ADC_PollForConversion+0x104>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68d9      	ldr	r1, [r3, #12]
 8001e3c:	4b48      	ldr	r3, [pc, #288]	; (8001f60 <HAL_ADC_PollForConversion+0x1fc>)
 8001e3e:	400b      	ands	r3, r1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d111      	bne.n	8001e68 <HAL_ADC_PollForConversion+0x104>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6919      	ldr	r1, [r3, #16]
 8001e4a:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <HAL_ADC_PollForConversion+0x200>)
 8001e4c:	400b      	ands	r3, r1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d108      	bne.n	8001e64 <HAL_ADC_PollForConversion+0x100>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68d9      	ldr	r1, [r3, #12]
 8001e58:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <HAL_ADC_PollForConversion+0x204>)
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_PollForConversion+0x100>
 8001e60:	2314      	movs	r3, #20
 8001e62:	e020      	b.n	8001ea6 <HAL_ADC_PollForConversion+0x142>
 8001e64:	2329      	movs	r3, #41	; 0x29
 8001e66:	e01e      	b.n	8001ea6 <HAL_ADC_PollForConversion+0x142>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6919      	ldr	r1, [r3, #16]
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_ADC_PollForConversion+0x200>)
 8001e70:	400b      	ands	r3, r1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_ADC_PollForConversion+0x120>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68d9      	ldr	r1, [r3, #12]
 8001e7c:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <HAL_ADC_PollForConversion+0x204>)
 8001e7e:	400b      	ands	r3, r1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00d      	beq.n	8001ea0 <HAL_ADC_PollForConversion+0x13c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6919      	ldr	r1, [r3, #16]
 8001e8a:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <HAL_ADC_PollForConversion+0x208>)
 8001e8c:	400b      	ands	r3, r1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d108      	bne.n	8001ea4 <HAL_ADC_PollForConversion+0x140>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68d9      	ldr	r1, [r3, #12]
 8001e98:	4b34      	ldr	r3, [pc, #208]	; (8001f6c <HAL_ADC_PollForConversion+0x208>)
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADC_PollForConversion+0x140>
 8001ea0:	2354      	movs	r3, #84	; 0x54
 8001ea2:	e000      	b.n	8001ea6 <HAL_ADC_PollForConversion+0x142>
 8001ea4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001ea6:	fb02 f303 	mul.w	r3, r2, r3
 8001eaa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001eac:	e021      	b.n	8001ef2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb4:	d01a      	beq.n	8001eec <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <HAL_ADC_PollForConversion+0x168>
 8001ebc:	f7ff fd74 	bl	80019a8 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d20f      	bcs.n	8001eec <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d90b      	bls.n	8001eec <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	f043 0204 	orr.w	r2, r3, #4
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e030      	b.n	8001f4e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d8d9      	bhi.n	8001eae <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f06f 0212 	mvn.w	r2, #18
 8001f02:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f1e:	d115      	bne.n	8001f4c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d111      	bne.n	8001f4c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	f043 0201 	orr.w	r2, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	24924924 	.word	0x24924924
 8001f60:	00924924 	.word	0x00924924
 8001f64:	12492492 	.word	0x12492492
 8001f68:	00492492 	.word	0x00492492
 8001f6c:	00249249 	.word	0x00249249

08001f70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x20>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e0dc      	b.n	8002162 <HAL_ADC_ConfigChannel+0x1da>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b06      	cmp	r3, #6
 8001fb6:	d81c      	bhi.n	8001ff2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b05      	subs	r3, #5
 8001fca:	221f      	movs	r2, #31
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4019      	ands	r1, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3b05      	subs	r3, #5
 8001fe4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff0:	e03c      	b.n	800206c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d81c      	bhi.n	8002034 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	3b23      	subs	r3, #35	; 0x23
 800200c:	221f      	movs	r2, #31
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	4019      	ands	r1, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	3b23      	subs	r3, #35	; 0x23
 8002026:	fa00 f203 	lsl.w	r2, r0, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
 8002032:	e01b      	b.n	800206c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	3b41      	subs	r3, #65	; 0x41
 8002046:	221f      	movs	r2, #31
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	4019      	ands	r1, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	3b41      	subs	r3, #65	; 0x41
 8002060:	fa00 f203 	lsl.w	r2, r0, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b09      	cmp	r3, #9
 8002072:	d91c      	bls.n	80020ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68d9      	ldr	r1, [r3, #12]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	3b1e      	subs	r3, #30
 8002086:	2207      	movs	r2, #7
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	4019      	ands	r1, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6898      	ldr	r0, [r3, #8]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	3b1e      	subs	r3, #30
 80020a0:	fa00 f203 	lsl.w	r2, r0, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	e019      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6919      	ldr	r1, [r3, #16]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	2207      	movs	r2, #7
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4019      	ands	r1, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6898      	ldr	r0, [r3, #8]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	fa00 f203 	lsl.w	r2, r0, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b10      	cmp	r3, #16
 80020e8:	d003      	beq.n	80020f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020ee:	2b11      	cmp	r3, #17
 80020f0:	d132      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_ADC_ConfigChannel+0x1e4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d125      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d126      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002118:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b10      	cmp	r3, #16
 8002120:	d11a      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_ADC_ConfigChannel+0x1e8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a13      	ldr	r2, [pc, #76]	; (8002174 <HAL_ADC_ConfigChannel+0x1ec>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	0c9a      	lsrs	r2, r3, #18
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002138:	e002      	b.n	8002140 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3b01      	subs	r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f9      	bne.n	800213a <HAL_ADC_ConfigChannel+0x1b2>
 8002146:	e007      	b.n	8002158 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	f043 0220 	orr.w	r2, r3, #32
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	40012400 	.word	0x40012400
 8002170:	20000008 	.word	0x20000008
 8002174:	431bde83 	.word	0x431bde83

08002178 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d040      	beq.n	8002218 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021a6:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <ADC_Enable+0xac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1f      	ldr	r2, [pc, #124]	; (8002228 <ADC_Enable+0xb0>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	0c9b      	lsrs	r3, r3, #18
 80021b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021b4:	e002      	b.n	80021bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f9      	bne.n	80021b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021c2:	f7ff fbf1 	bl	80019a8 <HAL_GetTick>
 80021c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021c8:	e01f      	b.n	800220a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021ca:	f7ff fbed 	bl	80019a8 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d918      	bls.n	800220a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d011      	beq.n	800220a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e007      	b.n	800221a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	d1d8      	bne.n	80021ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000008 	.word	0x20000008
 8002228:	431bde83 	.word	0x431bde83

0800222c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d12e      	bne.n	80022a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0201 	bic.w	r2, r2, #1
 8002254:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002256:	f7ff fba7 	bl	80019a8 <HAL_GetTick>
 800225a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800225c:	e01b      	b.n	8002296 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800225e:	f7ff fba3 	bl	80019a8 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d914      	bls.n	8002296 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d10d      	bne.n	8002296 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	f043 0210 	orr.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e007      	b.n	80022a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d0dc      	beq.n	800225e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4906      	ldr	r1, [pc, #24]	; (8002348 <__NVIC_EnableIRQ+0x34>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	e000e100 	.word	0xe000e100

0800234c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	db0a      	blt.n	8002376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	490c      	ldr	r1, [pc, #48]	; (8002398 <__NVIC_SetPriority+0x4c>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	440b      	add	r3, r1
 8002370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002374:	e00a      	b.n	800238c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4908      	ldr	r1, [pc, #32]	; (800239c <__NVIC_SetPriority+0x50>)
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	3b04      	subs	r3, #4
 8002384:	0112      	lsls	r2, r2, #4
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	440b      	add	r3, r1
 800238a:	761a      	strb	r2, [r3, #24]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f1c3 0307 	rsb	r3, r3, #7
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	bf28      	it	cs
 80023be:	2304      	movcs	r3, #4
 80023c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d902      	bls.n	80023d0 <NVIC_EncodePriority+0x30>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3b03      	subs	r3, #3
 80023ce:	e000      	b.n	80023d2 <NVIC_EncodePriority+0x32>
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	401a      	ands	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43d9      	mvns	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	4313      	orrs	r3, r2
         );
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3724      	adds	r7, #36	; 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff4f 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff64 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ffb2 	bl	80023a0 <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff81 	bl	800234c <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff57 	bl	8002314 <__NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002470:	b480      	push	{r7}
 8002472:	b08b      	sub	sp, #44	; 0x2c
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002482:	e127      	b.n	80026d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002484:	2201      	movs	r2, #1
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	429a      	cmp	r2, r3
 800249e:	f040 8116 	bne.w	80026ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b12      	cmp	r3, #18
 80024a8:	d034      	beq.n	8002514 <HAL_GPIO_Init+0xa4>
 80024aa:	2b12      	cmp	r3, #18
 80024ac:	d80d      	bhi.n	80024ca <HAL_GPIO_Init+0x5a>
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d02b      	beq.n	800250a <HAL_GPIO_Init+0x9a>
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d804      	bhi.n	80024c0 <HAL_GPIO_Init+0x50>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d031      	beq.n	800251e <HAL_GPIO_Init+0xae>
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d01c      	beq.n	80024f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024be:	e048      	b.n	8002552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d043      	beq.n	800254c <HAL_GPIO_Init+0xdc>
 80024c4:	2b11      	cmp	r3, #17
 80024c6:	d01b      	beq.n	8002500 <HAL_GPIO_Init+0x90>
          break;
 80024c8:	e043      	b.n	8002552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024ca:	4a89      	ldr	r2, [pc, #548]	; (80026f0 <HAL_GPIO_Init+0x280>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d026      	beq.n	800251e <HAL_GPIO_Init+0xae>
 80024d0:	4a87      	ldr	r2, [pc, #540]	; (80026f0 <HAL_GPIO_Init+0x280>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d806      	bhi.n	80024e4 <HAL_GPIO_Init+0x74>
 80024d6:	4a87      	ldr	r2, [pc, #540]	; (80026f4 <HAL_GPIO_Init+0x284>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d020      	beq.n	800251e <HAL_GPIO_Init+0xae>
 80024dc:	4a86      	ldr	r2, [pc, #536]	; (80026f8 <HAL_GPIO_Init+0x288>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01d      	beq.n	800251e <HAL_GPIO_Init+0xae>
          break;
 80024e2:	e036      	b.n	8002552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80024e4:	4a85      	ldr	r2, [pc, #532]	; (80026fc <HAL_GPIO_Init+0x28c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d019      	beq.n	800251e <HAL_GPIO_Init+0xae>
 80024ea:	4a85      	ldr	r2, [pc, #532]	; (8002700 <HAL_GPIO_Init+0x290>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d016      	beq.n	800251e <HAL_GPIO_Init+0xae>
 80024f0:	4a84      	ldr	r2, [pc, #528]	; (8002704 <HAL_GPIO_Init+0x294>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_GPIO_Init+0xae>
          break;
 80024f6:	e02c      	b.n	8002552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	623b      	str	r3, [r7, #32]
          break;
 80024fe:	e028      	b.n	8002552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	3304      	adds	r3, #4
 8002506:	623b      	str	r3, [r7, #32]
          break;
 8002508:	e023      	b.n	8002552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	3308      	adds	r3, #8
 8002510:	623b      	str	r3, [r7, #32]
          break;
 8002512:	e01e      	b.n	8002552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	330c      	adds	r3, #12
 800251a:	623b      	str	r3, [r7, #32]
          break;
 800251c:	e019      	b.n	8002552 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002526:	2304      	movs	r3, #4
 8002528:	623b      	str	r3, [r7, #32]
          break;
 800252a:	e012      	b.n	8002552 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d105      	bne.n	8002540 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002534:	2308      	movs	r3, #8
 8002536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	611a      	str	r2, [r3, #16]
          break;
 800253e:	e008      	b.n	8002552 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002540:	2308      	movs	r3, #8
 8002542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	615a      	str	r2, [r3, #20]
          break;
 800254a:	e002      	b.n	8002552 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800254c:	2300      	movs	r3, #0
 800254e:	623b      	str	r3, [r7, #32]
          break;
 8002550:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2bff      	cmp	r3, #255	; 0xff
 8002556:	d801      	bhi.n	800255c <HAL_GPIO_Init+0xec>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	e001      	b.n	8002560 <HAL_GPIO_Init+0xf0>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3304      	adds	r3, #4
 8002560:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2bff      	cmp	r3, #255	; 0xff
 8002566:	d802      	bhi.n	800256e <HAL_GPIO_Init+0xfe>
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	e002      	b.n	8002574 <HAL_GPIO_Init+0x104>
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	3b08      	subs	r3, #8
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	210f      	movs	r1, #15
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	401a      	ands	r2, r3
 8002586:	6a39      	ldr	r1, [r7, #32]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	431a      	orrs	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8096 	beq.w	80026ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025a2:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_GPIO_Init+0x298>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	4a58      	ldr	r2, [pc, #352]	; (8002708 <HAL_GPIO_Init+0x298>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6193      	str	r3, [r2, #24]
 80025ae:	4b56      	ldr	r3, [pc, #344]	; (8002708 <HAL_GPIO_Init+0x298>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025ba:	4a54      	ldr	r2, [pc, #336]	; (800270c <HAL_GPIO_Init+0x29c>)
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4013      	ands	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4b      	ldr	r2, [pc, #300]	; (8002710 <HAL_GPIO_Init+0x2a0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_GPIO_Init+0x19e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4a      	ldr	r2, [pc, #296]	; (8002714 <HAL_GPIO_Init+0x2a4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00d      	beq.n	800260a <HAL_GPIO_Init+0x19a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a49      	ldr	r2, [pc, #292]	; (8002718 <HAL_GPIO_Init+0x2a8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d007      	beq.n	8002606 <HAL_GPIO_Init+0x196>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a48      	ldr	r2, [pc, #288]	; (800271c <HAL_GPIO_Init+0x2ac>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_GPIO_Init+0x192>
 80025fe:	2303      	movs	r3, #3
 8002600:	e006      	b.n	8002610 <HAL_GPIO_Init+0x1a0>
 8002602:	2304      	movs	r3, #4
 8002604:	e004      	b.n	8002610 <HAL_GPIO_Init+0x1a0>
 8002606:	2302      	movs	r3, #2
 8002608:	e002      	b.n	8002610 <HAL_GPIO_Init+0x1a0>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_GPIO_Init+0x1a0>
 800260e:	2300      	movs	r3, #0
 8002610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002612:	f002 0203 	and.w	r2, r2, #3
 8002616:	0092      	lsls	r2, r2, #2
 8002618:	4093      	lsls	r3, r2
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002620:	493a      	ldr	r1, [pc, #232]	; (800270c <HAL_GPIO_Init+0x29c>)
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	089b      	lsrs	r3, r3, #2
 8002626:	3302      	adds	r3, #2
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d006      	beq.n	8002648 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800263a:	4b39      	ldr	r3, [pc, #228]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4938      	ldr	r1, [pc, #224]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
 8002646:	e006      	b.n	8002656 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002648:	4b35      	ldr	r3, [pc, #212]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	43db      	mvns	r3, r3
 8002650:	4933      	ldr	r1, [pc, #204]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 8002652:	4013      	ands	r3, r2
 8002654:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d006      	beq.n	8002670 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002662:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	492e      	ldr	r1, [pc, #184]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	604b      	str	r3, [r1, #4]
 800266e:	e006      	b.n	800267e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002670:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	43db      	mvns	r3, r3
 8002678:	4929      	ldr	r1, [pc, #164]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 800267a:	4013      	ands	r3, r2
 800267c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d006      	beq.n	8002698 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800268a:	4b25      	ldr	r3, [pc, #148]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	4924      	ldr	r1, [pc, #144]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
 8002696:	e006      	b.n	80026a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002698:	4b21      	ldr	r3, [pc, #132]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	43db      	mvns	r3, r3
 80026a0:	491f      	ldr	r1, [pc, #124]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d006      	beq.n	80026c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026b2:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	491a      	ldr	r1, [pc, #104]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60cb      	str	r3, [r1, #12]
 80026be:	e006      	b.n	80026ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026c0:	4b17      	ldr	r3, [pc, #92]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	4915      	ldr	r1, [pc, #84]	; (8002720 <HAL_GPIO_Init+0x2b0>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	3301      	adds	r3, #1
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	fa22 f303 	lsr.w	r3, r2, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f47f aed0 	bne.w	8002484 <HAL_GPIO_Init+0x14>
  }
}
 80026e4:	bf00      	nop
 80026e6:	372c      	adds	r7, #44	; 0x2c
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	10210000 	.word	0x10210000
 80026f4:	10110000 	.word	0x10110000
 80026f8:	10120000 	.word	0x10120000
 80026fc:	10310000 	.word	0x10310000
 8002700:	10320000 	.word	0x10320000
 8002704:	10220000 	.word	0x10220000
 8002708:	40021000 	.word	0x40021000
 800270c:	40010000 	.word	0x40010000
 8002710:	40010800 	.word	0x40010800
 8002714:	40010c00 	.word	0x40010c00
 8002718:	40011000 	.word	0x40011000
 800271c:	40011400 	.word	0x40011400
 8002720:	40010400 	.word	0x40010400

08002724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	887b      	ldrh	r3, [r7, #2]
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	e001      	b.n	8002746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002746:	7bfb      	ldrb	r3, [r7, #15]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	807b      	strh	r3, [r7, #2]
 800275e:	4613      	mov	r3, r2
 8002760:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002762:	787b      	ldrb	r3, [r7, #1]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002768:	887a      	ldrh	r2, [r7, #2]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800276e:	e003      	b.n	8002778 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002770:	887b      	ldrh	r3, [r7, #2]
 8002772:	041a      	lsls	r2, r3, #16
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	611a      	str	r2, [r3, #16]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
	...

08002784 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e11f      	b.n	80029d6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe ff70 	bl	8001690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2224      	movs	r2, #36	; 0x24
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027e8:	f001 f90e 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 80027ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4a7b      	ldr	r2, [pc, #492]	; (80029e0 <HAL_I2C_Init+0x25c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d807      	bhi.n	8002808 <HAL_I2C_Init+0x84>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a7a      	ldr	r2, [pc, #488]	; (80029e4 <HAL_I2C_Init+0x260>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	bf94      	ite	ls
 8002800:	2301      	movls	r3, #1
 8002802:	2300      	movhi	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	e006      	b.n	8002816 <HAL_I2C_Init+0x92>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a77      	ldr	r2, [pc, #476]	; (80029e8 <HAL_I2C_Init+0x264>)
 800280c:	4293      	cmp	r3, r2
 800280e:	bf94      	ite	ls
 8002810:	2301      	movls	r3, #1
 8002812:	2300      	movhi	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0db      	b.n	80029d6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4a72      	ldr	r2, [pc, #456]	; (80029ec <HAL_I2C_Init+0x268>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	0c9b      	lsrs	r3, r3, #18
 8002828:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	430a      	orrs	r2, r1
 800283c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a64      	ldr	r2, [pc, #400]	; (80029e0 <HAL_I2C_Init+0x25c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d802      	bhi.n	8002858 <HAL_I2C_Init+0xd4>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3301      	adds	r3, #1
 8002856:	e009      	b.n	800286c <HAL_I2C_Init+0xe8>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800285e:	fb02 f303 	mul.w	r3, r2, r3
 8002862:	4a63      	ldr	r2, [pc, #396]	; (80029f0 <HAL_I2C_Init+0x26c>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	3301      	adds	r3, #1
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	430b      	orrs	r3, r1
 8002872:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800287e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4956      	ldr	r1, [pc, #344]	; (80029e0 <HAL_I2C_Init+0x25c>)
 8002888:	428b      	cmp	r3, r1
 800288a:	d80d      	bhi.n	80028a8 <HAL_I2C_Init+0x124>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1e59      	subs	r1, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	fbb1 f3f3 	udiv	r3, r1, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	bf38      	it	cc
 80028a4:	2304      	movcc	r3, #4
 80028a6:	e04f      	b.n	8002948 <HAL_I2C_Init+0x1c4>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d111      	bne.n	80028d4 <HAL_I2C_Init+0x150>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1e58      	subs	r0, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	440b      	add	r3, r1
 80028be:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf0c      	ite	eq
 80028cc:	2301      	moveq	r3, #1
 80028ce:	2300      	movne	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e012      	b.n	80028fa <HAL_I2C_Init+0x176>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1e58      	subs	r0, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	0099      	lsls	r1, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ea:	3301      	adds	r3, #1
 80028ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf0c      	ite	eq
 80028f4:	2301      	moveq	r3, #1
 80028f6:	2300      	movne	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Init+0x17e>
 80028fe:	2301      	movs	r3, #1
 8002900:	e022      	b.n	8002948 <HAL_I2C_Init+0x1c4>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10e      	bne.n	8002928 <HAL_I2C_Init+0x1a4>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1e58      	subs	r0, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6859      	ldr	r1, [r3, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	440b      	add	r3, r1
 8002918:	fbb0 f3f3 	udiv	r3, r0, r3
 800291c:	3301      	adds	r3, #1
 800291e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002926:	e00f      	b.n	8002948 <HAL_I2C_Init+0x1c4>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1e58      	subs	r0, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	0099      	lsls	r1, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	fbb0 f3f3 	udiv	r3, r0, r3
 800293e:	3301      	adds	r3, #1
 8002940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	6809      	ldr	r1, [r1, #0]
 800294c:	4313      	orrs	r3, r2
 800294e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69da      	ldr	r2, [r3, #28]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002976:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6911      	ldr	r1, [r2, #16]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68d2      	ldr	r2, [r2, #12]
 8002982:	4311      	orrs	r1, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	430b      	orrs	r3, r1
 800298a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	000186a0 	.word	0x000186a0
 80029e4:	001e847f 	.word	0x001e847f
 80029e8:	003d08ff 	.word	0x003d08ff
 80029ec:	431bde83 	.word	0x431bde83
 80029f0:	10624dd3 	.word	0x10624dd3

080029f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	461a      	mov	r2, r3
 8002a00:	460b      	mov	r3, r1
 8002a02:	817b      	strh	r3, [r7, #10]
 8002a04:	4613      	mov	r3, r2
 8002a06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a08:	f7fe ffce 	bl	80019a8 <HAL_GetTick>
 8002a0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	f040 80e0 	bne.w	8002bdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2319      	movs	r3, #25
 8002a22:	2201      	movs	r2, #1
 8002a24:	4970      	ldr	r1, [pc, #448]	; (8002be8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fa92 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
 8002a34:	e0d3      	b.n	8002bde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_I2C_Master_Transmit+0x50>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e0cc      	b.n	8002bde <HAL_I2C_Master_Transmit+0x1ea>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d007      	beq.n	8002a6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2221      	movs	r2, #33	; 0x21
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2210      	movs	r2, #16
 8002a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	893a      	ldrh	r2, [r7, #8]
 8002a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4a50      	ldr	r2, [pc, #320]	; (8002bec <HAL_I2C_Master_Transmit+0x1f8>)
 8002aaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002aac:	8979      	ldrh	r1, [r7, #10]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	6a3a      	ldr	r2, [r7, #32]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f9ca 	bl	8002e4c <I2C_MasterRequestWrite>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e08d      	b.n	8002bde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ad8:	e066      	b.n	8002ba8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	6a39      	ldr	r1, [r7, #32]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fb0c 	bl	80030fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d107      	bne.n	8002b02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e06b      	b.n	8002bde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	781a      	ldrb	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d11b      	bne.n	8002b7c <HAL_I2C_Master_Transmit+0x188>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d017      	beq.n	8002b7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	781a      	ldrb	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	6a39      	ldr	r1, [r7, #32]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fafc 	bl	800317e <I2C_WaitOnBTFFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00d      	beq.n	8002ba8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d107      	bne.n	8002ba4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e01a      	b.n	8002bde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d194      	bne.n	8002ada <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	00100002 	.word	0x00100002
 8002bec:	ffff0000 	.word	0xffff0000

08002bf0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002c00:	f7fe fed2 	bl	80019a8 <HAL_GetTick>
 8002c04:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002c06:	2301      	movs	r3, #1
 8002c08:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	f040 8111 	bne.w	8002e3a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2319      	movs	r3, #25
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4988      	ldr	r1, [pc, #544]	; (8002e44 <HAL_I2C_IsDeviceReady+0x254>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f994 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e104      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_I2C_IsDeviceReady+0x50>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e0fd      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d007      	beq.n	8002c66 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2224      	movs	r2, #36	; 0x24
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a70      	ldr	r2, [pc, #448]	; (8002e48 <HAL_I2C_IsDeviceReady+0x258>)
 8002c88:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c98:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f952 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc0:	d103      	bne.n	8002cca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e0b6      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cce:	897b      	ldrh	r3, [r7, #10]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cdc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002cde:	f7fe fe63 	bl	80019a8 <HAL_GetTick>
 8002ce2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d08:	bf0c      	ite	eq
 8002d0a:	2301      	moveq	r3, #1
 8002d0c:	2300      	movne	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d12:	e025      	b.n	8002d60 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d14:	f7fe fe48 	bl	80019a8 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d302      	bcc.n	8002d2a <HAL_I2C_IsDeviceReady+0x13a>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	22a0      	movs	r2, #160	; 0xa0
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2ba0      	cmp	r3, #160	; 0xa0
 8002d6a:	d005      	beq.n	8002d78 <HAL_I2C_IsDeviceReady+0x188>
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_I2C_IsDeviceReady+0x188>
 8002d72:	7dbb      	ldrb	r3, [r7, #22]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0cd      	beq.n	8002d14 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d129      	bne.n	8002de2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	2319      	movs	r3, #25
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4921      	ldr	r1, [pc, #132]	; (8002e44 <HAL_I2C_IsDeviceReady+0x254>)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f8c6 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e036      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e02c      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dfa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	2319      	movs	r3, #25
 8002e02:	2201      	movs	r2, #1
 8002e04:	490f      	ldr	r1, [pc, #60]	; (8002e44 <HAL_I2C_IsDeviceReady+0x254>)
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f8a2 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e012      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	f4ff af32 	bcc.w	8002c8a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	00100002 	.word	0x00100002
 8002e48:	ffff0000 	.word	0xffff0000

08002e4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d006      	beq.n	8002e76 <I2C_MasterRequestWrite+0x2a>
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d003      	beq.n	8002e76 <I2C_MasterRequestWrite+0x2a>
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e74:	d108      	bne.n	8002e88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	e00b      	b.n	8002ea0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	2b12      	cmp	r3, #18
 8002e8e:	d107      	bne.n	8002ea0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f84f 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00d      	beq.n	8002ed4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec6:	d103      	bne.n	8002ed0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e035      	b.n	8002f40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002edc:	d108      	bne.n	8002ef0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ede:	897b      	ldrh	r3, [r7, #10]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002eec:	611a      	str	r2, [r3, #16]
 8002eee:	e01b      	b.n	8002f28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ef0:	897b      	ldrh	r3, [r7, #10]
 8002ef2:	11db      	asrs	r3, r3, #7
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f003 0306 	and.w	r3, r3, #6
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f063 030f 	orn	r3, r3, #15
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	490e      	ldr	r1, [pc, #56]	; (8002f48 <I2C_MasterRequestWrite+0xfc>)
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f875 	bl	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e010      	b.n	8002f40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f1e:	897b      	ldrh	r3, [r7, #10]
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4907      	ldr	r1, [pc, #28]	; (8002f4c <I2C_MasterRequestWrite+0x100>)
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f865 	bl	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	00010008 	.word	0x00010008
 8002f4c:	00010002 	.word	0x00010002

08002f50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f60:	e025      	b.n	8002fae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d021      	beq.n	8002fae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6a:	f7fe fd1d 	bl	80019a8 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d302      	bcc.n	8002f80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d116      	bne.n	8002fae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f043 0220 	orr.w	r2, r3, #32
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e023      	b.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d10d      	bne.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	e00c      	b.n	8002fee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2301      	moveq	r3, #1
 8002fe8:	2300      	movne	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d0b6      	beq.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800300c:	e051      	b.n	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301c:	d123      	bne.n	8003066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003036:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f043 0204 	orr.w	r2, r3, #4
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e046      	b.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d021      	beq.n	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fe fc9b 	bl	80019a8 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d116      	bne.n	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f043 0220 	orr.w	r2, r3, #32
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e020      	b.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d10c      	bne.n	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4013      	ands	r3, r2
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e00b      	b.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	43da      	mvns	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	4013      	ands	r3, r2
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d18d      	bne.n	800300e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003108:	e02d      	b.n	8003166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f878 	bl	8003200 <I2C_IsAcknowledgeFailed>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e02d      	b.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d021      	beq.n	8003166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003122:	f7fe fc41 	bl	80019a8 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	d302      	bcc.n	8003138 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d116      	bne.n	8003166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f043 0220 	orr.w	r2, r3, #32
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e007      	b.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d1ca      	bne.n	800310a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800318a:	e02d      	b.n	80031e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f837 	bl	8003200 <I2C_IsAcknowledgeFailed>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e02d      	b.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a2:	d021      	beq.n	80031e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a4:	f7fe fc00 	bl	80019a8 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d302      	bcc.n	80031ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d116      	bne.n	80031e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e007      	b.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d1ca      	bne.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003216:	d11b      	bne.n	8003250 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003220:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f043 0204 	orr.w	r2, r3, #4
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e26c      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8087 	beq.w	800338a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800327c:	4b92      	ldr	r3, [pc, #584]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b04      	cmp	r3, #4
 8003286:	d00c      	beq.n	80032a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003288:	4b8f      	ldr	r3, [pc, #572]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b08      	cmp	r3, #8
 8003292:	d112      	bne.n	80032ba <HAL_RCC_OscConfig+0x5e>
 8003294:	4b8c      	ldr	r3, [pc, #560]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d10b      	bne.n	80032ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a2:	4b89      	ldr	r3, [pc, #548]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d06c      	beq.n	8003388 <HAL_RCC_OscConfig+0x12c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d168      	bne.n	8003388 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e246      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x76>
 80032c4:	4b80      	ldr	r3, [pc, #512]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a7f      	ldr	r2, [pc, #508]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	e02e      	b.n	8003330 <HAL_RCC_OscConfig+0xd4>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x98>
 80032da:	4b7b      	ldr	r3, [pc, #492]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7a      	ldr	r2, [pc, #488]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b78      	ldr	r3, [pc, #480]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a77      	ldr	r2, [pc, #476]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e01d      	b.n	8003330 <HAL_RCC_OscConfig+0xd4>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0xbc>
 80032fe:	4b72      	ldr	r3, [pc, #456]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a71      	ldr	r2, [pc, #452]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b6f      	ldr	r3, [pc, #444]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6e      	ldr	r2, [pc, #440]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0xd4>
 8003318:	4b6b      	ldr	r3, [pc, #428]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6a      	ldr	r2, [pc, #424]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800331e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b68      	ldr	r3, [pc, #416]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a67      	ldr	r2, [pc, #412]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800332a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fb36 	bl	80019a8 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fb32 	bl	80019a8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1fa      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b5d      	ldr	r3, [pc, #372]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0xe4>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fe fb22 	bl	80019a8 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7fe fb1e 	bl	80019a8 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e1e6      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x10c>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d063      	beq.n	800345e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003396:	4b4c      	ldr	r3, [pc, #304]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033a2:	4b49      	ldr	r3, [pc, #292]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d11c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x18c>
 80033ae:	4b46      	ldr	r3, [pc, #280]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d116      	bne.n	80033e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ba:	4b43      	ldr	r3, [pc, #268]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_RCC_OscConfig+0x176>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d001      	beq.n	80033d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e1ba      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d2:	4b3d      	ldr	r3, [pc, #244]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4939      	ldr	r1, [pc, #228]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e6:	e03a      	b.n	800345e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f0:	4b36      	ldr	r3, [pc, #216]	; (80034cc <HAL_RCC_OscConfig+0x270>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fe fad7 	bl	80019a8 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033fe:	f7fe fad3 	bl	80019a8 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e19b      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341c:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4927      	ldr	r1, [pc, #156]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800342c:	4313      	orrs	r3, r2
 800342e:	600b      	str	r3, [r1, #0]
 8003430:	e015      	b.n	800345e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_RCC_OscConfig+0x270>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fe fab6 	bl	80019a8 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003440:	f7fe fab2 	bl	80019a8 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e17a      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d03a      	beq.n	80034e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d019      	beq.n	80034a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_RCC_OscConfig+0x274>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003478:	f7fe fa96 	bl	80019a8 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003480:	f7fe fa92 	bl	80019a8 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e15a      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800349e:	2001      	movs	r0, #1
 80034a0:	f000 fb0a 	bl	8003ab8 <RCC_Delay>
 80034a4:	e01c      	b.n	80034e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <HAL_RCC_OscConfig+0x274>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ac:	f7fe fa7c 	bl	80019a8 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b2:	e00f      	b.n	80034d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b4:	f7fe fa78 	bl	80019a8 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d908      	bls.n	80034d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e140      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	42420000 	.word	0x42420000
 80034d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d4:	4b9e      	ldr	r3, [pc, #632]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e9      	bne.n	80034b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80a6 	beq.w	800363a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ee:	2300      	movs	r3, #0
 80034f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f2:	4b97      	ldr	r3, [pc, #604]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10d      	bne.n	800351a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fe:	4b94      	ldr	r3, [pc, #592]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4a93      	ldr	r2, [pc, #588]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 8003504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003508:	61d3      	str	r3, [r2, #28]
 800350a:	4b91      	ldr	r3, [pc, #580]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003516:	2301      	movs	r3, #1
 8003518:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351a:	4b8e      	ldr	r3, [pc, #568]	; (8003754 <HAL_RCC_OscConfig+0x4f8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d118      	bne.n	8003558 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003526:	4b8b      	ldr	r3, [pc, #556]	; (8003754 <HAL_RCC_OscConfig+0x4f8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a8a      	ldr	r2, [pc, #552]	; (8003754 <HAL_RCC_OscConfig+0x4f8>)
 800352c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003532:	f7fe fa39 	bl	80019a8 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353a:	f7fe fa35 	bl	80019a8 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b64      	cmp	r3, #100	; 0x64
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0fd      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	4b81      	ldr	r3, [pc, #516]	; (8003754 <HAL_RCC_OscConfig+0x4f8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d106      	bne.n	800356e <HAL_RCC_OscConfig+0x312>
 8003560:	4b7b      	ldr	r3, [pc, #492]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	4a7a      	ldr	r2, [pc, #488]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6213      	str	r3, [r2, #32]
 800356c:	e02d      	b.n	80035ca <HAL_RCC_OscConfig+0x36e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0x334>
 8003576:	4b76      	ldr	r3, [pc, #472]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a75      	ldr	r2, [pc, #468]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6213      	str	r3, [r2, #32]
 8003582:	4b73      	ldr	r3, [pc, #460]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4a72      	ldr	r2, [pc, #456]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	6213      	str	r3, [r2, #32]
 800358e:	e01c      	b.n	80035ca <HAL_RCC_OscConfig+0x36e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b05      	cmp	r3, #5
 8003596:	d10c      	bne.n	80035b2 <HAL_RCC_OscConfig+0x356>
 8003598:	4b6d      	ldr	r3, [pc, #436]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	4a6c      	ldr	r2, [pc, #432]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	6213      	str	r3, [r2, #32]
 80035a4:	4b6a      	ldr	r3, [pc, #424]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4a69      	ldr	r2, [pc, #420]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6213      	str	r3, [r2, #32]
 80035b0:	e00b      	b.n	80035ca <HAL_RCC_OscConfig+0x36e>
 80035b2:	4b67      	ldr	r3, [pc, #412]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	4a66      	ldr	r2, [pc, #408]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	6213      	str	r3, [r2, #32]
 80035be:	4b64      	ldr	r3, [pc, #400]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	4a63      	ldr	r2, [pc, #396]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 80035c4:	f023 0304 	bic.w	r3, r3, #4
 80035c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d015      	beq.n	80035fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d2:	f7fe f9e9 	bl	80019a8 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d8:	e00a      	b.n	80035f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035da:	f7fe f9e5 	bl	80019a8 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e0ab      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f0:	4b57      	ldr	r3, [pc, #348]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0ee      	beq.n	80035da <HAL_RCC_OscConfig+0x37e>
 80035fc:	e014      	b.n	8003628 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fe:	f7fe f9d3 	bl	80019a8 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003604:	e00a      	b.n	800361c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003606:	f7fe f9cf 	bl	80019a8 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f241 3288 	movw	r2, #5000	; 0x1388
 8003614:	4293      	cmp	r3, r2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e095      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361c:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1ee      	bne.n	8003606 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362e:	4b48      	ldr	r3, [pc, #288]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	4a47      	ldr	r2, [pc, #284]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 8003634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003638:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8081 	beq.w	8003746 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003644:	4b42      	ldr	r3, [pc, #264]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b08      	cmp	r3, #8
 800364e:	d061      	beq.n	8003714 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d146      	bne.n	80036e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003658:	4b3f      	ldr	r3, [pc, #252]	; (8003758 <HAL_RCC_OscConfig+0x4fc>)
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365e:	f7fe f9a3 	bl	80019a8 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003666:	f7fe f99f 	bl	80019a8 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e067      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003678:	4b35      	ldr	r3, [pc, #212]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f0      	bne.n	8003666 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368c:	d108      	bne.n	80036a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800368e:	4b30      	ldr	r3, [pc, #192]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	492d      	ldr	r1, [pc, #180]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a0:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a19      	ldr	r1, [r3, #32]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	430b      	orrs	r3, r1
 80036b2:	4927      	ldr	r1, [pc, #156]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b8:	4b27      	ldr	r3, [pc, #156]	; (8003758 <HAL_RCC_OscConfig+0x4fc>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fe f973 	bl	80019a8 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fe f96f 	bl	80019a8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e037      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x46a>
 80036e4:	e02f      	b.n	8003746 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e6:	4b1c      	ldr	r3, [pc, #112]	; (8003758 <HAL_RCC_OscConfig+0x4fc>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fe f95c 	bl	80019a8 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fe f958 	bl	80019a8 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e020      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x498>
 8003712:	e018      	b.n	8003746 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e013      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_OscConfig+0x4f4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	429a      	cmp	r2, r3
 8003732:	d106      	bne.n	8003742 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d001      	beq.n	8003746 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	40007000 	.word	0x40007000
 8003758:	42420060 	.word	0x42420060

0800375c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0d0      	b.n	8003912 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003770:	4b6a      	ldr	r3, [pc, #424]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d910      	bls.n	80037a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b67      	ldr	r3, [pc, #412]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 0207 	bic.w	r2, r3, #7
 8003786:	4965      	ldr	r1, [pc, #404]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b63      	ldr	r3, [pc, #396]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0b8      	b.n	8003912 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d020      	beq.n	80037ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037b8:	4b59      	ldr	r3, [pc, #356]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a58      	ldr	r2, [pc, #352]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d0:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a52      	ldr	r2, [pc, #328]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037dc:	4b50      	ldr	r3, [pc, #320]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	494d      	ldr	r1, [pc, #308]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d040      	beq.n	800387c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d107      	bne.n	8003812 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003802:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d115      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e07f      	b.n	8003912 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381a:	4b41      	ldr	r3, [pc, #260]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e073      	b.n	8003912 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382a:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e06b      	b.n	8003912 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800383a:	4b39      	ldr	r3, [pc, #228]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f023 0203 	bic.w	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4936      	ldr	r1, [pc, #216]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800384c:	f7fe f8ac 	bl	80019a8 <HAL_GetTick>
 8003850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	e00a      	b.n	800386a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003854:	f7fe f8a8 	bl	80019a8 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e053      	b.n	8003912 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 020c 	and.w	r2, r3, #12
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	429a      	cmp	r2, r3
 800387a:	d1eb      	bne.n	8003854 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800387c:	4b27      	ldr	r3, [pc, #156]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d210      	bcs.n	80038ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b24      	ldr	r3, [pc, #144]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 0207 	bic.w	r2, r3, #7
 8003892:	4922      	ldr	r1, [pc, #136]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e032      	b.n	8003912 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b8:	4b19      	ldr	r3, [pc, #100]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4916      	ldr	r1, [pc, #88]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038d6:	4b12      	ldr	r3, [pc, #72]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	490e      	ldr	r1, [pc, #56]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ea:	f000 f821 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 80038ee:	4601      	mov	r1, r0
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 80038fc:	5cd3      	ldrb	r3, [r2, r3]
 80038fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003902:	4a09      	ldr	r2, [pc, #36]	; (8003928 <HAL_RCC_ClockConfig+0x1cc>)
 8003904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x1d0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd ff4a 	bl	80017a4 <HAL_InitTick>

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40022000 	.word	0x40022000
 8003920:	40021000 	.word	0x40021000
 8003924:	0800a068 	.word	0x0800a068
 8003928:	20000008 	.word	0x20000008
 800392c:	2000000c 	.word	0x2000000c

08003930 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003930:	b490      	push	{r4, r7}
 8003932:	b08a      	sub	sp, #40	; 0x28
 8003934:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003936:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003938:	1d3c      	adds	r4, r7, #4
 800393a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800393c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003940:	4b28      	ldr	r3, [pc, #160]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	2300      	movs	r3, #0
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	2300      	movs	r3, #0
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800395a:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b04      	cmp	r3, #4
 8003968:	d002      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x40>
 800396a:	2b08      	cmp	r3, #8
 800396c:	d003      	beq.n	8003976 <HAL_RCC_GetSysClockFreq+0x46>
 800396e:	e02d      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003970:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003972:	623b      	str	r3, [r7, #32]
      break;
 8003974:	e02d      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	0c9b      	lsrs	r3, r3, #18
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003982:	4413      	add	r3, r2
 8003984:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003988:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d013      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	0c5b      	lsrs	r3, r3, #17
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039a2:	4413      	add	r3, r2
 80039a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	4a0f      	ldr	r2, [pc, #60]	; (80039ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80039ae:	fb02 f203 	mul.w	r2, r2, r3
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ba:	e004      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039c0:	fb02 f303 	mul.w	r3, r2, r3
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	623b      	str	r3, [r7, #32]
      break;
 80039ca:	e002      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039cc:	4b07      	ldr	r3, [pc, #28]	; (80039ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80039ce:	623b      	str	r3, [r7, #32]
      break;
 80039d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039d2:	6a3b      	ldr	r3, [r7, #32]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3728      	adds	r7, #40	; 0x28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc90      	pop	{r4, r7}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	08009218 	.word	0x08009218
 80039e4:	08009228 	.word	0x08009228
 80039e8:	40021000 	.word	0x40021000
 80039ec:	007a1200 	.word	0x007a1200
 80039f0:	003d0900 	.word	0x003d0900

080039f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f8:	4b02      	ldr	r3, [pc, #8]	; (8003a04 <HAL_RCC_GetHCLKFreq+0x10>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	20000008 	.word	0x20000008

08003a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a0c:	f7ff fff2 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a10:	4601      	mov	r1, r0
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	4a03      	ldr	r2, [pc, #12]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1e:	5cd3      	ldrb	r3, [r2, r3]
 8003a20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	0800a078 	.word	0x0800a078

08003a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a34:	f7ff ffde 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a38:	4601      	mov	r1, r0
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	0adb      	lsrs	r3, r3, #11
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	4a03      	ldr	r2, [pc, #12]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a46:	5cd3      	ldrb	r3, [r2, r3]
 8003a48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40021000 	.word	0x40021000
 8003a54:	0800a078 	.word	0x0800a078

08003a58 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	220f      	movs	r2, #15
 8003a66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <HAL_RCC_GetClockConfig+0x58>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0203 	and.w	r2, r3, #3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_RCC_GetClockConfig+0x58>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCC_GetClockConfig+0x58>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a8c:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_RCC_GetClockConfig+0x58>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	08db      	lsrs	r3, r3, #3
 8003a92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0207 	and.w	r2, r3, #7
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40022000 	.word	0x40022000

08003ab8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <RCC_Delay+0x34>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <RCC_Delay+0x38>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	0a5b      	lsrs	r3, r3, #9
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ad4:	bf00      	nop
  }
  while (Delay --);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1e5a      	subs	r2, r3, #1
 8003ada:	60fa      	str	r2, [r7, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f9      	bne.n	8003ad4 <RCC_Delay+0x1c>
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20000008 	.word	0x20000008
 8003af0:	10624dd3 	.word	0x10624dd3

08003af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d07d      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b14:	4b4f      	ldr	r3, [pc, #316]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10d      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b20:	4b4c      	ldr	r3, [pc, #304]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	4a4b      	ldr	r2, [pc, #300]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	61d3      	str	r3, [r2, #28]
 8003b2c:	4b49      	ldr	r3, [pc, #292]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	4b46      	ldr	r3, [pc, #280]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d118      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b48:	4b43      	ldr	r3, [pc, #268]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a42      	ldr	r2, [pc, #264]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b54:	f7fd ff28 	bl	80019a8 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	e008      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5c:	f7fd ff24 	bl	80019a8 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e06d      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6e:	4b3a      	ldr	r3, [pc, #232]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b7a:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d02e      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d027      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b98:	4b2e      	ldr	r3, [pc, #184]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ba2:	4b2e      	ldr	r3, [pc, #184]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba8:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bae:	4a29      	ldr	r2, [pc, #164]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d014      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7fd fef3 	bl	80019a8 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fd feef 	bl	80019a8 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e036      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0ee      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be8:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4917      	ldr	r1, [pc, #92]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c00:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	4a13      	ldr	r2, [pc, #76]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c18:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	490b      	ldr	r1, [pc, #44]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	4904      	ldr	r1, [pc, #16]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40007000 	.word	0x40007000
 8003c5c:	42420440 	.word	0x42420440

08003c60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b08d      	sub	sp, #52	; 0x34
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c68:	4b55      	ldr	r3, [pc, #340]	; (8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003c6a:	f107 040c 	add.w	r4, r7, #12
 8003c6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c74:	4b53      	ldr	r3, [pc, #332]	; (8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7e:	2300      	movs	r3, #0
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c82:	2300      	movs	r3, #0
 8003c84:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d07f      	beq.n	8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d002      	beq.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d048      	beq.n	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c9c:	e08b      	b.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003c9e:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ca4:	4b48      	ldr	r3, [pc, #288]	; (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d07f      	beq.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	0c9b      	lsrs	r3, r3, #18
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003cc2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d018      	beq.n	8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cce:	4b3e      	ldr	r3, [pc, #248]	; (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	0c5b      	lsrs	r3, r3, #17
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003cdc:	4413      	add	r3, r2
 8003cde:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003cee:	4a37      	ldr	r2, [pc, #220]	; (8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	fb02 f303 	mul.w	r3, r2, r3
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cfe:	e004      	b.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	4a33      	ldr	r2, [pc, #204]	; (8003dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d04:	fb02 f303 	mul.w	r3, r2, r3
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d0a:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d16:	d102      	bne.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d1c:	e048      	b.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4a2c      	ldr	r2, [pc, #176]	; (8003dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d2c:	e040      	b.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003d2e:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3e:	d108      	bne.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d50:	e01f      	b.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d5c:	d109      	bne.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003d5e:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003d6a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d70:	e00f      	b.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d7c:	d11a      	bne.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d014      	beq.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003d8a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d90:	e010      	b.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003d92:	e00f      	b.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d94:	f7ff fe4c 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	0b9b      	lsrs	r3, r3, #14
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	3301      	adds	r3, #1
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003dae:	e002      	b.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003db0:	bf00      	nop
 8003db2:	e000      	b.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003db4:	bf00      	nop
    }
  }
  return (frequency);
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3734      	adds	r7, #52	; 0x34
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd90      	pop	{r4, r7, pc}
 8003dc0:	0800922c 	.word	0x0800922c
 8003dc4:	0800923c 	.word	0x0800923c
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	007a1200 	.word	0x007a1200
 8003dd0:	003d0900 	.word	0x003d0900
 8003dd4:	aaaaaaab 	.word	0xaaaaaaab

08003dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e041      	b.n	8003e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f839 	bl	8003e76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f000 f9b4 	bl	8004184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d001      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e03a      	b.n	8003f16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a18      	ldr	r2, [pc, #96]	; (8003f20 <HAL_TIM_Base_Start_IT+0x98>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00e      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x58>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eca:	d009      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x58>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x58>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <HAL_TIM_Base_Start_IT+0xa0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d111      	bne.n	8003f04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d010      	beq.n	8003f14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0201 	orr.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f02:	e007      	b.n	8003f14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800

08003f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d122      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d11b      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f06f 0202 	mvn.w	r2, #2
 8003f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8ed 	bl	800414e <HAL_TIM_IC_CaptureCallback>
 8003f74:	e005      	b.n	8003f82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f8e0 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f8ef 	bl	8004160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d122      	bne.n	8003fdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d11b      	bne.n	8003fdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f06f 0204 	mvn.w	r2, #4
 8003fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8c3 	bl	800414e <HAL_TIM_IC_CaptureCallback>
 8003fc8:	e005      	b.n	8003fd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f8b6 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f8c5 	bl	8004160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d122      	bne.n	8004030 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d11b      	bne.n	8004030 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0208 	mvn.w	r2, #8
 8004000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2204      	movs	r2, #4
 8004006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f899 	bl	800414e <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f88c 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f89b 	bl	8004160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b10      	cmp	r3, #16
 800403c:	d122      	bne.n	8004084 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b10      	cmp	r3, #16
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0210 	mvn.w	r2, #16
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2208      	movs	r2, #8
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f86f 	bl	800414e <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f862 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f871 	bl	8004160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b01      	cmp	r3, #1
 8004090:	d10e      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d107      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0201 	mvn.w	r2, #1
 80040a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fc ffc0 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	2b80      	cmp	r3, #128	; 0x80
 80040bc:	d10e      	bne.n	80040dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	2b80      	cmp	r3, #128	; 0x80
 80040ca:	d107      	bne.n	80040dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f8bf 	bl	800425a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e6:	2b40      	cmp	r3, #64	; 0x40
 80040e8:	d10e      	bne.n	8004108 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	d107      	bne.n	8004108 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f835 	bl	8004172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b20      	cmp	r3, #32
 8004114:	d10e      	bne.n	8004134 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b20      	cmp	r3, #32
 8004122:	d107      	bne.n	8004134 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0220 	mvn.w	r2, #32
 800412c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f88a 	bl	8004248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr

0800414e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a29      	ldr	r2, [pc, #164]	; (800423c <TIM_Base_SetConfig+0xb8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00b      	beq.n	80041b4 <TIM_Base_SetConfig+0x30>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a2:	d007      	beq.n	80041b4 <TIM_Base_SetConfig+0x30>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a26      	ldr	r2, [pc, #152]	; (8004240 <TIM_Base_SetConfig+0xbc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_Base_SetConfig+0x30>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a25      	ldr	r2, [pc, #148]	; (8004244 <TIM_Base_SetConfig+0xc0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d108      	bne.n	80041c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1c      	ldr	r2, [pc, #112]	; (800423c <TIM_Base_SetConfig+0xb8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <TIM_Base_SetConfig+0x62>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d4:	d007      	beq.n	80041e6 <TIM_Base_SetConfig+0x62>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a19      	ldr	r2, [pc, #100]	; (8004240 <TIM_Base_SetConfig+0xbc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_Base_SetConfig+0x62>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a18      	ldr	r2, [pc, #96]	; (8004244 <TIM_Base_SetConfig+0xc0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d108      	bne.n	80041f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a07      	ldr	r2, [pc, #28]	; (800423c <TIM_Base_SetConfig+0xb8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d103      	bne.n	800422c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	615a      	str	r2, [r3, #20]
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800

08004248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e03f      	b.n	80042fe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fd fa3a 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2224      	movs	r2, #36	; 0x24
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f9a7 	bl	8004604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b08a      	sub	sp, #40	; 0x28
 800430a:	af02      	add	r7, sp, #8
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	603b      	str	r3, [r7, #0]
 8004312:	4613      	mov	r3, r2
 8004314:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b20      	cmp	r3, #32
 8004324:	d17c      	bne.n	8004420 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <HAL_UART_Transmit+0x2c>
 800432c:	88fb      	ldrh	r3, [r7, #6]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e075      	b.n	8004422 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_UART_Transmit+0x3e>
 8004340:	2302      	movs	r3, #2
 8004342:	e06e      	b.n	8004422 <HAL_UART_Transmit+0x11c>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2221      	movs	r2, #33	; 0x21
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800435a:	f7fd fb25 	bl	80019a8 <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	88fa      	ldrh	r2, [r7, #6]
 8004364:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	88fa      	ldrh	r2, [r7, #6]
 800436a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004374:	d108      	bne.n	8004388 <HAL_UART_Transmit+0x82>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d104      	bne.n	8004388 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	e003      	b.n	8004390 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800438c:	2300      	movs	r3, #0
 800438e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004398:	e02a      	b.n	80043f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2200      	movs	r2, #0
 80043a2:	2180      	movs	r1, #128	; 0x80
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f8e2 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e036      	b.n	8004422 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	3302      	adds	r3, #2
 80043ce:	61bb      	str	r3, [r7, #24]
 80043d0:	e007      	b.n	80043e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	3301      	adds	r3, #1
 80043e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1cf      	bne.n	800439a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2200      	movs	r2, #0
 8004402:	2140      	movs	r1, #64	; 0x40
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f8b2 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e006      	b.n	8004422 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	e000      	b.n	8004422 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004420:	2302      	movs	r3, #2
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3720      	adds	r7, #32
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b08a      	sub	sp, #40	; 0x28
 800442e:	af02      	add	r7, sp, #8
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b20      	cmp	r3, #32
 8004448:	f040 808c 	bne.w	8004564 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <HAL_UART_Receive+0x2e>
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e084      	b.n	8004566 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_UART_Receive+0x40>
 8004466:	2302      	movs	r3, #2
 8004468:	e07d      	b.n	8004566 <HAL_UART_Receive+0x13c>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2222      	movs	r2, #34	; 0x22
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004486:	f7fd fa8f 	bl	80019a8 <HAL_GetTick>
 800448a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	88fa      	ldrh	r2, [r7, #6]
 8004490:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	88fa      	ldrh	r2, [r7, #6]
 8004496:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a0:	d108      	bne.n	80044b4 <HAL_UART_Receive+0x8a>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d104      	bne.n	80044b4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	e003      	b.n	80044bc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80044c4:	e043      	b.n	800454e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	2120      	movs	r1, #32
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f84c 	bl	800456e <UART_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e042      	b.n	8004566 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10c      	bne.n	8004500 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	3302      	adds	r3, #2
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	e01f      	b.n	8004540 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004508:	d007      	beq.n	800451a <HAL_UART_Receive+0xf0>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <HAL_UART_Receive+0xfe>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	b2da      	uxtb	r2, r3
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	e008      	b.n	800453a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004534:	b2da      	uxtb	r2, r3
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	3301      	adds	r3, #1
 800453e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1b6      	bne.n	80044c6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e000      	b.n	8004566 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	603b      	str	r3, [r7, #0]
 800457a:	4613      	mov	r3, r2
 800457c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800457e:	e02c      	b.n	80045da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d028      	beq.n	80045da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <UART_WaitOnFlagUntilTimeout+0x30>
 800458e:	f7fd fa0b 	bl	80019a8 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	429a      	cmp	r2, r3
 800459c:	d21d      	bcs.n	80045da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e00f      	b.n	80045fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4013      	ands	r3, r2
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	bf0c      	ite	eq
 80045ea:	2301      	moveq	r3, #1
 80045ec:	2300      	movne	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d0c3      	beq.n	8004580 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800463e:	f023 030c 	bic.w	r3, r3, #12
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	430b      	orrs	r3, r1
 800464a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2c      	ldr	r2, [pc, #176]	; (8004718 <UART_SetConfig+0x114>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d103      	bne.n	8004674 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800466c:	f7ff f9e0 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	e002      	b.n	800467a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004674:	f7ff f9c8 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8004678:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	009a      	lsls	r2, r3, #2
 8004684:	441a      	add	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004690:	4a22      	ldr	r2, [pc, #136]	; (800471c <UART_SetConfig+0x118>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	0119      	lsls	r1, r3, #4
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009a      	lsls	r2, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <UART_SetConfig+0x118>)
 80046b2:	fba3 0302 	umull	r0, r3, r3, r2
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	2064      	movs	r0, #100	; 0x64
 80046ba:	fb00 f303 	mul.w	r3, r0, r3
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	3332      	adds	r3, #50	; 0x32
 80046c4:	4a15      	ldr	r2, [pc, #84]	; (800471c <UART_SetConfig+0x118>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d0:	4419      	add	r1, r3
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	009a      	lsls	r2, r3, #2
 80046dc:	441a      	add	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <UART_SetConfig+0x118>)
 80046ea:	fba3 0302 	umull	r0, r3, r3, r2
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	2064      	movs	r0, #100	; 0x64
 80046f2:	fb00 f303 	mul.w	r3, r0, r3
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	3332      	adds	r3, #50	; 0x32
 80046fc:	4a07      	ldr	r2, [pc, #28]	; (800471c <UART_SetConfig+0x118>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	f003 020f 	and.w	r2, r3, #15
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	440a      	add	r2, r1
 800470e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40013800 	.word	0x40013800
 800471c:	51eb851f 	.word	0x51eb851f

08004720 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004726:	f3ef 8305 	mrs	r3, IPSR
 800472a:	60bb      	str	r3, [r7, #8]
  return(result);
 800472c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10f      	bne.n	8004752 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004732:	f3ef 8310 	mrs	r3, PRIMASK
 8004736:	607b      	str	r3, [r7, #4]
  return(result);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <osKernelInitialize+0x32>
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <osKernelInitialize+0x60>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d109      	bne.n	800475a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004746:	f3ef 8311 	mrs	r3, BASEPRI
 800474a:	603b      	str	r3, [r7, #0]
  return(result);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004752:	f06f 0305 	mvn.w	r3, #5
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e00c      	b.n	8004774 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800475a:	4b09      	ldr	r3, [pc, #36]	; (8004780 <osKernelInitialize+0x60>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d105      	bne.n	800476e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004762:	4b07      	ldr	r3, [pc, #28]	; (8004780 <osKernelInitialize+0x60>)
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e002      	b.n	8004774 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800476e:	f04f 33ff 	mov.w	r3, #4294967295
 8004772:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004774:	68fb      	ldr	r3, [r7, #12]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr
 8004780:	20000618 	.word	0x20000618

08004784 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800478a:	f3ef 8305 	mrs	r3, IPSR
 800478e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004790:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10f      	bne.n	80047b6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004796:	f3ef 8310 	mrs	r3, PRIMASK
 800479a:	607b      	str	r3, [r7, #4]
  return(result);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <osKernelStart+0x32>
 80047a2:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <osKernelStart+0x64>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d109      	bne.n	80047be <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047aa:	f3ef 8311 	mrs	r3, BASEPRI
 80047ae:	603b      	str	r3, [r7, #0]
  return(result);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <osKernelStart+0x3a>
    stat = osErrorISR;
 80047b6:	f06f 0305 	mvn.w	r3, #5
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e00e      	b.n	80047dc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <osKernelStart+0x64>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d107      	bne.n	80047d6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80047c6:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <osKernelStart+0x64>)
 80047c8:	2202      	movs	r2, #2
 80047ca:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80047cc:	f001 f864 	bl	8005898 <vTaskStartScheduler>
      stat = osOK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	e002      	b.n	80047dc <osKernelStart+0x58>
    } else {
      stat = osError;
 80047d6:	f04f 33ff 	mov.w	r3, #4294967295
 80047da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80047dc:	68fb      	ldr	r3, [r7, #12]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000618 	.word	0x20000618

080047ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b092      	sub	sp, #72	; 0x48
 80047f0:	af04      	add	r7, sp, #16
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047fc:	f3ef 8305 	mrs	r3, IPSR
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004804:	2b00      	cmp	r3, #0
 8004806:	f040 8094 	bne.w	8004932 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800480a:	f3ef 8310 	mrs	r3, PRIMASK
 800480e:	623b      	str	r3, [r7, #32]
  return(result);
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	2b00      	cmp	r3, #0
 8004814:	f040 808d 	bne.w	8004932 <osThreadNew+0x146>
 8004818:	4b48      	ldr	r3, [pc, #288]	; (800493c <osThreadNew+0x150>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d106      	bne.n	800482e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004820:	f3ef 8311 	mrs	r3, BASEPRI
 8004824:	61fb      	str	r3, [r7, #28]
  return(result);
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f040 8082 	bne.w	8004932 <osThreadNew+0x146>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d07e      	beq.n	8004932 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004834:	2380      	movs	r3, #128	; 0x80
 8004836:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004838:	2318      	movs	r3, #24
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800483c:	2300      	movs	r3, #0
 800483e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004840:	f107 031b 	add.w	r3, r7, #27
 8004844:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004846:	f04f 33ff 	mov.w	r3, #4294967295
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d045      	beq.n	80048de <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <osThreadNew+0x74>
        name = attr->name;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <osThreadNew+0x9a>
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	2b38      	cmp	r3, #56	; 0x38
 8004878:	d805      	bhi.n	8004886 <osThreadNew+0x9a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <osThreadNew+0x9e>
        return (NULL);
 8004886:	2300      	movs	r3, #0
 8004888:	e054      	b.n	8004934 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	089b      	lsrs	r3, r3, #2
 8004898:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00e      	beq.n	80048c0 <osThreadNew+0xd4>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2b5b      	cmp	r3, #91	; 0x5b
 80048a8:	d90a      	bls.n	80048c0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d006      	beq.n	80048c0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <osThreadNew+0xd4>
        mem = 1;
 80048ba:	2301      	movs	r3, #1
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048be:	e010      	b.n	80048e2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10c      	bne.n	80048e2 <osThreadNew+0xf6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d108      	bne.n	80048e2 <osThreadNew+0xf6>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d104      	bne.n	80048e2 <osThreadNew+0xf6>
          mem = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	62bb      	str	r3, [r7, #40]	; 0x28
 80048dc:	e001      	b.n	80048e2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80048de:	2300      	movs	r3, #0
 80048e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d110      	bne.n	800490a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048f0:	9202      	str	r2, [sp, #8]
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 fe02 	bl	8005508 <xTaskCreateStatic>
 8004904:	4603      	mov	r3, r0
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	e013      	b.n	8004932 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	d110      	bne.n	8004932 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	b29a      	uxth	r2, r3
 8004914:	f107 0314 	add.w	r3, r7, #20
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fe49 	bl	80055ba <xTaskCreate>
 8004928:	4603      	mov	r3, r0
 800492a:	2b01      	cmp	r3, #1
 800492c:	d001      	beq.n	8004932 <osThreadNew+0x146>
          hTask = NULL;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004932:	697b      	ldr	r3, [r7, #20]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3738      	adds	r7, #56	; 0x38
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20000618 	.word	0x20000618

08004940 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004948:	f3ef 8305 	mrs	r3, IPSR
 800494c:	613b      	str	r3, [r7, #16]
  return(result);
 800494e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10f      	bne.n	8004974 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004954:	f3ef 8310 	mrs	r3, PRIMASK
 8004958:	60fb      	str	r3, [r7, #12]
  return(result);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <osDelay+0x34>
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <osDelay+0x58>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d109      	bne.n	800497c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004968:	f3ef 8311 	mrs	r3, BASEPRI
 800496c:	60bb      	str	r3, [r7, #8]
  return(result);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <osDelay+0x3c>
    stat = osErrorISR;
 8004974:	f06f 0305 	mvn.w	r3, #5
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e007      	b.n	800498c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 ff52 	bl	8005830 <vTaskDelay>
    }
  }

  return (stat);
 800498c:	697b      	ldr	r3, [r7, #20]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000618 	.word	0x20000618

0800499c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4a06      	ldr	r2, [pc, #24]	; (80049c4 <vApplicationGetIdleTaskMemory+0x28>)
 80049ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	4a05      	ldr	r2, [pc, #20]	; (80049c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80049b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2280      	movs	r2, #128	; 0x80
 80049b8:	601a      	str	r2, [r3, #0]
}
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr
 80049c4:	2000061c 	.word	0x2000061c
 80049c8:	20000678 	.word	0x20000678

080049cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4a07      	ldr	r2, [pc, #28]	; (80049f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80049dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4a06      	ldr	r2, [pc, #24]	; (80049fc <vApplicationGetTimerTaskMemory+0x30>)
 80049e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049ea:	601a      	str	r2, [r3, #0]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000878 	.word	0x20000878
 80049fc:	200008d4 	.word	0x200008d4

08004a00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f103 0208 	add.w	r2, r3, #8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f04f 32ff 	mov.w	r2, #4294967295
 8004a18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f103 0208 	add.w	r2, r3, #8
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f103 0208 	add.w	r2, r3, #8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr

08004a56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	601a      	str	r2, [r3, #0]
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab2:	d103      	bne.n	8004abc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	e00c      	b.n	8004ad6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3308      	adds	r3, #8
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	e002      	b.n	8004aca <vListInsert+0x2e>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d2f6      	bcs.n	8004ac4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	601a      	str	r2, [r3, #0]
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6892      	ldr	r2, [r2, #8]
 8004b22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6852      	ldr	r2, [r2, #4]
 8004b2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d103      	bne.n	8004b40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	1e5a      	subs	r2, r3, #1
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr
	...

08004b60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	60bb      	str	r3, [r7, #8]
 8004b86:	e7fe      	b.n	8004b86 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004b88:	f001 ff96 	bl	8006ab8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	68f9      	ldr	r1, [r7, #12]
 8004b96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	441a      	add	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	68f9      	ldr	r1, [r7, #12]
 8004bbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	441a      	add	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	22ff      	movs	r2, #255	; 0xff
 8004bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	22ff      	movs	r2, #255	; 0xff
 8004bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d114      	bne.n	8004c08 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01a      	beq.n	8004c1c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3310      	adds	r3, #16
 8004bea:	4618      	mov	r0, r3
 8004bec:	f001 f8d8 	bl	8005da0 <xTaskRemoveFromEventList>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d012      	beq.n	8004c1c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <xQueueGenericReset+0xcc>)
 8004bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	e009      	b.n	8004c1c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3310      	adds	r3, #16
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff fef7 	bl	8004a00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3324      	adds	r3, #36	; 0x24
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff fef2 	bl	8004a00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c1c:	f001 ff7a 	bl	8006b14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c20:	2301      	movs	r3, #1
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	e000ed04 	.word	0xe000ed04

08004c30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08e      	sub	sp, #56	; 0x38
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d109      	bne.n	8004c58 <xQueueGenericCreateStatic+0x28>
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c56:	e7fe      	b.n	8004c56 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <xQueueGenericCreateStatic+0x42>
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c70:	e7fe      	b.n	8004c70 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <xQueueGenericCreateStatic+0x4e>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <xQueueGenericCreateStatic+0x52>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <xQueueGenericCreateStatic+0x54>
 8004c82:	2300      	movs	r3, #0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d109      	bne.n	8004c9c <xQueueGenericCreateStatic+0x6c>
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	623b      	str	r3, [r7, #32]
 8004c9a:	e7fe      	b.n	8004c9a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <xQueueGenericCreateStatic+0x78>
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <xQueueGenericCreateStatic+0x7c>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e000      	b.n	8004cae <xQueueGenericCreateStatic+0x7e>
 8004cac:	2300      	movs	r3, #0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d109      	bne.n	8004cc6 <xQueueGenericCreateStatic+0x96>
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	e7fe      	b.n	8004cc4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cc6:	2350      	movs	r3, #80	; 0x50
 8004cc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b50      	cmp	r3, #80	; 0x50
 8004cce:	d009      	beq.n	8004ce4 <xQueueGenericCreateStatic+0xb4>
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	e7fe      	b.n	8004ce2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00d      	beq.n	8004d0a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f805 	bl	8004d14 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3730      	adds	r7, #48	; 0x30
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d103      	bne.n	8004d30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e002      	b.n	8004d36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d42:	2101      	movs	r1, #1
 8004d44:	69b8      	ldr	r0, [r7, #24]
 8004d46:	f7ff ff0b 	bl	8004b60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08e      	sub	sp, #56	; 0x38
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <xQueueGenericSend+0x30>
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d8a:	e7fe      	b.n	8004d8a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d103      	bne.n	8004d9a <xQueueGenericSend+0x3e>
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <xQueueGenericSend+0x42>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <xQueueGenericSend+0x44>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d109      	bne.n	8004db8 <xQueueGenericSend+0x5c>
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
 8004db6:	e7fe      	b.n	8004db6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d103      	bne.n	8004dc6 <xQueueGenericSend+0x6a>
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <xQueueGenericSend+0x6e>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <xQueueGenericSend+0x70>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d109      	bne.n	8004de4 <xQueueGenericSend+0x88>
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	623b      	str	r3, [r7, #32]
 8004de2:	e7fe      	b.n	8004de2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004de4:	f001 f996 	bl	8006114 <xTaskGetSchedulerState>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d102      	bne.n	8004df4 <xQueueGenericSend+0x98>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <xQueueGenericSend+0x9c>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <xQueueGenericSend+0x9e>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <xQueueGenericSend+0xb6>
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	61fb      	str	r3, [r7, #28]
 8004e10:	e7fe      	b.n	8004e10 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e12:	f001 fe51 	bl	8006ab8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d302      	bcc.n	8004e28 <xQueueGenericSend+0xcc>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d129      	bne.n	8004e7c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e2e:	f000 f9ff 	bl	8005230 <prvCopyDataToQueue>
 8004e32:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d010      	beq.n	8004e5e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	3324      	adds	r3, #36	; 0x24
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 ffad 	bl	8005da0 <xTaskRemoveFromEventList>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d013      	beq.n	8004e74 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e4c:	4b3f      	ldr	r3, [pc, #252]	; (8004f4c <xQueueGenericSend+0x1f0>)
 8004e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	e00a      	b.n	8004e74 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d007      	beq.n	8004e74 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e64:	4b39      	ldr	r3, [pc, #228]	; (8004f4c <xQueueGenericSend+0x1f0>)
 8004e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e74:	f001 fe4e 	bl	8006b14 <vPortExitCritical>
				return pdPASS;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e063      	b.n	8004f44 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e82:	f001 fe47 	bl	8006b14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e05c      	b.n	8004f44 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e90:	f107 0314 	add.w	r3, r7, #20
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 ffe5 	bl	8005e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e9e:	f001 fe39 	bl	8006b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ea2:	f000 fd5d 	bl	8005960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ea6:	f001 fe07 	bl	8006ab8 <vPortEnterCritical>
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eb0:	b25b      	sxtb	r3, r3
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d103      	bne.n	8004ec0 <xQueueGenericSend+0x164>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ec6:	b25b      	sxtb	r3, r3
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d103      	bne.n	8004ed6 <xQueueGenericSend+0x17a>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ed6:	f001 fe1d 	bl	8006b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eda:	1d3a      	adds	r2, r7, #4
 8004edc:	f107 0314 	add.w	r3, r7, #20
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 ffd4 	bl	8005e90 <xTaskCheckForTimeOut>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d124      	bne.n	8004f38 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004eee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ef0:	f000 fa96 	bl	8005420 <prvIsQueueFull>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d018      	beq.n	8004f2c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	3310      	adds	r3, #16
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4611      	mov	r1, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fefe 	bl	8005d04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f0a:	f000 fa21 	bl	8005350 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f0e:	f000 fd35 	bl	800597c <xTaskResumeAll>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f47f af7c 	bne.w	8004e12 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004f1a:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <xQueueGenericSend+0x1f0>)
 8004f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	e772      	b.n	8004e12 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f2e:	f000 fa0f 	bl	8005350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f32:	f000 fd23 	bl	800597c <xTaskResumeAll>
 8004f36:	e76c      	b.n	8004e12 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f3a:	f000 fa09 	bl	8005350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f3e:	f000 fd1d 	bl	800597c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f42:	2300      	movs	r3, #0
		}
	}
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3738      	adds	r7, #56	; 0x38
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	e000ed04 	.word	0xe000ed04

08004f50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08e      	sub	sp, #56	; 0x38
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <xQueueGenericSendFromISR+0x2c>
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7a:	e7fe      	b.n	8004f7a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d103      	bne.n	8004f8a <xQueueGenericSendFromISR+0x3a>
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <xQueueGenericSendFromISR+0x3e>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <xQueueGenericSendFromISR+0x40>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d109      	bne.n	8004fa8 <xQueueGenericSendFromISR+0x58>
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	e7fe      	b.n	8004fa6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d103      	bne.n	8004fb6 <xQueueGenericSendFromISR+0x66>
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <xQueueGenericSendFromISR+0x6a>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <xQueueGenericSendFromISR+0x6c>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d109      	bne.n	8004fd4 <xQueueGenericSendFromISR+0x84>
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	e7fe      	b.n	8004fd2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fd4:	f001 fe2a 	bl	8006c2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004fd8:	f3ef 8211 	mrs	r2, BASEPRI
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	61ba      	str	r2, [r7, #24]
 8004fee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ff0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d302      	bcc.n	8005006 <xQueueGenericSendFromISR+0xb6>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d12c      	bne.n	8005060 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800500c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005016:	f000 f90b 	bl	8005230 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800501a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005022:	d112      	bne.n	800504a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	d016      	beq.n	800505a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	3324      	adds	r3, #36	; 0x24
 8005030:	4618      	mov	r0, r3
 8005032:	f000 feb5 	bl	8005da0 <xTaskRemoveFromEventList>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00e      	beq.n	800505a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00b      	beq.n	800505a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e007      	b.n	800505a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800504a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800504e:	3301      	adds	r3, #1
 8005050:	b2db      	uxtb	r3, r3
 8005052:	b25a      	sxtb	r2, r3
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800505a:	2301      	movs	r3, #1
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800505e:	e001      	b.n	8005064 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005060:	2300      	movs	r3, #0
 8005062:	637b      	str	r3, [r7, #52]	; 0x34
 8005064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005066:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005070:	4618      	mov	r0, r3
 8005072:	3738      	adds	r7, #56	; 0x38
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08c      	sub	sp, #48	; 0x30
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005084:	2300      	movs	r3, #0
 8005086:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <xQueueReceive+0x2e>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	623b      	str	r3, [r7, #32]
 80050a4:	e7fe      	b.n	80050a4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d103      	bne.n	80050b4 <xQueueReceive+0x3c>
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <xQueueReceive+0x40>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <xQueueReceive+0x42>
 80050b8:	2300      	movs	r3, #0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <xQueueReceive+0x5a>
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	61fb      	str	r3, [r7, #28]
 80050d0:	e7fe      	b.n	80050d0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050d2:	f001 f81f 	bl	8006114 <xTaskGetSchedulerState>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <xQueueReceive+0x6a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <xQueueReceive+0x6e>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <xQueueReceive+0x70>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d109      	bne.n	8005100 <xQueueReceive+0x88>
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	e7fe      	b.n	80050fe <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005100:	f001 fcda 	bl	8006ab8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01f      	beq.n	8005150 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005114:	f000 f8f6 	bl	8005304 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	1e5a      	subs	r2, r3, #1
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00f      	beq.n	8005148 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	3310      	adds	r3, #16
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fe37 	bl	8005da0 <xTaskRemoveFromEventList>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005138:	4b3c      	ldr	r3, [pc, #240]	; (800522c <xQueueReceive+0x1b4>)
 800513a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005148:	f001 fce4 	bl	8006b14 <vPortExitCritical>
				return pdPASS;
 800514c:	2301      	movs	r3, #1
 800514e:	e069      	b.n	8005224 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d103      	bne.n	800515e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005156:	f001 fcdd 	bl	8006b14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800515a:	2300      	movs	r3, #0
 800515c:	e062      	b.n	8005224 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005164:	f107 0310 	add.w	r3, r7, #16
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fe7b 	bl	8005e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800516e:	2301      	movs	r3, #1
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005172:	f001 fccf 	bl	8006b14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005176:	f000 fbf3 	bl	8005960 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800517a:	f001 fc9d 	bl	8006ab8 <vPortEnterCritical>
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005184:	b25b      	sxtb	r3, r3
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d103      	bne.n	8005194 <xQueueReceive+0x11c>
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800519a:	b25b      	sxtb	r3, r3
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d103      	bne.n	80051aa <xQueueReceive+0x132>
 80051a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051aa:	f001 fcb3 	bl	8006b14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051ae:	1d3a      	adds	r2, r7, #4
 80051b0:	f107 0310 	add.w	r3, r7, #16
 80051b4:	4611      	mov	r1, r2
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fe6a 	bl	8005e90 <xTaskCheckForTimeOut>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d123      	bne.n	800520a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051c4:	f000 f916 	bl	80053f4 <prvIsQueueEmpty>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d017      	beq.n	80051fe <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	3324      	adds	r3, #36	; 0x24
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	4611      	mov	r1, r2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fd94 	bl	8005d04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051de:	f000 f8b7 	bl	8005350 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051e2:	f000 fbcb 	bl	800597c <xTaskResumeAll>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d189      	bne.n	8005100 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80051ec:	4b0f      	ldr	r3, [pc, #60]	; (800522c <xQueueReceive+0x1b4>)
 80051ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	e780      	b.n	8005100 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80051fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005200:	f000 f8a6 	bl	8005350 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005204:	f000 fbba 	bl	800597c <xTaskResumeAll>
 8005208:	e77a      	b.n	8005100 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800520a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800520c:	f000 f8a0 	bl	8005350 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005210:	f000 fbb4 	bl	800597c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005216:	f000 f8ed 	bl	80053f4 <prvIsQueueEmpty>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	f43f af6f 	beq.w	8005100 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005222:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005224:	4618      	mov	r0, r3
 8005226:	3730      	adds	r7, #48	; 0x30
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	e000ed04 	.word	0xe000ed04

08005230 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10d      	bne.n	800526a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d14d      	bne.n	80052f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	4618      	mov	r0, r3
 800525c:	f000 ff78 	bl	8006150 <xTaskPriorityDisinherit>
 8005260:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	605a      	str	r2, [r3, #4]
 8005268:	e043      	b.n	80052f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d119      	bne.n	80052a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6898      	ldr	r0, [r3, #8]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	461a      	mov	r2, r3
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	f001 ff10 	bl	80070a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	441a      	add	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	429a      	cmp	r2, r3
 8005298:	d32b      	bcc.n	80052f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	609a      	str	r2, [r3, #8]
 80052a2:	e026      	b.n	80052f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68d8      	ldr	r0, [r3, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	461a      	mov	r2, r3
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	f001 fef6 	bl	80070a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	425b      	negs	r3, r3
 80052be:	441a      	add	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d207      	bcs.n	80052e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	425b      	negs	r3, r3
 80052da:	441a      	add	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d105      	bne.n	80052f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80052fa:	697b      	ldr	r3, [r7, #20]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d018      	beq.n	8005348 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	441a      	add	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	d303      	bcc.n	8005338 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68d9      	ldr	r1, [r3, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	461a      	mov	r2, r3
 8005342:	6838      	ldr	r0, [r7, #0]
 8005344:	f001 feac 	bl	80070a0 <memcpy>
	}
}
 8005348:	bf00      	nop
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005358:	f001 fbae 	bl	8006ab8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005362:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005364:	e011      	b.n	800538a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	2b00      	cmp	r3, #0
 800536c:	d012      	beq.n	8005394 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3324      	adds	r3, #36	; 0x24
 8005372:	4618      	mov	r0, r3
 8005374:	f000 fd14 	bl	8005da0 <xTaskRemoveFromEventList>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800537e:	f000 fde7 	bl	8005f50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	3b01      	subs	r3, #1
 8005386:	b2db      	uxtb	r3, r3
 8005388:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800538a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800538e:	2b00      	cmp	r3, #0
 8005390:	dce9      	bgt.n	8005366 <prvUnlockQueue+0x16>
 8005392:	e000      	b.n	8005396 <prvUnlockQueue+0x46>
					break;
 8005394:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	22ff      	movs	r2, #255	; 0xff
 800539a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800539e:	f001 fbb9 	bl	8006b14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80053a2:	f001 fb89 	bl	8006ab8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053ae:	e011      	b.n	80053d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d012      	beq.n	80053de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3310      	adds	r3, #16
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fcef 	bl	8005da0 <xTaskRemoveFromEventList>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80053c8:	f000 fdc2 	bl	8005f50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80053cc:	7bbb      	ldrb	r3, [r7, #14]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	dce9      	bgt.n	80053b0 <prvUnlockQueue+0x60>
 80053dc:	e000      	b.n	80053e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80053de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	22ff      	movs	r2, #255	; 0xff
 80053e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80053e8:	f001 fb94 	bl	8006b14 <vPortExitCritical>
}
 80053ec:	bf00      	nop
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053fc:	f001 fb5c 	bl	8006ab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005408:	2301      	movs	r3, #1
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	e001      	b.n	8005412 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005412:	f001 fb7f 	bl	8006b14 <vPortExitCritical>

	return xReturn;
 8005416:	68fb      	ldr	r3, [r7, #12]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005428:	f001 fb46 	bl	8006ab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005434:	429a      	cmp	r2, r3
 8005436:	d102      	bne.n	800543e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005438:	2301      	movs	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	e001      	b.n	8005442 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005442:	f001 fb67 	bl	8006b14 <vPortExitCritical>

	return xReturn;
 8005446:	68fb      	ldr	r3, [r7, #12]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	e014      	b.n	800548a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005460:	4a0e      	ldr	r2, [pc, #56]	; (800549c <vQueueAddToRegistry+0x4c>)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10b      	bne.n	8005484 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800546c:	490b      	ldr	r1, [pc, #44]	; (800549c <vQueueAddToRegistry+0x4c>)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005476:	4a09      	ldr	r2, [pc, #36]	; (800549c <vQueueAddToRegistry+0x4c>)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	4413      	add	r3, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005482:	e005      	b.n	8005490 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b07      	cmp	r3, #7
 800548e:	d9e7      	bls.n	8005460 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	2000229c 	.word	0x2000229c

080054a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80054b0:	f001 fb02 	bl	8006ab8 <vPortEnterCritical>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054ba:	b25b      	sxtb	r3, r3
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d103      	bne.n	80054ca <vQueueWaitForMessageRestricted+0x2a>
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054d0:	b25b      	sxtb	r3, r3
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d6:	d103      	bne.n	80054e0 <vQueueWaitForMessageRestricted+0x40>
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054e0:	f001 fb18 	bl	8006b14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d106      	bne.n	80054fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	3324      	adds	r3, #36	; 0x24
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fc29 	bl	8005d4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80054fa:	6978      	ldr	r0, [r7, #20]
 80054fc:	f7ff ff28 	bl	8005350 <prvUnlockQueue>
	}
 8005500:	bf00      	nop
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08e      	sub	sp, #56	; 0x38
 800550c:	af04      	add	r7, sp, #16
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005518:	2b00      	cmp	r3, #0
 800551a:	d109      	bne.n	8005530 <xTaskCreateStatic+0x28>
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	623b      	str	r3, [r7, #32]
 800552e:	e7fe      	b.n	800552e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <xTaskCreateStatic+0x42>
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	61fb      	str	r3, [r7, #28]
 8005548:	e7fe      	b.n	8005548 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800554a:	235c      	movs	r3, #92	; 0x5c
 800554c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b5c      	cmp	r3, #92	; 0x5c
 8005552:	d009      	beq.n	8005568 <xTaskCreateStatic+0x60>
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	e7fe      	b.n	8005566 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556a:	2b00      	cmp	r3, #0
 800556c:	d01e      	beq.n	80055ac <xTaskCreateStatic+0xa4>
 800556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01b      	beq.n	80055ac <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800557c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	2202      	movs	r2, #2
 8005582:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005586:	2300      	movs	r3, #0
 8005588:	9303      	str	r3, [sp, #12]
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	9302      	str	r3, [sp, #8]
 800558e:	f107 0314 	add.w	r3, r7, #20
 8005592:	9301      	str	r3, [sp, #4]
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f850 	bl	8005644 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055a6:	f000 f8d3 	bl	8005750 <prvAddNewTaskToReadyList>
 80055aa:	e001      	b.n	80055b0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055b0:	697b      	ldr	r3, [r7, #20]
	}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3728      	adds	r7, #40	; 0x28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b08c      	sub	sp, #48	; 0x30
 80055be:	af04      	add	r7, sp, #16
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	4613      	mov	r3, r2
 80055c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ca:	88fb      	ldrh	r3, [r7, #6]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 fb68 	bl	8006ca4 <pvPortMalloc>
 80055d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00e      	beq.n	80055fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80055dc:	205c      	movs	r0, #92	; 0x5c
 80055de:	f001 fb61 	bl	8006ca4 <pvPortMalloc>
 80055e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
 80055f0:	e005      	b.n	80055fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055f2:	6978      	ldr	r0, [r7, #20]
 80055f4:	f001 fc18 	bl	8006e28 <vPortFree>
 80055f8:	e001      	b.n	80055fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d017      	beq.n	8005634 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800560c:	88fa      	ldrh	r2, [r7, #6]
 800560e:	2300      	movs	r3, #0
 8005610:	9303      	str	r3, [sp, #12]
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	9302      	str	r3, [sp, #8]
 8005616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 f80e 	bl	8005644 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005628:	69f8      	ldr	r0, [r7, #28]
 800562a:	f000 f891 	bl	8005750 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800562e:	2301      	movs	r3, #1
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	e002      	b.n	800563a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005634:	f04f 33ff 	mov.w	r3, #4294967295
 8005638:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800563a:	69bb      	ldr	r3, [r7, #24]
	}
 800563c:	4618      	mov	r0, r3
 800563e:	3720      	adds	r7, #32
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	461a      	mov	r2, r3
 800565c:	21a5      	movs	r1, #165	; 0xa5
 800565e:	f001 fd2a 	bl	80070b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800566c:	3b01      	subs	r3, #1
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	f023 0307 	bic.w	r3, r3, #7
 800567a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	2b00      	cmp	r3, #0
 8005684:	d009      	beq.n	800569a <prvInitialiseNewTask+0x56>
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e7fe      	b.n	8005698 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
 800569e:	e012      	b.n	80056c6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	7819      	ldrb	r1, [r3, #0]
 80056a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	4413      	add	r3, r2
 80056ae:	3334      	adds	r3, #52	; 0x34
 80056b0:	460a      	mov	r2, r1
 80056b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	4413      	add	r3, r2
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d006      	beq.n	80056ce <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	3301      	adds	r3, #1
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	2b0f      	cmp	r3, #15
 80056ca:	d9e9      	bls.n	80056a0 <prvInitialiseNewTask+0x5c>
 80056cc:	e000      	b.n	80056d0 <prvInitialiseNewTask+0x8c>
		{
			break;
 80056ce:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	2b37      	cmp	r3, #55	; 0x37
 80056dc:	d901      	bls.n	80056e2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056de:	2337      	movs	r3, #55	; 0x37
 80056e0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ec:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	2200      	movs	r2, #0
 80056f2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	3304      	adds	r3, #4
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff f9a0 	bl	8004a3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	3318      	adds	r3, #24
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff f99b 	bl	8004a3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800570c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	2200      	movs	r2, #0
 8005722:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	68f9      	ldr	r1, [r7, #12]
 8005730:	69b8      	ldr	r0, [r7, #24]
 8005732:	f001 f8d7 	bl	80068e4 <pxPortInitialiseStack>
 8005736:	4602      	mov	r2, r0
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005746:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005748:	bf00      	nop
 800574a:	3720      	adds	r7, #32
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005758:	f001 f9ae 	bl	8006ab8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800575c:	4b2d      	ldr	r3, [pc, #180]	; (8005814 <prvAddNewTaskToReadyList+0xc4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3301      	adds	r3, #1
 8005762:	4a2c      	ldr	r2, [pc, #176]	; (8005814 <prvAddNewTaskToReadyList+0xc4>)
 8005764:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005766:	4b2c      	ldr	r3, [pc, #176]	; (8005818 <prvAddNewTaskToReadyList+0xc8>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d109      	bne.n	8005782 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800576e:	4a2a      	ldr	r2, [pc, #168]	; (8005818 <prvAddNewTaskToReadyList+0xc8>)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005774:	4b27      	ldr	r3, [pc, #156]	; (8005814 <prvAddNewTaskToReadyList+0xc4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d110      	bne.n	800579e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800577c:	f000 fc0c 	bl	8005f98 <prvInitialiseTaskLists>
 8005780:	e00d      	b.n	800579e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005782:	4b26      	ldr	r3, [pc, #152]	; (800581c <prvAddNewTaskToReadyList+0xcc>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800578a:	4b23      	ldr	r3, [pc, #140]	; (8005818 <prvAddNewTaskToReadyList+0xc8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	429a      	cmp	r2, r3
 8005796:	d802      	bhi.n	800579e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005798:	4a1f      	ldr	r2, [pc, #124]	; (8005818 <prvAddNewTaskToReadyList+0xc8>)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800579e:	4b20      	ldr	r3, [pc, #128]	; (8005820 <prvAddNewTaskToReadyList+0xd0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3301      	adds	r3, #1
 80057a4:	4a1e      	ldr	r2, [pc, #120]	; (8005820 <prvAddNewTaskToReadyList+0xd0>)
 80057a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80057a8:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <prvAddNewTaskToReadyList+0xd0>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b4:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <prvAddNewTaskToReadyList+0xd4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d903      	bls.n	80057c4 <prvAddNewTaskToReadyList+0x74>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	4a18      	ldr	r2, [pc, #96]	; (8005824 <prvAddNewTaskToReadyList+0xd4>)
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4a15      	ldr	r2, [pc, #84]	; (8005828 <prvAddNewTaskToReadyList+0xd8>)
 80057d2:	441a      	add	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3304      	adds	r3, #4
 80057d8:	4619      	mov	r1, r3
 80057da:	4610      	mov	r0, r2
 80057dc:	f7ff f93b 	bl	8004a56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057e0:	f001 f998 	bl	8006b14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057e4:	4b0d      	ldr	r3, [pc, #52]	; (800581c <prvAddNewTaskToReadyList+0xcc>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00e      	beq.n	800580a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057ec:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <prvAddNewTaskToReadyList+0xc8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d207      	bcs.n	800580a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057fa:	4b0c      	ldr	r3, [pc, #48]	; (800582c <prvAddNewTaskToReadyList+0xdc>)
 80057fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	200011a8 	.word	0x200011a8
 8005818:	20000cd4 	.word	0x20000cd4
 800581c:	200011b4 	.word	0x200011b4
 8005820:	200011c4 	.word	0x200011c4
 8005824:	200011b0 	.word	0x200011b0
 8005828:	20000cd8 	.word	0x20000cd8
 800582c:	e000ed04 	.word	0xe000ed04

08005830 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005842:	4b13      	ldr	r3, [pc, #76]	; (8005890 <vTaskDelay+0x60>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <vTaskDelay+0x2e>
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	60bb      	str	r3, [r7, #8]
 800585c:	e7fe      	b.n	800585c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800585e:	f000 f87f 	bl	8005960 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005862:	2100      	movs	r1, #0
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fcdf 	bl	8006228 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800586a:	f000 f887 	bl	800597c <xTaskResumeAll>
 800586e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d107      	bne.n	8005886 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005876:	4b07      	ldr	r3, [pc, #28]	; (8005894 <vTaskDelay+0x64>)
 8005878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005886:	bf00      	nop
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	200011d0 	.word	0x200011d0
 8005894:	e000ed04 	.word	0xe000ed04

08005898 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08a      	sub	sp, #40	; 0x28
 800589c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058a6:	463a      	mov	r2, r7
 80058a8:	1d39      	adds	r1, r7, #4
 80058aa:	f107 0308 	add.w	r3, r7, #8
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff f874 	bl	800499c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	9202      	str	r2, [sp, #8]
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	2300      	movs	r3, #0
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	2300      	movs	r3, #0
 80058c4:	460a      	mov	r2, r1
 80058c6:	4920      	ldr	r1, [pc, #128]	; (8005948 <vTaskStartScheduler+0xb0>)
 80058c8:	4820      	ldr	r0, [pc, #128]	; (800594c <vTaskStartScheduler+0xb4>)
 80058ca:	f7ff fe1d 	bl	8005508 <xTaskCreateStatic>
 80058ce:	4602      	mov	r2, r0
 80058d0:	4b1f      	ldr	r3, [pc, #124]	; (8005950 <vTaskStartScheduler+0xb8>)
 80058d2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058d4:	4b1e      	ldr	r3, [pc, #120]	; (8005950 <vTaskStartScheduler+0xb8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058dc:	2301      	movs	r3, #1
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	e001      	b.n	80058e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d102      	bne.n	80058f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058ec:	f000 fcf0 	bl	80062d0 <xTimerCreateTimerTask>
 80058f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d115      	bne.n	8005924 <vTaskStartScheduler+0x8c>
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800590a:	4b12      	ldr	r3, [pc, #72]	; (8005954 <vTaskStartScheduler+0xbc>)
 800590c:	f04f 32ff 	mov.w	r2, #4294967295
 8005910:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005912:	4b11      	ldr	r3, [pc, #68]	; (8005958 <vTaskStartScheduler+0xc0>)
 8005914:	2201      	movs	r2, #1
 8005916:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005918:	4b10      	ldr	r3, [pc, #64]	; (800595c <vTaskStartScheduler+0xc4>)
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800591e:	f001 f85b 	bl	80069d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005922:	e00d      	b.n	8005940 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d109      	bne.n	8005940 <vTaskStartScheduler+0xa8>
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	e7fe      	b.n	800593e <vTaskStartScheduler+0xa6>
}
 8005940:	bf00      	nop
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	08009240 	.word	0x08009240
 800594c:	08005f69 	.word	0x08005f69
 8005950:	200011cc 	.word	0x200011cc
 8005954:	200011c8 	.word	0x200011c8
 8005958:	200011b4 	.word	0x200011b4
 800595c:	200011ac 	.word	0x200011ac

08005960 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005964:	4b04      	ldr	r3, [pc, #16]	; (8005978 <vTaskSuspendAll+0x18>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3301      	adds	r3, #1
 800596a:	4a03      	ldr	r2, [pc, #12]	; (8005978 <vTaskSuspendAll+0x18>)
 800596c:	6013      	str	r3, [r2, #0]
}
 800596e:	bf00      	nop
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	200011d0 	.word	0x200011d0

0800597c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800598a:	4b41      	ldr	r3, [pc, #260]	; (8005a90 <xTaskResumeAll+0x114>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d109      	bne.n	80059a6 <xTaskResumeAll+0x2a>
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	e7fe      	b.n	80059a4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059a6:	f001 f887 	bl	8006ab8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059aa:	4b39      	ldr	r3, [pc, #228]	; (8005a90 <xTaskResumeAll+0x114>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	4a37      	ldr	r2, [pc, #220]	; (8005a90 <xTaskResumeAll+0x114>)
 80059b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059b4:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <xTaskResumeAll+0x114>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d162      	bne.n	8005a82 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059bc:	4b35      	ldr	r3, [pc, #212]	; (8005a94 <xTaskResumeAll+0x118>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d05e      	beq.n	8005a82 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059c4:	e02f      	b.n	8005a26 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80059c6:	4b34      	ldr	r3, [pc, #208]	; (8005a98 <xTaskResumeAll+0x11c>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3318      	adds	r3, #24
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff f89a 	bl	8004b0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3304      	adds	r3, #4
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff f895 	bl	8004b0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e6:	4b2d      	ldr	r3, [pc, #180]	; (8005a9c <xTaskResumeAll+0x120>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d903      	bls.n	80059f6 <xTaskResumeAll+0x7a>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f2:	4a2a      	ldr	r2, [pc, #168]	; (8005a9c <xTaskResumeAll+0x120>)
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4a27      	ldr	r2, [pc, #156]	; (8005aa0 <xTaskResumeAll+0x124>)
 8005a04:	441a      	add	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	f7ff f822 	bl	8004a56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a16:	4b23      	ldr	r3, [pc, #140]	; (8005aa4 <xTaskResumeAll+0x128>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d302      	bcc.n	8005a26 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005a20:	4b21      	ldr	r3, [pc, #132]	; (8005aa8 <xTaskResumeAll+0x12c>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a26:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <xTaskResumeAll+0x11c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1cb      	bne.n	80059c6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a34:	f000 fb4a 	bl	80060cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a38:	4b1c      	ldr	r3, [pc, #112]	; (8005aac <xTaskResumeAll+0x130>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d010      	beq.n	8005a66 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a44:	f000 f844 	bl	8005ad0 <xTaskIncrementTick>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005a4e:	4b16      	ldr	r3, [pc, #88]	; (8005aa8 <xTaskResumeAll+0x12c>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1f1      	bne.n	8005a44 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005a60:	4b12      	ldr	r3, [pc, #72]	; (8005aac <xTaskResumeAll+0x130>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a66:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <xTaskResumeAll+0x12c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a72:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <xTaskResumeAll+0x134>)
 8005a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a82:	f001 f847 	bl	8006b14 <vPortExitCritical>

	return xAlreadyYielded;
 8005a86:	68bb      	ldr	r3, [r7, #8]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	200011d0 	.word	0x200011d0
 8005a94:	200011a8 	.word	0x200011a8
 8005a98:	20001168 	.word	0x20001168
 8005a9c:	200011b0 	.word	0x200011b0
 8005aa0:	20000cd8 	.word	0x20000cd8
 8005aa4:	20000cd4 	.word	0x20000cd4
 8005aa8:	200011bc 	.word	0x200011bc
 8005aac:	200011b8 	.word	0x200011b8
 8005ab0:	e000ed04 	.word	0xe000ed04

08005ab4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005aba:	4b04      	ldr	r3, [pc, #16]	; (8005acc <xTaskGetTickCount+0x18>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ac0:	687b      	ldr	r3, [r7, #4]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr
 8005acc:	200011ac 	.word	0x200011ac

08005ad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ada:	4b51      	ldr	r3, [pc, #324]	; (8005c20 <xTaskIncrementTick+0x150>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f040 808d 	bne.w	8005bfe <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ae4:	4b4f      	ldr	r3, [pc, #316]	; (8005c24 <xTaskIncrementTick+0x154>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005aec:	4a4d      	ldr	r2, [pc, #308]	; (8005c24 <xTaskIncrementTick+0x154>)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d11f      	bne.n	8005b38 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005af8:	4b4b      	ldr	r3, [pc, #300]	; (8005c28 <xTaskIncrementTick+0x158>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <xTaskIncrementTick+0x46>
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	e7fe      	b.n	8005b14 <xTaskIncrementTick+0x44>
 8005b16:	4b44      	ldr	r3, [pc, #272]	; (8005c28 <xTaskIncrementTick+0x158>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	4b43      	ldr	r3, [pc, #268]	; (8005c2c <xTaskIncrementTick+0x15c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a41      	ldr	r2, [pc, #260]	; (8005c28 <xTaskIncrementTick+0x158>)
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	4a41      	ldr	r2, [pc, #260]	; (8005c2c <xTaskIncrementTick+0x15c>)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	4b41      	ldr	r3, [pc, #260]	; (8005c30 <xTaskIncrementTick+0x160>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	4a3f      	ldr	r2, [pc, #252]	; (8005c30 <xTaskIncrementTick+0x160>)
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	f000 faca 	bl	80060cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b38:	4b3e      	ldr	r3, [pc, #248]	; (8005c34 <xTaskIncrementTick+0x164>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d34e      	bcc.n	8005be0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b42:	4b39      	ldr	r3, [pc, #228]	; (8005c28 <xTaskIncrementTick+0x158>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <xTaskIncrementTick+0x80>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <xTaskIncrementTick+0x82>
 8005b50:	2300      	movs	r3, #0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d004      	beq.n	8005b60 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b56:	4b37      	ldr	r3, [pc, #220]	; (8005c34 <xTaskIncrementTick+0x164>)
 8005b58:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5c:	601a      	str	r2, [r3, #0]
					break;
 8005b5e:	e03f      	b.n	8005be0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b60:	4b31      	ldr	r3, [pc, #196]	; (8005c28 <xTaskIncrementTick+0x158>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d203      	bcs.n	8005b80 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b78:	4a2e      	ldr	r2, [pc, #184]	; (8005c34 <xTaskIncrementTick+0x164>)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6013      	str	r3, [r2, #0]
						break;
 8005b7e:	e02f      	b.n	8005be0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	3304      	adds	r3, #4
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fe ffc1 	bl	8004b0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d004      	beq.n	8005b9c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	3318      	adds	r3, #24
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe ffb8 	bl	8004b0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba0:	4b25      	ldr	r3, [pc, #148]	; (8005c38 <xTaskIncrementTick+0x168>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d903      	bls.n	8005bb0 <xTaskIncrementTick+0xe0>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	4a22      	ldr	r2, [pc, #136]	; (8005c38 <xTaskIncrementTick+0x168>)
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4a1f      	ldr	r2, [pc, #124]	; (8005c3c <xTaskIncrementTick+0x16c>)
 8005bbe:	441a      	add	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	f7fe ff45 	bl	8004a56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd0:	4b1b      	ldr	r3, [pc, #108]	; (8005c40 <xTaskIncrementTick+0x170>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d3b3      	bcc.n	8005b42 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bde:	e7b0      	b.n	8005b42 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005be0:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <xTaskIncrementTick+0x170>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be6:	4915      	ldr	r1, [pc, #84]	; (8005c3c <xTaskIncrementTick+0x16c>)
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d907      	bls.n	8005c08 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	e004      	b.n	8005c08 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <xTaskIncrementTick+0x174>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3301      	adds	r3, #1
 8005c04:	4a0f      	ldr	r2, [pc, #60]	; (8005c44 <xTaskIncrementTick+0x174>)
 8005c06:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005c08:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <xTaskIncrementTick+0x178>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005c10:	2301      	movs	r3, #1
 8005c12:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c14:	697b      	ldr	r3, [r7, #20]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	200011d0 	.word	0x200011d0
 8005c24:	200011ac 	.word	0x200011ac
 8005c28:	20001160 	.word	0x20001160
 8005c2c:	20001164 	.word	0x20001164
 8005c30:	200011c0 	.word	0x200011c0
 8005c34:	200011c8 	.word	0x200011c8
 8005c38:	200011b0 	.word	0x200011b0
 8005c3c:	20000cd8 	.word	0x20000cd8
 8005c40:	20000cd4 	.word	0x20000cd4
 8005c44:	200011b8 	.word	0x200011b8
 8005c48:	200011bc 	.word	0x200011bc

08005c4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c52:	4b27      	ldr	r3, [pc, #156]	; (8005cf0 <vTaskSwitchContext+0xa4>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c5a:	4b26      	ldr	r3, [pc, #152]	; (8005cf4 <vTaskSwitchContext+0xa8>)
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c60:	e040      	b.n	8005ce4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005c62:	4b24      	ldr	r3, [pc, #144]	; (8005cf4 <vTaskSwitchContext+0xa8>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005c68:	4b23      	ldr	r3, [pc, #140]	; (8005cf8 <vTaskSwitchContext+0xac>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	e00f      	b.n	8005c90 <vTaskSwitchContext+0x44>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <vTaskSwitchContext+0x3e>
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	607b      	str	r3, [r7, #4]
 8005c88:	e7fe      	b.n	8005c88 <vTaskSwitchContext+0x3c>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	491a      	ldr	r1, [pc, #104]	; (8005cfc <vTaskSwitchContext+0xb0>)
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0e5      	beq.n	8005c70 <vTaskSwitchContext+0x24>
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4a13      	ldr	r2, [pc, #76]	; (8005cfc <vTaskSwitchContext+0xb0>)
 8005cb0:	4413      	add	r3, r2
 8005cb2:	60bb      	str	r3, [r7, #8]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d104      	bne.n	8005cd4 <vTaskSwitchContext+0x88>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	605a      	str	r2, [r3, #4]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	4a09      	ldr	r2, [pc, #36]	; (8005d00 <vTaskSwitchContext+0xb4>)
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	4a06      	ldr	r2, [pc, #24]	; (8005cf8 <vTaskSwitchContext+0xac>)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6013      	str	r3, [r2, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	200011d0 	.word	0x200011d0
 8005cf4:	200011bc 	.word	0x200011bc
 8005cf8:	200011b0 	.word	0x200011b0
 8005cfc:	20000cd8 	.word	0x20000cd8
 8005d00:	20000cd4 	.word	0x20000cd4

08005d04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d109      	bne.n	8005d28 <vTaskPlaceOnEventList+0x24>
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e7fe      	b.n	8005d26 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d28:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <vTaskPlaceOnEventList+0x44>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3318      	adds	r3, #24
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7fe feb3 	bl	8004a9c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d36:	2101      	movs	r1, #1
 8005d38:	6838      	ldr	r0, [r7, #0]
 8005d3a:	f000 fa75 	bl	8006228 <prvAddCurrentTaskToDelayedList>
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000cd4 	.word	0x20000cd4

08005d4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d109      	bne.n	8005d72 <vTaskPlaceOnEventListRestricted+0x26>
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	e7fe      	b.n	8005d70 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d72:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <vTaskPlaceOnEventListRestricted+0x50>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3318      	adds	r3, #24
 8005d78:	4619      	mov	r1, r3
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f7fe fe6b 	bl	8004a56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005d86:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	68b8      	ldr	r0, [r7, #8]
 8005d90:	f000 fa4a 	bl	8006228 <prvAddCurrentTaskToDelayedList>
	}
 8005d94:	bf00      	nop
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000cd4 	.word	0x20000cd4

08005da0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <xTaskRemoveFromEventList+0x2a>
 8005db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e7fe      	b.n	8005dc8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	3318      	adds	r3, #24
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fe fe9c 	bl	8004b0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dd4:	4b1d      	ldr	r3, [pc, #116]	; (8005e4c <xTaskRemoveFromEventList+0xac>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d11d      	bne.n	8005e18 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fe fe93 	bl	8004b0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dea:	4b19      	ldr	r3, [pc, #100]	; (8005e50 <xTaskRemoveFromEventList+0xb0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d903      	bls.n	8005dfa <xTaskRemoveFromEventList+0x5a>
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <xTaskRemoveFromEventList+0xb0>)
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4a13      	ldr	r2, [pc, #76]	; (8005e54 <xTaskRemoveFromEventList+0xb4>)
 8005e08:	441a      	add	r2, r3
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4610      	mov	r0, r2
 8005e12:	f7fe fe20 	bl	8004a56 <vListInsertEnd>
 8005e16:	e005      	b.n	8005e24 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	3318      	adds	r3, #24
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	480e      	ldr	r0, [pc, #56]	; (8005e58 <xTaskRemoveFromEventList+0xb8>)
 8005e20:	f7fe fe19 	bl	8004a56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e28:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <xTaskRemoveFromEventList+0xbc>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d905      	bls.n	8005e3e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e32:	2301      	movs	r3, #1
 8005e34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e36:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <xTaskRemoveFromEventList+0xc0>)
 8005e38:	2201      	movs	r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	e001      	b.n	8005e42 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005e42:	697b      	ldr	r3, [r7, #20]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	200011d0 	.word	0x200011d0
 8005e50:	200011b0 	.word	0x200011b0
 8005e54:	20000cd8 	.word	0x20000cd8
 8005e58:	20001168 	.word	0x20001168
 8005e5c:	20000cd4 	.word	0x20000cd4
 8005e60:	200011bc 	.word	0x200011bc

08005e64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e6c:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <vTaskInternalSetTimeOutState+0x24>)
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <vTaskInternalSetTimeOutState+0x28>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	605a      	str	r2, [r3, #4]
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	200011c0 	.word	0x200011c0
 8005e8c:	200011ac 	.word	0x200011ac

08005e90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <xTaskCheckForTimeOut+0x24>
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	e7fe      	b.n	8005eb2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d109      	bne.n	8005ece <xTaskCheckForTimeOut+0x3e>
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	e7fe      	b.n	8005ecc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005ece:	f000 fdf3 	bl	8006ab8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ed2:	4b1d      	ldr	r3, [pc, #116]	; (8005f48 <xTaskCheckForTimeOut+0xb8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d102      	bne.n	8005ef2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	61fb      	str	r3, [r7, #28]
 8005ef0:	e023      	b.n	8005f3a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b15      	ldr	r3, [pc, #84]	; (8005f4c <xTaskCheckForTimeOut+0xbc>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d007      	beq.n	8005f0e <xTaskCheckForTimeOut+0x7e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d302      	bcc.n	8005f0e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	e015      	b.n	8005f3a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d20b      	bcs.n	8005f30 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	1ad2      	subs	r2, r2, r3
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7ff ff9d 	bl	8005e64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	e004      	b.n	8005f3a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f36:	2301      	movs	r3, #1
 8005f38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f3a:	f000 fdeb 	bl	8006b14 <vPortExitCritical>

	return xReturn;
 8005f3e:	69fb      	ldr	r3, [r7, #28]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3720      	adds	r7, #32
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	200011ac 	.word	0x200011ac
 8005f4c:	200011c0 	.word	0x200011c0

08005f50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f54:	4b03      	ldr	r3, [pc, #12]	; (8005f64 <vTaskMissedYield+0x14>)
 8005f56:	2201      	movs	r2, #1
 8005f58:	601a      	str	r2, [r3, #0]
}
 8005f5a:	bf00      	nop
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	200011bc 	.word	0x200011bc

08005f68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f70:	f000 f852 	bl	8006018 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f74:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <prvIdleTask+0x28>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d9f9      	bls.n	8005f70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f7c:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <prvIdleTask+0x2c>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f8c:	e7f0      	b.n	8005f70 <prvIdleTask+0x8>
 8005f8e:	bf00      	nop
 8005f90:	20000cd8 	.word	0x20000cd8
 8005f94:	e000ed04 	.word	0xe000ed04

08005f98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	607b      	str	r3, [r7, #4]
 8005fa2:	e00c      	b.n	8005fbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4a12      	ldr	r2, [pc, #72]	; (8005ff8 <prvInitialiseTaskLists+0x60>)
 8005fb0:	4413      	add	r3, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe fd24 	bl	8004a00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	607b      	str	r3, [r7, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b37      	cmp	r3, #55	; 0x37
 8005fc2:	d9ef      	bls.n	8005fa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fc4:	480d      	ldr	r0, [pc, #52]	; (8005ffc <prvInitialiseTaskLists+0x64>)
 8005fc6:	f7fe fd1b 	bl	8004a00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fca:	480d      	ldr	r0, [pc, #52]	; (8006000 <prvInitialiseTaskLists+0x68>)
 8005fcc:	f7fe fd18 	bl	8004a00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fd0:	480c      	ldr	r0, [pc, #48]	; (8006004 <prvInitialiseTaskLists+0x6c>)
 8005fd2:	f7fe fd15 	bl	8004a00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fd6:	480c      	ldr	r0, [pc, #48]	; (8006008 <prvInitialiseTaskLists+0x70>)
 8005fd8:	f7fe fd12 	bl	8004a00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fdc:	480b      	ldr	r0, [pc, #44]	; (800600c <prvInitialiseTaskLists+0x74>)
 8005fde:	f7fe fd0f 	bl	8004a00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <prvInitialiseTaskLists+0x78>)
 8005fe4:	4a05      	ldr	r2, [pc, #20]	; (8005ffc <prvInitialiseTaskLists+0x64>)
 8005fe6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <prvInitialiseTaskLists+0x7c>)
 8005fea:	4a05      	ldr	r2, [pc, #20]	; (8006000 <prvInitialiseTaskLists+0x68>)
 8005fec:	601a      	str	r2, [r3, #0]
}
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000cd8 	.word	0x20000cd8
 8005ffc:	20001138 	.word	0x20001138
 8006000:	2000114c 	.word	0x2000114c
 8006004:	20001168 	.word	0x20001168
 8006008:	2000117c 	.word	0x2000117c
 800600c:	20001194 	.word	0x20001194
 8006010:	20001160 	.word	0x20001160
 8006014:	20001164 	.word	0x20001164

08006018 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800601e:	e019      	b.n	8006054 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006020:	f000 fd4a 	bl	8006ab8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006024:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <prvCheckTasksWaitingTermination+0x4c>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	4618      	mov	r0, r3
 8006032:	f7fe fd6b 	bl	8004b0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006036:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <prvCheckTasksWaitingTermination+0x50>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3b01      	subs	r3, #1
 800603c:	4a0a      	ldr	r2, [pc, #40]	; (8006068 <prvCheckTasksWaitingTermination+0x50>)
 800603e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006040:	4b0a      	ldr	r3, [pc, #40]	; (800606c <prvCheckTasksWaitingTermination+0x54>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3b01      	subs	r3, #1
 8006046:	4a09      	ldr	r2, [pc, #36]	; (800606c <prvCheckTasksWaitingTermination+0x54>)
 8006048:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800604a:	f000 fd63 	bl	8006b14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f80e 	bl	8006070 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <prvCheckTasksWaitingTermination+0x54>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e1      	bne.n	8006020 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800605c:	bf00      	nop
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	2000117c 	.word	0x2000117c
 8006068:	200011a8 	.word	0x200011a8
 800606c:	20001190 	.word	0x20001190

08006070 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800607e:	2b00      	cmp	r3, #0
 8006080:	d108      	bne.n	8006094 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fece 	bl	8006e28 <vPortFree>
				vPortFree( pxTCB );
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fecb 	bl	8006e28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006092:	e017      	b.n	80060c4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800609a:	2b01      	cmp	r3, #1
 800609c:	d103      	bne.n	80060a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fec2 	bl	8006e28 <vPortFree>
	}
 80060a4:	e00e      	b.n	80060c4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d009      	beq.n	80060c4 <prvDeleteTCB+0x54>
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	e7fe      	b.n	80060c2 <prvDeleteTCB+0x52>
	}
 80060c4:	bf00      	nop
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060d2:	4b0e      	ldr	r3, [pc, #56]	; (800610c <prvResetNextTaskUnblockTime+0x40>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <prvResetNextTaskUnblockTime+0x14>
 80060dc:	2301      	movs	r3, #1
 80060de:	e000      	b.n	80060e2 <prvResetNextTaskUnblockTime+0x16>
 80060e0:	2300      	movs	r3, #0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d004      	beq.n	80060f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060e6:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <prvResetNextTaskUnblockTime+0x44>)
 80060e8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060ee:	e008      	b.n	8006102 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80060f0:	4b06      	ldr	r3, [pc, #24]	; (800610c <prvResetNextTaskUnblockTime+0x40>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	4a04      	ldr	r2, [pc, #16]	; (8006110 <prvResetNextTaskUnblockTime+0x44>)
 8006100:	6013      	str	r3, [r2, #0]
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr
 800610c:	20001160 	.word	0x20001160
 8006110:	200011c8 	.word	0x200011c8

08006114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800611a:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <xTaskGetSchedulerState+0x34>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d102      	bne.n	8006128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006122:	2301      	movs	r3, #1
 8006124:	607b      	str	r3, [r7, #4]
 8006126:	e008      	b.n	800613a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006128:	4b08      	ldr	r3, [pc, #32]	; (800614c <xTaskGetSchedulerState+0x38>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006130:	2302      	movs	r3, #2
 8006132:	607b      	str	r3, [r7, #4]
 8006134:	e001      	b.n	800613a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006136:	2300      	movs	r3, #0
 8006138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800613a:	687b      	ldr	r3, [r7, #4]
	}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	bc80      	pop	{r7}
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	200011b4 	.word	0x200011b4
 800614c:	200011d0 	.word	0x200011d0

08006150 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d054      	beq.n	8006210 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006166:	4b2d      	ldr	r3, [pc, #180]	; (800621c <xTaskPriorityDisinherit+0xcc>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	429a      	cmp	r2, r3
 800616e:	d009      	beq.n	8006184 <xTaskPriorityDisinherit+0x34>
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	e7fe      	b.n	8006182 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <xTaskPriorityDisinherit+0x50>
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	60bb      	str	r3, [r7, #8]
 800619e:	e7fe      	b.n	800619e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a4:	1e5a      	subs	r2, r3, #1
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d02c      	beq.n	8006210 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d128      	bne.n	8006210 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe fca2 	bl	8004b0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e0:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <xTaskPriorityDisinherit+0xd0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d903      	bls.n	80061f0 <xTaskPriorityDisinherit+0xa0>
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	4a0c      	ldr	r2, [pc, #48]	; (8006220 <xTaskPriorityDisinherit+0xd0>)
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4a09      	ldr	r2, [pc, #36]	; (8006224 <xTaskPriorityDisinherit+0xd4>)
 80061fe:	441a      	add	r2, r3
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f7fe fc25 	bl	8004a56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800620c:	2301      	movs	r3, #1
 800620e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006210:	697b      	ldr	r3, [r7, #20]
	}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000cd4 	.word	0x20000cd4
 8006220:	200011b0 	.word	0x200011b0
 8006224:	20000cd8 	.word	0x20000cd8

08006228 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006232:	4b21      	ldr	r3, [pc, #132]	; (80062b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006238:	4b20      	ldr	r3, [pc, #128]	; (80062bc <prvAddCurrentTaskToDelayedList+0x94>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3304      	adds	r3, #4
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe fc64 	bl	8004b0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624a:	d10a      	bne.n	8006262 <prvAddCurrentTaskToDelayedList+0x3a>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006252:	4b1a      	ldr	r3, [pc, #104]	; (80062bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	4819      	ldr	r0, [pc, #100]	; (80062c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800625c:	f7fe fbfb 	bl	8004a56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006260:	e026      	b.n	80062b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4413      	add	r3, r2
 8006268:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800626a:	4b14      	ldr	r3, [pc, #80]	; (80062bc <prvAddCurrentTaskToDelayedList+0x94>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	429a      	cmp	r2, r3
 8006278:	d209      	bcs.n	800628e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800627a:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3304      	adds	r3, #4
 8006284:	4619      	mov	r1, r3
 8006286:	4610      	mov	r0, r2
 8006288:	f7fe fc08 	bl	8004a9c <vListInsert>
}
 800628c:	e010      	b.n	80062b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800628e:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3304      	adds	r3, #4
 8006298:	4619      	mov	r1, r3
 800629a:	4610      	mov	r0, r2
 800629c:	f7fe fbfe 	bl	8004a9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062a0:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d202      	bcs.n	80062b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80062aa:	4a08      	ldr	r2, [pc, #32]	; (80062cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6013      	str	r3, [r2, #0]
}
 80062b0:	bf00      	nop
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	200011ac 	.word	0x200011ac
 80062bc:	20000cd4 	.word	0x20000cd4
 80062c0:	20001194 	.word	0x20001194
 80062c4:	20001164 	.word	0x20001164
 80062c8:	20001160 	.word	0x20001160
 80062cc:	200011c8 	.word	0x200011c8

080062d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	; 0x28
 80062d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062da:	f000 fac3 	bl	8006864 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062de:	4b1c      	ldr	r3, [pc, #112]	; (8006350 <xTimerCreateTimerTask+0x80>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d021      	beq.n	800632a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062ee:	1d3a      	adds	r2, r7, #4
 80062f0:	f107 0108 	add.w	r1, r7, #8
 80062f4:	f107 030c 	add.w	r3, r7, #12
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe fb67 	bl	80049cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	9202      	str	r2, [sp, #8]
 8006306:	9301      	str	r3, [sp, #4]
 8006308:	2302      	movs	r3, #2
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	2300      	movs	r3, #0
 800630e:	460a      	mov	r2, r1
 8006310:	4910      	ldr	r1, [pc, #64]	; (8006354 <xTimerCreateTimerTask+0x84>)
 8006312:	4811      	ldr	r0, [pc, #68]	; (8006358 <xTimerCreateTimerTask+0x88>)
 8006314:	f7ff f8f8 	bl	8005508 <xTaskCreateStatic>
 8006318:	4602      	mov	r2, r0
 800631a:	4b10      	ldr	r3, [pc, #64]	; (800635c <xTimerCreateTimerTask+0x8c>)
 800631c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800631e:	4b0f      	ldr	r3, [pc, #60]	; (800635c <xTimerCreateTimerTask+0x8c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006326:	2301      	movs	r3, #1
 8006328:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d109      	bne.n	8006344 <xTimerCreateTimerTask+0x74>
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	613b      	str	r3, [r7, #16]
 8006342:	e7fe      	b.n	8006342 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006344:	697b      	ldr	r3, [r7, #20]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20001204 	.word	0x20001204
 8006354:	08009248 	.word	0x08009248
 8006358:	08006479 	.word	0x08006479
 800635c:	20001208 	.word	0x20001208

08006360 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800636e:	2300      	movs	r3, #0
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d109      	bne.n	800638c <xTimerGenericCommand+0x2c>
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	623b      	str	r3, [r7, #32]
 800638a:	e7fe      	b.n	800638a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800638c:	4b19      	ldr	r3, [pc, #100]	; (80063f4 <xTimerGenericCommand+0x94>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d02a      	beq.n	80063ea <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b05      	cmp	r3, #5
 80063a4:	dc18      	bgt.n	80063d8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063a6:	f7ff feb5 	bl	8006114 <xTaskGetSchedulerState>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d109      	bne.n	80063c4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063b0:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <xTimerGenericCommand+0x94>)
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	f107 0110 	add.w	r1, r7, #16
 80063b8:	2300      	movs	r3, #0
 80063ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063bc:	f7fe fcce 	bl	8004d5c <xQueueGenericSend>
 80063c0:	6278      	str	r0, [r7, #36]	; 0x24
 80063c2:	e012      	b.n	80063ea <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063c4:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <xTimerGenericCommand+0x94>)
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	f107 0110 	add.w	r1, r7, #16
 80063cc:	2300      	movs	r3, #0
 80063ce:	2200      	movs	r2, #0
 80063d0:	f7fe fcc4 	bl	8004d5c <xQueueGenericSend>
 80063d4:	6278      	str	r0, [r7, #36]	; 0x24
 80063d6:	e008      	b.n	80063ea <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063d8:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <xTimerGenericCommand+0x94>)
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	f107 0110 	add.w	r1, r7, #16
 80063e0:	2300      	movs	r3, #0
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	f7fe fdb4 	bl	8004f50 <xQueueGenericSendFromISR>
 80063e8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3728      	adds	r7, #40	; 0x28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	20001204 	.word	0x20001204

080063f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006402:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <prvProcessExpiredTimer+0x7c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	3304      	adds	r3, #4
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe fb7b 	bl	8004b0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d121      	bne.n	8006462 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	699a      	ldr	r2, [r3, #24]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	18d1      	adds	r1, r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	6978      	ldr	r0, [r7, #20]
 800642c:	f000 f8c8 	bl	80065c0 <prvInsertTimerInActiveList>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d015      	beq.n	8006462 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006436:	2300      	movs	r3, #0
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	2300      	movs	r3, #0
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	2100      	movs	r1, #0
 8006440:	6978      	ldr	r0, [r7, #20]
 8006442:	f7ff ff8d 	bl	8006360 <xTimerGenericCommand>
 8006446:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d109      	bne.n	8006462 <prvProcessExpiredTimer+0x6a>
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	e7fe      	b.n	8006460 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	6978      	ldr	r0, [r7, #20]
 8006468:	4798      	blx	r3
}
 800646a:	bf00      	nop
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	200011fc 	.word	0x200011fc

08006478 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006480:	f107 0308 	add.w	r3, r7, #8
 8006484:	4618      	mov	r0, r3
 8006486:	f000 f857 	bl	8006538 <prvGetNextExpireTime>
 800648a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4619      	mov	r1, r3
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f803 	bl	800649c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006496:	f000 f8d5 	bl	8006644 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800649a:	e7f1      	b.n	8006480 <prvTimerTask+0x8>

0800649c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064a6:	f7ff fa5b 	bl	8005960 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064aa:	f107 0308 	add.w	r3, r7, #8
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 f866 	bl	8006580 <prvSampleTimeNow>
 80064b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d130      	bne.n	800651e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10a      	bne.n	80064d8 <prvProcessTimerOrBlockTask+0x3c>
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d806      	bhi.n	80064d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064ca:	f7ff fa57 	bl	800597c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff ff91 	bl	80063f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064d6:	e024      	b.n	8006522 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d008      	beq.n	80064f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064de:	4b13      	ldr	r3, [pc, #76]	; (800652c <prvProcessTimerOrBlockTask+0x90>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bf0c      	ite	eq
 80064e8:	2301      	moveq	r3, #1
 80064ea:	2300      	movne	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064f0:	4b0f      	ldr	r3, [pc, #60]	; (8006530 <prvProcessTimerOrBlockTask+0x94>)
 80064f2:	6818      	ldr	r0, [r3, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	4619      	mov	r1, r3
 80064fe:	f7fe ffcf 	bl	80054a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006502:	f7ff fa3b 	bl	800597c <xTaskResumeAll>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800650c:	4b09      	ldr	r3, [pc, #36]	; (8006534 <prvProcessTimerOrBlockTask+0x98>)
 800650e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	f3bf 8f6f 	isb	sy
}
 800651c:	e001      	b.n	8006522 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800651e:	f7ff fa2d 	bl	800597c <xTaskResumeAll>
}
 8006522:	bf00      	nop
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20001200 	.word	0x20001200
 8006530:	20001204 	.word	0x20001204
 8006534:	e000ed04 	.word	0xe000ed04

08006538 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006540:	4b0e      	ldr	r3, [pc, #56]	; (800657c <prvGetNextExpireTime+0x44>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	bf0c      	ite	eq
 800654a:	2301      	moveq	r3, #1
 800654c:	2300      	movne	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d105      	bne.n	800656a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800655e:	4b07      	ldr	r3, [pc, #28]	; (800657c <prvGetNextExpireTime+0x44>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	e001      	b.n	800656e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800656e:	68fb      	ldr	r3, [r7, #12]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	bc80      	pop	{r7}
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	200011fc 	.word	0x200011fc

08006580 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006588:	f7ff fa94 	bl	8005ab4 <xTaskGetTickCount>
 800658c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800658e:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <prvSampleTimeNow+0x3c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	429a      	cmp	r2, r3
 8006596:	d205      	bcs.n	80065a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006598:	f000 f904 	bl	80067a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	e002      	b.n	80065aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065aa:	4a04      	ldr	r2, [pc, #16]	; (80065bc <prvSampleTimeNow+0x3c>)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065b0:	68fb      	ldr	r3, [r7, #12]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	2000120c 	.word	0x2000120c

080065c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d812      	bhi.n	800660c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	1ad2      	subs	r2, r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d302      	bcc.n	80065fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065f4:	2301      	movs	r3, #1
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	e01b      	b.n	8006632 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065fa:	4b10      	ldr	r3, [pc, #64]	; (800663c <prvInsertTimerInActiveList+0x7c>)
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3304      	adds	r3, #4
 8006602:	4619      	mov	r1, r3
 8006604:	4610      	mov	r0, r2
 8006606:	f7fe fa49 	bl	8004a9c <vListInsert>
 800660a:	e012      	b.n	8006632 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d206      	bcs.n	8006622 <prvInsertTimerInActiveList+0x62>
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d302      	bcc.n	8006622 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800661c:	2301      	movs	r3, #1
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	e007      	b.n	8006632 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006622:	4b07      	ldr	r3, [pc, #28]	; (8006640 <prvInsertTimerInActiveList+0x80>)
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3304      	adds	r3, #4
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f7fe fa35 	bl	8004a9c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006632:	697b      	ldr	r3, [r7, #20]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3718      	adds	r7, #24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20001200 	.word	0x20001200
 8006640:	200011fc 	.word	0x200011fc

08006644 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08e      	sub	sp, #56	; 0x38
 8006648:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800664a:	e099      	b.n	8006780 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	da17      	bge.n	8006682 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006652:	1d3b      	adds	r3, r7, #4
 8006654:	3304      	adds	r3, #4
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	2b00      	cmp	r3, #0
 800665c:	d109      	bne.n	8006672 <prvProcessReceivedCommands+0x2e>
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	e7fe      	b.n	8006670 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006678:	6850      	ldr	r0, [r2, #4]
 800667a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800667c:	6892      	ldr	r2, [r2, #8]
 800667e:	4611      	mov	r1, r2
 8006680:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	db7a      	blt.n	800677e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d004      	beq.n	800669e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	3304      	adds	r3, #4
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe fa37 	bl	8004b0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800669e:	463b      	mov	r3, r7
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff ff6d 	bl	8006580 <prvSampleTimeNow>
 80066a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b09      	cmp	r3, #9
 80066ac:	d868      	bhi.n	8006780 <prvProcessReceivedCommands+0x13c>
 80066ae:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <prvProcessReceivedCommands+0x70>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	080066dd 	.word	0x080066dd
 80066b8:	080066dd 	.word	0x080066dd
 80066bc:	080066dd 	.word	0x080066dd
 80066c0:	08006781 	.word	0x08006781
 80066c4:	08006737 	.word	0x08006737
 80066c8:	0800676d 	.word	0x0800676d
 80066cc:	080066dd 	.word	0x080066dd
 80066d0:	080066dd 	.word	0x080066dd
 80066d4:	08006781 	.word	0x08006781
 80066d8:	08006737 	.word	0x08006737
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	18d1      	adds	r1, r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ea:	f7ff ff69 	bl	80065c0 <prvInsertTimerInActiveList>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d045      	beq.n	8006780 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066fa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d13d      	bne.n	8006780 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	441a      	add	r2, r3
 800670c:	2300      	movs	r3, #0
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	2300      	movs	r3, #0
 8006712:	2100      	movs	r1, #0
 8006714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006716:	f7ff fe23 	bl	8006360 <xTimerGenericCommand>
 800671a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d12e      	bne.n	8006780 <prvProcessReceivedCommands+0x13c>
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	e7fe      	b.n	8006734 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d109      	bne.n	8006758 <prvProcessReceivedCommands+0x114>
 8006744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	e7fe      	b.n	8006756 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	699a      	ldr	r2, [r3, #24]
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	18d1      	adds	r1, r2, r3
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006766:	f7ff ff2b 	bl	80065c0 <prvInsertTimerInActiveList>
					break;
 800676a:	e009      	b.n	8006780 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800676c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d104      	bne.n	8006780 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006778:	f000 fb56 	bl	8006e28 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800677c:	e000      	b.n	8006780 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800677e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006780:	4b07      	ldr	r3, [pc, #28]	; (80067a0 <prvProcessReceivedCommands+0x15c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	1d39      	adds	r1, r7, #4
 8006786:	2200      	movs	r2, #0
 8006788:	4618      	mov	r0, r3
 800678a:	f7fe fc75 	bl	8005078 <xQueueReceive>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	f47f af5b 	bne.w	800664c <prvProcessReceivedCommands+0x8>
	}
}
 8006796:	bf00      	nop
 8006798:	3730      	adds	r7, #48	; 0x30
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	20001204 	.word	0x20001204

080067a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067aa:	e044      	b.n	8006836 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067ac:	4b2b      	ldr	r3, [pc, #172]	; (800685c <prvSwitchTimerLists+0xb8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067b6:	4b29      	ldr	r3, [pc, #164]	; (800685c <prvSwitchTimerLists+0xb8>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe f9a1 	bl	8004b0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d12d      	bne.n	8006836 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4413      	add	r3, r2
 80067e2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d90e      	bls.n	800680a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067f8:	4b18      	ldr	r3, [pc, #96]	; (800685c <prvSwitchTimerLists+0xb8>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3304      	adds	r3, #4
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f7fe f94a 	bl	8004a9c <vListInsert>
 8006808:	e015      	b.n	8006836 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800680a:	2300      	movs	r3, #0
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	2300      	movs	r3, #0
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	2100      	movs	r1, #0
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f7ff fda3 	bl	8006360 <xTimerGenericCommand>
 800681a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d109      	bne.n	8006836 <prvSwitchTimerLists+0x92>
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	e7fe      	b.n	8006834 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006836:	4b09      	ldr	r3, [pc, #36]	; (800685c <prvSwitchTimerLists+0xb8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1b5      	bne.n	80067ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <prvSwitchTimerLists+0xb8>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006846:	4b06      	ldr	r3, [pc, #24]	; (8006860 <prvSwitchTimerLists+0xbc>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a04      	ldr	r2, [pc, #16]	; (800685c <prvSwitchTimerLists+0xb8>)
 800684c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800684e:	4a04      	ldr	r2, [pc, #16]	; (8006860 <prvSwitchTimerLists+0xbc>)
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	6013      	str	r3, [r2, #0]
}
 8006854:	bf00      	nop
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	200011fc 	.word	0x200011fc
 8006860:	20001200 	.word	0x20001200

08006864 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800686a:	f000 f925 	bl	8006ab8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800686e:	4b15      	ldr	r3, [pc, #84]	; (80068c4 <prvCheckForValidListAndQueue+0x60>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d120      	bne.n	80068b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006876:	4814      	ldr	r0, [pc, #80]	; (80068c8 <prvCheckForValidListAndQueue+0x64>)
 8006878:	f7fe f8c2 	bl	8004a00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800687c:	4813      	ldr	r0, [pc, #76]	; (80068cc <prvCheckForValidListAndQueue+0x68>)
 800687e:	f7fe f8bf 	bl	8004a00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006882:	4b13      	ldr	r3, [pc, #76]	; (80068d0 <prvCheckForValidListAndQueue+0x6c>)
 8006884:	4a10      	ldr	r2, [pc, #64]	; (80068c8 <prvCheckForValidListAndQueue+0x64>)
 8006886:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006888:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <prvCheckForValidListAndQueue+0x70>)
 800688a:	4a10      	ldr	r2, [pc, #64]	; (80068cc <prvCheckForValidListAndQueue+0x68>)
 800688c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800688e:	2300      	movs	r3, #0
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <prvCheckForValidListAndQueue+0x74>)
 8006894:	4a11      	ldr	r2, [pc, #68]	; (80068dc <prvCheckForValidListAndQueue+0x78>)
 8006896:	2110      	movs	r1, #16
 8006898:	200a      	movs	r0, #10
 800689a:	f7fe f9c9 	bl	8004c30 <xQueueGenericCreateStatic>
 800689e:	4602      	mov	r2, r0
 80068a0:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <prvCheckForValidListAndQueue+0x60>)
 80068a2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068a4:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <prvCheckForValidListAndQueue+0x60>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <prvCheckForValidListAndQueue+0x60>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	490b      	ldr	r1, [pc, #44]	; (80068e0 <prvCheckForValidListAndQueue+0x7c>)
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe fdcc 	bl	8005450 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068b8:	f000 f92c 	bl	8006b14 <vPortExitCritical>
}
 80068bc:	bf00      	nop
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20001204 	.word	0x20001204
 80068c8:	200011d4 	.word	0x200011d4
 80068cc:	200011e8 	.word	0x200011e8
 80068d0:	200011fc 	.word	0x200011fc
 80068d4:	20001200 	.word	0x20001200
 80068d8:	200012b0 	.word	0x200012b0
 80068dc:	20001210 	.word	0x20001210
 80068e0:	08009250 	.word	0x08009250

080068e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3b04      	subs	r3, #4
 80068f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3b04      	subs	r3, #4
 8006902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f023 0201 	bic.w	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3b04      	subs	r3, #4
 8006912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006914:	4a08      	ldr	r2, [pc, #32]	; (8006938 <pxPortInitialiseStack+0x54>)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3b14      	subs	r3, #20
 800691e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3b20      	subs	r3, #32
 800692a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800692c:	68fb      	ldr	r3, [r7, #12]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr
 8006938:	0800693d 	.word	0x0800693d

0800693c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006942:	2300      	movs	r3, #0
 8006944:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006946:	4b10      	ldr	r3, [pc, #64]	; (8006988 <prvTaskExitError+0x4c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694e:	d009      	beq.n	8006964 <prvTaskExitError+0x28>
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	e7fe      	b.n	8006962 <prvTaskExitError+0x26>
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006976:	bf00      	nop
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0fc      	beq.n	8006978 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800697e:	bf00      	nop
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr
 8006988:	20000014 	.word	0x20000014
 800698c:	00000000 	.word	0x00000000

08006990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006990:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <pxCurrentTCBConst2>)
 8006992:	6819      	ldr	r1, [r3, #0]
 8006994:	6808      	ldr	r0, [r1, #0]
 8006996:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800699a:	f380 8809 	msr	PSP, r0
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	f380 8811 	msr	BASEPRI, r0
 80069aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80069ae:	4770      	bx	lr

080069b0 <pxCurrentTCBConst2>:
 80069b0:	20000cd4 	.word	0x20000cd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069b4:	bf00      	nop
 80069b6:	bf00      	nop

080069b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80069b8:	4806      	ldr	r0, [pc, #24]	; (80069d4 <prvPortStartFirstTask+0x1c>)
 80069ba:	6800      	ldr	r0, [r0, #0]
 80069bc:	6800      	ldr	r0, [r0, #0]
 80069be:	f380 8808 	msr	MSP, r0
 80069c2:	b662      	cpsie	i
 80069c4:	b661      	cpsie	f
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	df00      	svc	0
 80069d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069d2:	bf00      	nop
 80069d4:	e000ed08 	.word	0xe000ed08

080069d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069de:	4b31      	ldr	r3, [pc, #196]	; (8006aa4 <xPortStartScheduler+0xcc>)
 80069e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	22ff      	movs	r2, #255	; 0xff
 80069ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069f8:	78fb      	ldrb	r3, [r7, #3]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	4b29      	ldr	r3, [pc, #164]	; (8006aa8 <xPortStartScheduler+0xd0>)
 8006a04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a06:	4b29      	ldr	r3, [pc, #164]	; (8006aac <xPortStartScheduler+0xd4>)
 8006a08:	2207      	movs	r2, #7
 8006a0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a0c:	e009      	b.n	8006a22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006a0e:	4b27      	ldr	r3, [pc, #156]	; (8006aac <xPortStartScheduler+0xd4>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	4a25      	ldr	r2, [pc, #148]	; (8006aac <xPortStartScheduler+0xd4>)
 8006a16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2a:	2b80      	cmp	r3, #128	; 0x80
 8006a2c:	d0ef      	beq.n	8006a0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a2e:	4b1f      	ldr	r3, [pc, #124]	; (8006aac <xPortStartScheduler+0xd4>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f1c3 0307 	rsb	r3, r3, #7
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d009      	beq.n	8006a4e <xPortStartScheduler+0x76>
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	60bb      	str	r3, [r7, #8]
 8006a4c:	e7fe      	b.n	8006a4c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a4e:	4b17      	ldr	r3, [pc, #92]	; (8006aac <xPortStartScheduler+0xd4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	4a15      	ldr	r2, [pc, #84]	; (8006aac <xPortStartScheduler+0xd4>)
 8006a56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a58:	4b14      	ldr	r3, [pc, #80]	; (8006aac <xPortStartScheduler+0xd4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a60:	4a12      	ldr	r2, [pc, #72]	; (8006aac <xPortStartScheduler+0xd4>)
 8006a62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a6c:	4b10      	ldr	r3, [pc, #64]	; (8006ab0 <xPortStartScheduler+0xd8>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a0f      	ldr	r2, [pc, #60]	; (8006ab0 <xPortStartScheduler+0xd8>)
 8006a72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a78:	4b0d      	ldr	r3, [pc, #52]	; (8006ab0 <xPortStartScheduler+0xd8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a0c      	ldr	r2, [pc, #48]	; (8006ab0 <xPortStartScheduler+0xd8>)
 8006a7e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a84:	f000 f8b0 	bl	8006be8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a88:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <xPortStartScheduler+0xdc>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a8e:	f7ff ff93 	bl	80069b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a92:	f7ff f8db 	bl	8005c4c <vTaskSwitchContext>
	prvTaskExitError();
 8006a96:	f7ff ff51 	bl	800693c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	e000e400 	.word	0xe000e400
 8006aa8:	20001300 	.word	0x20001300
 8006aac:	20001304 	.word	0x20001304
 8006ab0:	e000ed20 	.word	0xe000ed20
 8006ab4:	20000014 	.word	0x20000014

08006ab8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ad0:	4b0e      	ldr	r3, [pc, #56]	; (8006b0c <vPortEnterCritical+0x54>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	4a0d      	ldr	r2, [pc, #52]	; (8006b0c <vPortEnterCritical+0x54>)
 8006ad8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ada:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <vPortEnterCritical+0x54>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d10e      	bne.n	8006b00 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <vPortEnterCritical+0x58>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d009      	beq.n	8006b00 <vPortEnterCritical+0x48>
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	603b      	str	r3, [r7, #0]
 8006afe:	e7fe      	b.n	8006afe <vPortEnterCritical+0x46>
	}
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	20000014 	.word	0x20000014
 8006b10:	e000ed04 	.word	0xe000ed04

08006b14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b1a:	4b10      	ldr	r3, [pc, #64]	; (8006b5c <vPortExitCritical+0x48>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d109      	bne.n	8006b36 <vPortExitCritical+0x22>
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	607b      	str	r3, [r7, #4]
 8006b34:	e7fe      	b.n	8006b34 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006b36:	4b09      	ldr	r3, [pc, #36]	; (8006b5c <vPortExitCritical+0x48>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	4a07      	ldr	r2, [pc, #28]	; (8006b5c <vPortExitCritical+0x48>)
 8006b3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b40:	4b06      	ldr	r3, [pc, #24]	; (8006b5c <vPortExitCritical+0x48>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <vPortExitCritical+0x3e>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr
 8006b5c:	20000014 	.word	0x20000014

08006b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b60:	f3ef 8009 	mrs	r0, PSP
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <pxCurrentTCBConst>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b70:	6010      	str	r0, [r2, #0]
 8006b72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006b76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b7a:	f380 8811 	msr	BASEPRI, r0
 8006b7e:	f7ff f865 	bl	8005c4c <vTaskSwitchContext>
 8006b82:	f04f 0000 	mov.w	r0, #0
 8006b86:	f380 8811 	msr	BASEPRI, r0
 8006b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b8e:	6819      	ldr	r1, [r3, #0]
 8006b90:	6808      	ldr	r0, [r1, #0]
 8006b92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b96:	f380 8809 	msr	PSP, r0
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	4770      	bx	lr

08006ba0 <pxCurrentTCBConst>:
 8006ba0:	20000cd4 	.word	0x20000cd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop

08006ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bc0:	f7fe ff86 	bl	8005ad0 <xTaskIncrementTick>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bca:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <SysTick_Handler+0x3c>)
 8006bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	e000ed04 	.word	0xe000ed04

08006be8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bec:	4b0a      	ldr	r3, [pc, #40]	; (8006c18 <vPortSetupTimerInterrupt+0x30>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bf2:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <vPortSetupTimerInterrupt+0x34>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bf8:	4b09      	ldr	r3, [pc, #36]	; (8006c20 <vPortSetupTimerInterrupt+0x38>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a09      	ldr	r2, [pc, #36]	; (8006c24 <vPortSetupTimerInterrupt+0x3c>)
 8006bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006c02:	099b      	lsrs	r3, r3, #6
 8006c04:	4a08      	ldr	r2, [pc, #32]	; (8006c28 <vPortSetupTimerInterrupt+0x40>)
 8006c06:	3b01      	subs	r3, #1
 8006c08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c0a:	4b03      	ldr	r3, [pc, #12]	; (8006c18 <vPortSetupTimerInterrupt+0x30>)
 8006c0c:	2207      	movs	r2, #7
 8006c0e:	601a      	str	r2, [r3, #0]
}
 8006c10:	bf00      	nop
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr
 8006c18:	e000e010 	.word	0xe000e010
 8006c1c:	e000e018 	.word	0xe000e018
 8006c20:	20000008 	.word	0x20000008
 8006c24:	10624dd3 	.word	0x10624dd3
 8006c28:	e000e014 	.word	0xe000e014

08006c2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c32:	f3ef 8305 	mrs	r3, IPSR
 8006c36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b0f      	cmp	r3, #15
 8006c3c:	d913      	bls.n	8006c66 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c3e:	4a15      	ldr	r2, [pc, #84]	; (8006c94 <vPortValidateInterruptPriority+0x68>)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c48:	4b13      	ldr	r3, [pc, #76]	; (8006c98 <vPortValidateInterruptPriority+0x6c>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	7afa      	ldrb	r2, [r7, #11]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d209      	bcs.n	8006c66 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	607b      	str	r3, [r7, #4]
 8006c64:	e7fe      	b.n	8006c64 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c66:	4b0d      	ldr	r3, [pc, #52]	; (8006c9c <vPortValidateInterruptPriority+0x70>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <vPortValidateInterruptPriority+0x74>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d909      	bls.n	8006c8a <vPortValidateInterruptPriority+0x5e>
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	603b      	str	r3, [r7, #0]
 8006c88:	e7fe      	b.n	8006c88 <vPortValidateInterruptPriority+0x5c>
	}
 8006c8a:	bf00      	nop
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr
 8006c94:	e000e3f0 	.word	0xe000e3f0
 8006c98:	20001300 	.word	0x20001300
 8006c9c:	e000ed0c 	.word	0xe000ed0c
 8006ca0:	20001304 	.word	0x20001304

08006ca4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08a      	sub	sp, #40	; 0x28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cb0:	f7fe fe56 	bl	8005960 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cb4:	4b57      	ldr	r3, [pc, #348]	; (8006e14 <pvPortMalloc+0x170>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cbc:	f000 f90c 	bl	8006ed8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cc0:	4b55      	ldr	r3, [pc, #340]	; (8006e18 <pvPortMalloc+0x174>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f040 808c 	bne.w	8006de6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d01c      	beq.n	8006d0e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d013      	beq.n	8006d0e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f023 0307 	bic.w	r3, r3, #7
 8006cec:	3308      	adds	r3, #8
 8006cee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <pvPortMalloc+0x6a>
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	e7fe      	b.n	8006d0c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d068      	beq.n	8006de6 <pvPortMalloc+0x142>
 8006d14:	4b41      	ldr	r3, [pc, #260]	; (8006e1c <pvPortMalloc+0x178>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d863      	bhi.n	8006de6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d1e:	4b40      	ldr	r3, [pc, #256]	; (8006e20 <pvPortMalloc+0x17c>)
 8006d20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d22:	4b3f      	ldr	r3, [pc, #252]	; (8006e20 <pvPortMalloc+0x17c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d28:	e004      	b.n	8006d34 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d903      	bls.n	8006d46 <pvPortMalloc+0xa2>
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f1      	bne.n	8006d2a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d46:	4b33      	ldr	r3, [pc, #204]	; (8006e14 <pvPortMalloc+0x170>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d04a      	beq.n	8006de6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2208      	movs	r2, #8
 8006d56:	4413      	add	r3, r2
 8006d58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	1ad2      	subs	r2, r2, r3
 8006d6a:	2308      	movs	r3, #8
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d91e      	bls.n	8006db0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4413      	add	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d009      	beq.n	8006d98 <pvPortMalloc+0xf4>
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	613b      	str	r3, [r7, #16]
 8006d96:	e7fe      	b.n	8006d96 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	1ad2      	subs	r2, r2, r3
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006daa:	69b8      	ldr	r0, [r7, #24]
 8006dac:	f000 f8f6 	bl	8006f9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006db0:	4b1a      	ldr	r3, [pc, #104]	; (8006e1c <pvPortMalloc+0x178>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	4a18      	ldr	r2, [pc, #96]	; (8006e1c <pvPortMalloc+0x178>)
 8006dbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dbe:	4b17      	ldr	r3, [pc, #92]	; (8006e1c <pvPortMalloc+0x178>)
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	4b18      	ldr	r3, [pc, #96]	; (8006e24 <pvPortMalloc+0x180>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d203      	bcs.n	8006dd2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dca:	4b14      	ldr	r3, [pc, #80]	; (8006e1c <pvPortMalloc+0x178>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a15      	ldr	r2, [pc, #84]	; (8006e24 <pvPortMalloc+0x180>)
 8006dd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	4b10      	ldr	r3, [pc, #64]	; (8006e18 <pvPortMalloc+0x174>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006de6:	f7fe fdc9 	bl	800597c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	f003 0307 	and.w	r3, r3, #7
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d009      	beq.n	8006e08 <pvPortMalloc+0x164>
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	e7fe      	b.n	8006e06 <pvPortMalloc+0x162>
	return pvReturn;
 8006e08:	69fb      	ldr	r3, [r7, #28]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3728      	adds	r7, #40	; 0x28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20002120 	.word	0x20002120
 8006e18:	2000212c 	.word	0x2000212c
 8006e1c:	20002124 	.word	0x20002124
 8006e20:	20002118 	.word	0x20002118
 8006e24:	20002128 	.word	0x20002128

08006e28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d046      	beq.n	8006ec8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e3a:	2308      	movs	r3, #8
 8006e3c:	425b      	negs	r3, r3
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	4413      	add	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	4b20      	ldr	r3, [pc, #128]	; (8006ed0 <vPortFree+0xa8>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <vPortFree+0x42>
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e7fe      	b.n	8006e68 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d009      	beq.n	8006e86 <vPortFree+0x5e>
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	60bb      	str	r3, [r7, #8]
 8006e84:	e7fe      	b.n	8006e84 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	4b11      	ldr	r3, [pc, #68]	; (8006ed0 <vPortFree+0xa8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d019      	beq.n	8006ec8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d115      	bne.n	8006ec8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <vPortFree+0xa8>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	43db      	mvns	r3, r3
 8006ea6:	401a      	ands	r2, r3
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006eac:	f7fe fd58 	bl	8005960 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <vPortFree+0xac>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4413      	add	r3, r2
 8006eba:	4a06      	ldr	r2, [pc, #24]	; (8006ed4 <vPortFree+0xac>)
 8006ebc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ebe:	6938      	ldr	r0, [r7, #16]
 8006ec0:	f000 f86c 	bl	8006f9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ec4:	f7fe fd5a 	bl	800597c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ec8:	bf00      	nop
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	2000212c 	.word	0x2000212c
 8006ed4:	20002124 	.word	0x20002124

08006ed8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ede:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006ee2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ee4:	4b27      	ldr	r3, [pc, #156]	; (8006f84 <prvHeapInit+0xac>)
 8006ee6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00c      	beq.n	8006f0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3307      	adds	r3, #7
 8006ef6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0307 	bic.w	r3, r3, #7
 8006efe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	4a1f      	ldr	r2, [pc, #124]	; (8006f84 <prvHeapInit+0xac>)
 8006f08:	4413      	add	r3, r2
 8006f0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f10:	4a1d      	ldr	r2, [pc, #116]	; (8006f88 <prvHeapInit+0xb0>)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f16:	4b1c      	ldr	r3, [pc, #112]	; (8006f88 <prvHeapInit+0xb0>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	4413      	add	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f24:	2208      	movs	r2, #8
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	1a9b      	subs	r3, r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0307 	bic.w	r3, r3, #7
 8006f32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4a15      	ldr	r2, [pc, #84]	; (8006f8c <prvHeapInit+0xb4>)
 8006f38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f3a:	4b14      	ldr	r3, [pc, #80]	; (8006f8c <prvHeapInit+0xb4>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f42:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <prvHeapInit+0xb4>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	1ad2      	subs	r2, r2, r3
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f58:	4b0c      	ldr	r3, [pc, #48]	; (8006f8c <prvHeapInit+0xb4>)
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	4a0a      	ldr	r2, [pc, #40]	; (8006f90 <prvHeapInit+0xb8>)
 8006f66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <prvHeapInit+0xbc>)
 8006f6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f70:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <prvHeapInit+0xc0>)
 8006f72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f76:	601a      	str	r2, [r3, #0]
}
 8006f78:	bf00      	nop
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20001308 	.word	0x20001308
 8006f88:	20002118 	.word	0x20002118
 8006f8c:	20002120 	.word	0x20002120
 8006f90:	20002128 	.word	0x20002128
 8006f94:	20002124 	.word	0x20002124
 8006f98:	2000212c 	.word	0x2000212c

08006f9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fa4:	4b27      	ldr	r3, [pc, #156]	; (8007044 <prvInsertBlockIntoFreeList+0xa8>)
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	e002      	b.n	8006fb0 <prvInsertBlockIntoFreeList+0x14>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d8f7      	bhi.n	8006faa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d108      	bne.n	8006fde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	441a      	add	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	441a      	add	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d118      	bne.n	8007024 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	4b14      	ldr	r3, [pc, #80]	; (8007048 <prvInsertBlockIntoFreeList+0xac>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d00d      	beq.n	800701a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	441a      	add	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	e008      	b.n	800702c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800701a:	4b0b      	ldr	r3, [pc, #44]	; (8007048 <prvInsertBlockIntoFreeList+0xac>)
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	e003      	b.n	800702c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	429a      	cmp	r2, r3
 8007032:	d002      	beq.n	800703a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800703a:	bf00      	nop
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	bc80      	pop	{r7}
 8007042:	4770      	bx	lr
 8007044:	20002118 	.word	0x20002118
 8007048:	20002120 	.word	0x20002120

0800704c <__errno>:
 800704c:	4b01      	ldr	r3, [pc, #4]	; (8007054 <__errno+0x8>)
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	20000018 	.word	0x20000018

08007058 <__libc_init_array>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	2500      	movs	r5, #0
 800705c:	4e0c      	ldr	r6, [pc, #48]	; (8007090 <__libc_init_array+0x38>)
 800705e:	4c0d      	ldr	r4, [pc, #52]	; (8007094 <__libc_init_array+0x3c>)
 8007060:	1ba4      	subs	r4, r4, r6
 8007062:	10a4      	asrs	r4, r4, #2
 8007064:	42a5      	cmp	r5, r4
 8007066:	d109      	bne.n	800707c <__libc_init_array+0x24>
 8007068:	f002 f85c 	bl	8009124 <_init>
 800706c:	2500      	movs	r5, #0
 800706e:	4e0a      	ldr	r6, [pc, #40]	; (8007098 <__libc_init_array+0x40>)
 8007070:	4c0a      	ldr	r4, [pc, #40]	; (800709c <__libc_init_array+0x44>)
 8007072:	1ba4      	subs	r4, r4, r6
 8007074:	10a4      	asrs	r4, r4, #2
 8007076:	42a5      	cmp	r5, r4
 8007078:	d105      	bne.n	8007086 <__libc_init_array+0x2e>
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007080:	4798      	blx	r3
 8007082:	3501      	adds	r5, #1
 8007084:	e7ee      	b.n	8007064 <__libc_init_array+0xc>
 8007086:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800708a:	4798      	blx	r3
 800708c:	3501      	adds	r5, #1
 800708e:	e7f2      	b.n	8007076 <__libc_init_array+0x1e>
 8007090:	0800a2e0 	.word	0x0800a2e0
 8007094:	0800a2e0 	.word	0x0800a2e0
 8007098:	0800a2e0 	.word	0x0800a2e0
 800709c:	0800a2e4 	.word	0x0800a2e4

080070a0 <memcpy>:
 80070a0:	b510      	push	{r4, lr}
 80070a2:	1e43      	subs	r3, r0, #1
 80070a4:	440a      	add	r2, r1
 80070a6:	4291      	cmp	r1, r2
 80070a8:	d100      	bne.n	80070ac <memcpy+0xc>
 80070aa:	bd10      	pop	{r4, pc}
 80070ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070b4:	e7f7      	b.n	80070a6 <memcpy+0x6>

080070b6 <memset>:
 80070b6:	4603      	mov	r3, r0
 80070b8:	4402      	add	r2, r0
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d100      	bne.n	80070c0 <memset+0xa>
 80070be:	4770      	bx	lr
 80070c0:	f803 1b01 	strb.w	r1, [r3], #1
 80070c4:	e7f9      	b.n	80070ba <memset+0x4>

080070c6 <__cvt>:
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070cc:	461e      	mov	r6, r3
 80070ce:	bfbb      	ittet	lt
 80070d0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80070d4:	461e      	movlt	r6, r3
 80070d6:	2300      	movge	r3, #0
 80070d8:	232d      	movlt	r3, #45	; 0x2d
 80070da:	b088      	sub	sp, #32
 80070dc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80070de:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80070e2:	f027 0720 	bic.w	r7, r7, #32
 80070e6:	2f46      	cmp	r7, #70	; 0x46
 80070e8:	4614      	mov	r4, r2
 80070ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80070ec:	700b      	strb	r3, [r1, #0]
 80070ee:	d004      	beq.n	80070fa <__cvt+0x34>
 80070f0:	2f45      	cmp	r7, #69	; 0x45
 80070f2:	d100      	bne.n	80070f6 <__cvt+0x30>
 80070f4:	3501      	adds	r5, #1
 80070f6:	2302      	movs	r3, #2
 80070f8:	e000      	b.n	80070fc <__cvt+0x36>
 80070fa:	2303      	movs	r3, #3
 80070fc:	aa07      	add	r2, sp, #28
 80070fe:	9204      	str	r2, [sp, #16]
 8007100:	aa06      	add	r2, sp, #24
 8007102:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007106:	e9cd 3500 	strd	r3, r5, [sp]
 800710a:	4622      	mov	r2, r4
 800710c:	4633      	mov	r3, r6
 800710e:	f000 fcd7 	bl	8007ac0 <_dtoa_r>
 8007112:	2f47      	cmp	r7, #71	; 0x47
 8007114:	4680      	mov	r8, r0
 8007116:	d102      	bne.n	800711e <__cvt+0x58>
 8007118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800711a:	07db      	lsls	r3, r3, #31
 800711c:	d526      	bpl.n	800716c <__cvt+0xa6>
 800711e:	2f46      	cmp	r7, #70	; 0x46
 8007120:	eb08 0905 	add.w	r9, r8, r5
 8007124:	d111      	bne.n	800714a <__cvt+0x84>
 8007126:	f898 3000 	ldrb.w	r3, [r8]
 800712a:	2b30      	cmp	r3, #48	; 0x30
 800712c:	d10a      	bne.n	8007144 <__cvt+0x7e>
 800712e:	2200      	movs	r2, #0
 8007130:	2300      	movs	r3, #0
 8007132:	4620      	mov	r0, r4
 8007134:	4631      	mov	r1, r6
 8007136:	f7f9 fc37 	bl	80009a8 <__aeabi_dcmpeq>
 800713a:	b918      	cbnz	r0, 8007144 <__cvt+0x7e>
 800713c:	f1c5 0501 	rsb	r5, r5, #1
 8007140:	f8ca 5000 	str.w	r5, [sl]
 8007144:	f8da 3000 	ldr.w	r3, [sl]
 8007148:	4499      	add	r9, r3
 800714a:	2200      	movs	r2, #0
 800714c:	2300      	movs	r3, #0
 800714e:	4620      	mov	r0, r4
 8007150:	4631      	mov	r1, r6
 8007152:	f7f9 fc29 	bl	80009a8 <__aeabi_dcmpeq>
 8007156:	b938      	cbnz	r0, 8007168 <__cvt+0xa2>
 8007158:	2230      	movs	r2, #48	; 0x30
 800715a:	9b07      	ldr	r3, [sp, #28]
 800715c:	454b      	cmp	r3, r9
 800715e:	d205      	bcs.n	800716c <__cvt+0xa6>
 8007160:	1c59      	adds	r1, r3, #1
 8007162:	9107      	str	r1, [sp, #28]
 8007164:	701a      	strb	r2, [r3, #0]
 8007166:	e7f8      	b.n	800715a <__cvt+0x94>
 8007168:	f8cd 901c 	str.w	r9, [sp, #28]
 800716c:	4640      	mov	r0, r8
 800716e:	9b07      	ldr	r3, [sp, #28]
 8007170:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007172:	eba3 0308 	sub.w	r3, r3, r8
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	b008      	add	sp, #32
 800717a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800717e <__exponent>:
 800717e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007180:	2900      	cmp	r1, #0
 8007182:	bfb4      	ite	lt
 8007184:	232d      	movlt	r3, #45	; 0x2d
 8007186:	232b      	movge	r3, #43	; 0x2b
 8007188:	4604      	mov	r4, r0
 800718a:	bfb8      	it	lt
 800718c:	4249      	neglt	r1, r1
 800718e:	2909      	cmp	r1, #9
 8007190:	f804 2b02 	strb.w	r2, [r4], #2
 8007194:	7043      	strb	r3, [r0, #1]
 8007196:	dd21      	ble.n	80071dc <__exponent+0x5e>
 8007198:	f10d 0307 	add.w	r3, sp, #7
 800719c:	461f      	mov	r7, r3
 800719e:	260a      	movs	r6, #10
 80071a0:	fb91 f5f6 	sdiv	r5, r1, r6
 80071a4:	fb06 1115 	mls	r1, r6, r5, r1
 80071a8:	2d09      	cmp	r5, #9
 80071aa:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80071ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80071b2:	f103 32ff 	add.w	r2, r3, #4294967295
 80071b6:	4629      	mov	r1, r5
 80071b8:	dc09      	bgt.n	80071ce <__exponent+0x50>
 80071ba:	3130      	adds	r1, #48	; 0x30
 80071bc:	3b02      	subs	r3, #2
 80071be:	f802 1c01 	strb.w	r1, [r2, #-1]
 80071c2:	42bb      	cmp	r3, r7
 80071c4:	4622      	mov	r2, r4
 80071c6:	d304      	bcc.n	80071d2 <__exponent+0x54>
 80071c8:	1a10      	subs	r0, r2, r0
 80071ca:	b003      	add	sp, #12
 80071cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ce:	4613      	mov	r3, r2
 80071d0:	e7e6      	b.n	80071a0 <__exponent+0x22>
 80071d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071d6:	f804 2b01 	strb.w	r2, [r4], #1
 80071da:	e7f2      	b.n	80071c2 <__exponent+0x44>
 80071dc:	2330      	movs	r3, #48	; 0x30
 80071de:	4419      	add	r1, r3
 80071e0:	7083      	strb	r3, [r0, #2]
 80071e2:	1d02      	adds	r2, r0, #4
 80071e4:	70c1      	strb	r1, [r0, #3]
 80071e6:	e7ef      	b.n	80071c8 <__exponent+0x4a>

080071e8 <_printf_float>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	b091      	sub	sp, #68	; 0x44
 80071ee:	460c      	mov	r4, r1
 80071f0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80071f2:	4693      	mov	fp, r2
 80071f4:	461e      	mov	r6, r3
 80071f6:	4605      	mov	r5, r0
 80071f8:	f001 fa16 	bl	8008628 <_localeconv_r>
 80071fc:	6803      	ldr	r3, [r0, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	9309      	str	r3, [sp, #36]	; 0x24
 8007202:	f7f8 ffa5 	bl	8000150 <strlen>
 8007206:	2300      	movs	r3, #0
 8007208:	930e      	str	r3, [sp, #56]	; 0x38
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	900a      	str	r0, [sp, #40]	; 0x28
 800720e:	3307      	adds	r3, #7
 8007210:	f023 0307 	bic.w	r3, r3, #7
 8007214:	f103 0208 	add.w	r2, r3, #8
 8007218:	f894 8018 	ldrb.w	r8, [r4, #24]
 800721c:	f8d4 a000 	ldr.w	sl, [r4]
 8007220:	603a      	str	r2, [r7, #0]
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800722a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800722e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007232:	930b      	str	r3, [sp, #44]	; 0x2c
 8007234:	f04f 32ff 	mov.w	r2, #4294967295
 8007238:	4ba6      	ldr	r3, [pc, #664]	; (80074d4 <_printf_float+0x2ec>)
 800723a:	4638      	mov	r0, r7
 800723c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800723e:	f7f9 fbe5 	bl	8000a0c <__aeabi_dcmpun>
 8007242:	bb68      	cbnz	r0, 80072a0 <_printf_float+0xb8>
 8007244:	f04f 32ff 	mov.w	r2, #4294967295
 8007248:	4ba2      	ldr	r3, [pc, #648]	; (80074d4 <_printf_float+0x2ec>)
 800724a:	4638      	mov	r0, r7
 800724c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800724e:	f7f9 fbbf 	bl	80009d0 <__aeabi_dcmple>
 8007252:	bb28      	cbnz	r0, 80072a0 <_printf_float+0xb8>
 8007254:	2200      	movs	r2, #0
 8007256:	2300      	movs	r3, #0
 8007258:	4638      	mov	r0, r7
 800725a:	4649      	mov	r1, r9
 800725c:	f7f9 fbae 	bl	80009bc <__aeabi_dcmplt>
 8007260:	b110      	cbz	r0, 8007268 <_printf_float+0x80>
 8007262:	232d      	movs	r3, #45	; 0x2d
 8007264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007268:	4f9b      	ldr	r7, [pc, #620]	; (80074d8 <_printf_float+0x2f0>)
 800726a:	4b9c      	ldr	r3, [pc, #624]	; (80074dc <_printf_float+0x2f4>)
 800726c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007270:	bf98      	it	ls
 8007272:	461f      	movls	r7, r3
 8007274:	2303      	movs	r3, #3
 8007276:	f04f 0900 	mov.w	r9, #0
 800727a:	6123      	str	r3, [r4, #16]
 800727c:	f02a 0304 	bic.w	r3, sl, #4
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	9600      	str	r6, [sp, #0]
 8007284:	465b      	mov	r3, fp
 8007286:	aa0f      	add	r2, sp, #60	; 0x3c
 8007288:	4621      	mov	r1, r4
 800728a:	4628      	mov	r0, r5
 800728c:	f000 f9e2 	bl	8007654 <_printf_common>
 8007290:	3001      	adds	r0, #1
 8007292:	f040 8090 	bne.w	80073b6 <_printf_float+0x1ce>
 8007296:	f04f 30ff 	mov.w	r0, #4294967295
 800729a:	b011      	add	sp, #68	; 0x44
 800729c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a0:	463a      	mov	r2, r7
 80072a2:	464b      	mov	r3, r9
 80072a4:	4638      	mov	r0, r7
 80072a6:	4649      	mov	r1, r9
 80072a8:	f7f9 fbb0 	bl	8000a0c <__aeabi_dcmpun>
 80072ac:	b110      	cbz	r0, 80072b4 <_printf_float+0xcc>
 80072ae:	4f8c      	ldr	r7, [pc, #560]	; (80074e0 <_printf_float+0x2f8>)
 80072b0:	4b8c      	ldr	r3, [pc, #560]	; (80074e4 <_printf_float+0x2fc>)
 80072b2:	e7db      	b.n	800726c <_printf_float+0x84>
 80072b4:	6863      	ldr	r3, [r4, #4]
 80072b6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80072ba:	1c59      	adds	r1, r3, #1
 80072bc:	a80d      	add	r0, sp, #52	; 0x34
 80072be:	a90e      	add	r1, sp, #56	; 0x38
 80072c0:	d140      	bne.n	8007344 <_printf_float+0x15c>
 80072c2:	2306      	movs	r3, #6
 80072c4:	6063      	str	r3, [r4, #4]
 80072c6:	f04f 0c00 	mov.w	ip, #0
 80072ca:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80072ce:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80072d2:	6863      	ldr	r3, [r4, #4]
 80072d4:	6022      	str	r2, [r4, #0]
 80072d6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	463a      	mov	r2, r7
 80072de:	464b      	mov	r3, r9
 80072e0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80072e4:	4628      	mov	r0, r5
 80072e6:	f7ff feee 	bl	80070c6 <__cvt>
 80072ea:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80072ee:	2b47      	cmp	r3, #71	; 0x47
 80072f0:	4607      	mov	r7, r0
 80072f2:	d109      	bne.n	8007308 <_printf_float+0x120>
 80072f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072f6:	1cd8      	adds	r0, r3, #3
 80072f8:	db02      	blt.n	8007300 <_printf_float+0x118>
 80072fa:	6862      	ldr	r2, [r4, #4]
 80072fc:	4293      	cmp	r3, r2
 80072fe:	dd47      	ble.n	8007390 <_printf_float+0x1a8>
 8007300:	f1a8 0802 	sub.w	r8, r8, #2
 8007304:	fa5f f888 	uxtb.w	r8, r8
 8007308:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800730c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800730e:	d824      	bhi.n	800735a <_printf_float+0x172>
 8007310:	3901      	subs	r1, #1
 8007312:	4642      	mov	r2, r8
 8007314:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007318:	910d      	str	r1, [sp, #52]	; 0x34
 800731a:	f7ff ff30 	bl	800717e <__exponent>
 800731e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007320:	4681      	mov	r9, r0
 8007322:	1813      	adds	r3, r2, r0
 8007324:	2a01      	cmp	r2, #1
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	dc02      	bgt.n	8007330 <_printf_float+0x148>
 800732a:	6822      	ldr	r2, [r4, #0]
 800732c:	07d1      	lsls	r1, r2, #31
 800732e:	d501      	bpl.n	8007334 <_printf_float+0x14c>
 8007330:	3301      	adds	r3, #1
 8007332:	6123      	str	r3, [r4, #16]
 8007334:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0a2      	beq.n	8007282 <_printf_float+0x9a>
 800733c:	232d      	movs	r3, #45	; 0x2d
 800733e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007342:	e79e      	b.n	8007282 <_printf_float+0x9a>
 8007344:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007348:	f000 816e 	beq.w	8007628 <_printf_float+0x440>
 800734c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007350:	d1b9      	bne.n	80072c6 <_printf_float+0xde>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1b7      	bne.n	80072c6 <_printf_float+0xde>
 8007356:	2301      	movs	r3, #1
 8007358:	e7b4      	b.n	80072c4 <_printf_float+0xdc>
 800735a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800735e:	d119      	bne.n	8007394 <_printf_float+0x1ac>
 8007360:	2900      	cmp	r1, #0
 8007362:	6863      	ldr	r3, [r4, #4]
 8007364:	dd0c      	ble.n	8007380 <_printf_float+0x198>
 8007366:	6121      	str	r1, [r4, #16]
 8007368:	b913      	cbnz	r3, 8007370 <_printf_float+0x188>
 800736a:	6822      	ldr	r2, [r4, #0]
 800736c:	07d2      	lsls	r2, r2, #31
 800736e:	d502      	bpl.n	8007376 <_printf_float+0x18e>
 8007370:	3301      	adds	r3, #1
 8007372:	440b      	add	r3, r1
 8007374:	6123      	str	r3, [r4, #16]
 8007376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007378:	f04f 0900 	mov.w	r9, #0
 800737c:	65a3      	str	r3, [r4, #88]	; 0x58
 800737e:	e7d9      	b.n	8007334 <_printf_float+0x14c>
 8007380:	b913      	cbnz	r3, 8007388 <_printf_float+0x1a0>
 8007382:	6822      	ldr	r2, [r4, #0]
 8007384:	07d0      	lsls	r0, r2, #31
 8007386:	d501      	bpl.n	800738c <_printf_float+0x1a4>
 8007388:	3302      	adds	r3, #2
 800738a:	e7f3      	b.n	8007374 <_printf_float+0x18c>
 800738c:	2301      	movs	r3, #1
 800738e:	e7f1      	b.n	8007374 <_printf_float+0x18c>
 8007390:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007394:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007398:	4293      	cmp	r3, r2
 800739a:	db05      	blt.n	80073a8 <_printf_float+0x1c0>
 800739c:	6822      	ldr	r2, [r4, #0]
 800739e:	6123      	str	r3, [r4, #16]
 80073a0:	07d1      	lsls	r1, r2, #31
 80073a2:	d5e8      	bpl.n	8007376 <_printf_float+0x18e>
 80073a4:	3301      	adds	r3, #1
 80073a6:	e7e5      	b.n	8007374 <_printf_float+0x18c>
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	bfcc      	ite	gt
 80073ac:	2301      	movgt	r3, #1
 80073ae:	f1c3 0302 	rsble	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	e7de      	b.n	8007374 <_printf_float+0x18c>
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	055a      	lsls	r2, r3, #21
 80073ba:	d407      	bmi.n	80073cc <_printf_float+0x1e4>
 80073bc:	6923      	ldr	r3, [r4, #16]
 80073be:	463a      	mov	r2, r7
 80073c0:	4659      	mov	r1, fp
 80073c2:	4628      	mov	r0, r5
 80073c4:	47b0      	blx	r6
 80073c6:	3001      	adds	r0, #1
 80073c8:	d129      	bne.n	800741e <_printf_float+0x236>
 80073ca:	e764      	b.n	8007296 <_printf_float+0xae>
 80073cc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80073d0:	f240 80d7 	bls.w	8007582 <_printf_float+0x39a>
 80073d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073d8:	2200      	movs	r2, #0
 80073da:	2300      	movs	r3, #0
 80073dc:	f7f9 fae4 	bl	80009a8 <__aeabi_dcmpeq>
 80073e0:	b388      	cbz	r0, 8007446 <_printf_float+0x25e>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4a40      	ldr	r2, [pc, #256]	; (80074e8 <_printf_float+0x300>)
 80073e6:	4659      	mov	r1, fp
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b0      	blx	r6
 80073ec:	3001      	adds	r0, #1
 80073ee:	f43f af52 	beq.w	8007296 <_printf_float+0xae>
 80073f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80073f6:	429a      	cmp	r2, r3
 80073f8:	db02      	blt.n	8007400 <_printf_float+0x218>
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	07d8      	lsls	r0, r3, #31
 80073fe:	d50e      	bpl.n	800741e <_printf_float+0x236>
 8007400:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007404:	4659      	mov	r1, fp
 8007406:	4628      	mov	r0, r5
 8007408:	47b0      	blx	r6
 800740a:	3001      	adds	r0, #1
 800740c:	f43f af43 	beq.w	8007296 <_printf_float+0xae>
 8007410:	2700      	movs	r7, #0
 8007412:	f104 081a 	add.w	r8, r4, #26
 8007416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007418:	3b01      	subs	r3, #1
 800741a:	42bb      	cmp	r3, r7
 800741c:	dc09      	bgt.n	8007432 <_printf_float+0x24a>
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	079f      	lsls	r7, r3, #30
 8007422:	f100 80fd 	bmi.w	8007620 <_printf_float+0x438>
 8007426:	68e0      	ldr	r0, [r4, #12]
 8007428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800742a:	4298      	cmp	r0, r3
 800742c:	bfb8      	it	lt
 800742e:	4618      	movlt	r0, r3
 8007430:	e733      	b.n	800729a <_printf_float+0xb2>
 8007432:	2301      	movs	r3, #1
 8007434:	4642      	mov	r2, r8
 8007436:	4659      	mov	r1, fp
 8007438:	4628      	mov	r0, r5
 800743a:	47b0      	blx	r6
 800743c:	3001      	adds	r0, #1
 800743e:	f43f af2a 	beq.w	8007296 <_printf_float+0xae>
 8007442:	3701      	adds	r7, #1
 8007444:	e7e7      	b.n	8007416 <_printf_float+0x22e>
 8007446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007448:	2b00      	cmp	r3, #0
 800744a:	dc2b      	bgt.n	80074a4 <_printf_float+0x2bc>
 800744c:	2301      	movs	r3, #1
 800744e:	4a26      	ldr	r2, [pc, #152]	; (80074e8 <_printf_float+0x300>)
 8007450:	4659      	mov	r1, fp
 8007452:	4628      	mov	r0, r5
 8007454:	47b0      	blx	r6
 8007456:	3001      	adds	r0, #1
 8007458:	f43f af1d 	beq.w	8007296 <_printf_float+0xae>
 800745c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800745e:	b923      	cbnz	r3, 800746a <_printf_float+0x282>
 8007460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007462:	b913      	cbnz	r3, 800746a <_printf_float+0x282>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	07d9      	lsls	r1, r3, #31
 8007468:	d5d9      	bpl.n	800741e <_printf_float+0x236>
 800746a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800746e:	4659      	mov	r1, fp
 8007470:	4628      	mov	r0, r5
 8007472:	47b0      	blx	r6
 8007474:	3001      	adds	r0, #1
 8007476:	f43f af0e 	beq.w	8007296 <_printf_float+0xae>
 800747a:	f04f 0800 	mov.w	r8, #0
 800747e:	f104 091a 	add.w	r9, r4, #26
 8007482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007484:	425b      	negs	r3, r3
 8007486:	4543      	cmp	r3, r8
 8007488:	dc01      	bgt.n	800748e <_printf_float+0x2a6>
 800748a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800748c:	e797      	b.n	80073be <_printf_float+0x1d6>
 800748e:	2301      	movs	r3, #1
 8007490:	464a      	mov	r2, r9
 8007492:	4659      	mov	r1, fp
 8007494:	4628      	mov	r0, r5
 8007496:	47b0      	blx	r6
 8007498:	3001      	adds	r0, #1
 800749a:	f43f aefc 	beq.w	8007296 <_printf_float+0xae>
 800749e:	f108 0801 	add.w	r8, r8, #1
 80074a2:	e7ee      	b.n	8007482 <_printf_float+0x29a>
 80074a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074a8:	429a      	cmp	r2, r3
 80074aa:	bfa8      	it	ge
 80074ac:	461a      	movge	r2, r3
 80074ae:	2a00      	cmp	r2, #0
 80074b0:	4690      	mov	r8, r2
 80074b2:	dd07      	ble.n	80074c4 <_printf_float+0x2dc>
 80074b4:	4613      	mov	r3, r2
 80074b6:	4659      	mov	r1, fp
 80074b8:	463a      	mov	r2, r7
 80074ba:	4628      	mov	r0, r5
 80074bc:	47b0      	blx	r6
 80074be:	3001      	adds	r0, #1
 80074c0:	f43f aee9 	beq.w	8007296 <_printf_float+0xae>
 80074c4:	f104 031a 	add.w	r3, r4, #26
 80074c8:	f04f 0a00 	mov.w	sl, #0
 80074cc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80074d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074d2:	e015      	b.n	8007500 <_printf_float+0x318>
 80074d4:	7fefffff 	.word	0x7fefffff
 80074d8:	0800a084 	.word	0x0800a084
 80074dc:	0800a080 	.word	0x0800a080
 80074e0:	0800a08c 	.word	0x0800a08c
 80074e4:	0800a088 	.word	0x0800a088
 80074e8:	0800a090 	.word	0x0800a090
 80074ec:	2301      	movs	r3, #1
 80074ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074f0:	4659      	mov	r1, fp
 80074f2:	4628      	mov	r0, r5
 80074f4:	47b0      	blx	r6
 80074f6:	3001      	adds	r0, #1
 80074f8:	f43f aecd 	beq.w	8007296 <_printf_float+0xae>
 80074fc:	f10a 0a01 	add.w	sl, sl, #1
 8007500:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007504:	eba9 0308 	sub.w	r3, r9, r8
 8007508:	4553      	cmp	r3, sl
 800750a:	dcef      	bgt.n	80074ec <_printf_float+0x304>
 800750c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007510:	429a      	cmp	r2, r3
 8007512:	444f      	add	r7, r9
 8007514:	db14      	blt.n	8007540 <_printf_float+0x358>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	07da      	lsls	r2, r3, #31
 800751a:	d411      	bmi.n	8007540 <_printf_float+0x358>
 800751c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800751e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007520:	eba3 0209 	sub.w	r2, r3, r9
 8007524:	eba3 0901 	sub.w	r9, r3, r1
 8007528:	4591      	cmp	r9, r2
 800752a:	bfa8      	it	ge
 800752c:	4691      	movge	r9, r2
 800752e:	f1b9 0f00 	cmp.w	r9, #0
 8007532:	dc0d      	bgt.n	8007550 <_printf_float+0x368>
 8007534:	2700      	movs	r7, #0
 8007536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800753a:	f104 081a 	add.w	r8, r4, #26
 800753e:	e018      	b.n	8007572 <_printf_float+0x38a>
 8007540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007544:	4659      	mov	r1, fp
 8007546:	4628      	mov	r0, r5
 8007548:	47b0      	blx	r6
 800754a:	3001      	adds	r0, #1
 800754c:	d1e6      	bne.n	800751c <_printf_float+0x334>
 800754e:	e6a2      	b.n	8007296 <_printf_float+0xae>
 8007550:	464b      	mov	r3, r9
 8007552:	463a      	mov	r2, r7
 8007554:	4659      	mov	r1, fp
 8007556:	4628      	mov	r0, r5
 8007558:	47b0      	blx	r6
 800755a:	3001      	adds	r0, #1
 800755c:	d1ea      	bne.n	8007534 <_printf_float+0x34c>
 800755e:	e69a      	b.n	8007296 <_printf_float+0xae>
 8007560:	2301      	movs	r3, #1
 8007562:	4642      	mov	r2, r8
 8007564:	4659      	mov	r1, fp
 8007566:	4628      	mov	r0, r5
 8007568:	47b0      	blx	r6
 800756a:	3001      	adds	r0, #1
 800756c:	f43f ae93 	beq.w	8007296 <_printf_float+0xae>
 8007570:	3701      	adds	r7, #1
 8007572:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007576:	1a9b      	subs	r3, r3, r2
 8007578:	eba3 0309 	sub.w	r3, r3, r9
 800757c:	42bb      	cmp	r3, r7
 800757e:	dcef      	bgt.n	8007560 <_printf_float+0x378>
 8007580:	e74d      	b.n	800741e <_printf_float+0x236>
 8007582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007584:	2a01      	cmp	r2, #1
 8007586:	dc01      	bgt.n	800758c <_printf_float+0x3a4>
 8007588:	07db      	lsls	r3, r3, #31
 800758a:	d538      	bpl.n	80075fe <_printf_float+0x416>
 800758c:	2301      	movs	r3, #1
 800758e:	463a      	mov	r2, r7
 8007590:	4659      	mov	r1, fp
 8007592:	4628      	mov	r0, r5
 8007594:	47b0      	blx	r6
 8007596:	3001      	adds	r0, #1
 8007598:	f43f ae7d 	beq.w	8007296 <_printf_float+0xae>
 800759c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075a0:	4659      	mov	r1, fp
 80075a2:	4628      	mov	r0, r5
 80075a4:	47b0      	blx	r6
 80075a6:	3001      	adds	r0, #1
 80075a8:	f107 0701 	add.w	r7, r7, #1
 80075ac:	f43f ae73 	beq.w	8007296 <_printf_float+0xae>
 80075b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075b6:	2200      	movs	r2, #0
 80075b8:	f103 38ff 	add.w	r8, r3, #4294967295
 80075bc:	2300      	movs	r3, #0
 80075be:	f7f9 f9f3 	bl	80009a8 <__aeabi_dcmpeq>
 80075c2:	b9c0      	cbnz	r0, 80075f6 <_printf_float+0x40e>
 80075c4:	4643      	mov	r3, r8
 80075c6:	463a      	mov	r2, r7
 80075c8:	4659      	mov	r1, fp
 80075ca:	4628      	mov	r0, r5
 80075cc:	47b0      	blx	r6
 80075ce:	3001      	adds	r0, #1
 80075d0:	d10d      	bne.n	80075ee <_printf_float+0x406>
 80075d2:	e660      	b.n	8007296 <_printf_float+0xae>
 80075d4:	2301      	movs	r3, #1
 80075d6:	4642      	mov	r2, r8
 80075d8:	4659      	mov	r1, fp
 80075da:	4628      	mov	r0, r5
 80075dc:	47b0      	blx	r6
 80075de:	3001      	adds	r0, #1
 80075e0:	f43f ae59 	beq.w	8007296 <_printf_float+0xae>
 80075e4:	3701      	adds	r7, #1
 80075e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075e8:	3b01      	subs	r3, #1
 80075ea:	42bb      	cmp	r3, r7
 80075ec:	dcf2      	bgt.n	80075d4 <_printf_float+0x3ec>
 80075ee:	464b      	mov	r3, r9
 80075f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075f4:	e6e4      	b.n	80073c0 <_printf_float+0x1d8>
 80075f6:	2700      	movs	r7, #0
 80075f8:	f104 081a 	add.w	r8, r4, #26
 80075fc:	e7f3      	b.n	80075e6 <_printf_float+0x3fe>
 80075fe:	2301      	movs	r3, #1
 8007600:	e7e1      	b.n	80075c6 <_printf_float+0x3de>
 8007602:	2301      	movs	r3, #1
 8007604:	4642      	mov	r2, r8
 8007606:	4659      	mov	r1, fp
 8007608:	4628      	mov	r0, r5
 800760a:	47b0      	blx	r6
 800760c:	3001      	adds	r0, #1
 800760e:	f43f ae42 	beq.w	8007296 <_printf_float+0xae>
 8007612:	3701      	adds	r7, #1
 8007614:	68e3      	ldr	r3, [r4, #12]
 8007616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	42bb      	cmp	r3, r7
 800761c:	dcf1      	bgt.n	8007602 <_printf_float+0x41a>
 800761e:	e702      	b.n	8007426 <_printf_float+0x23e>
 8007620:	2700      	movs	r7, #0
 8007622:	f104 0819 	add.w	r8, r4, #25
 8007626:	e7f5      	b.n	8007614 <_printf_float+0x42c>
 8007628:	2b00      	cmp	r3, #0
 800762a:	f43f ae94 	beq.w	8007356 <_printf_float+0x16e>
 800762e:	f04f 0c00 	mov.w	ip, #0
 8007632:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007636:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800763a:	6022      	str	r2, [r4, #0]
 800763c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007640:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	463a      	mov	r2, r7
 8007648:	464b      	mov	r3, r9
 800764a:	4628      	mov	r0, r5
 800764c:	f7ff fd3b 	bl	80070c6 <__cvt>
 8007650:	4607      	mov	r7, r0
 8007652:	e64f      	b.n	80072f4 <_printf_float+0x10c>

08007654 <_printf_common>:
 8007654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	4691      	mov	r9, r2
 800765a:	461f      	mov	r7, r3
 800765c:	688a      	ldr	r2, [r1, #8]
 800765e:	690b      	ldr	r3, [r1, #16]
 8007660:	4606      	mov	r6, r0
 8007662:	4293      	cmp	r3, r2
 8007664:	bfb8      	it	lt
 8007666:	4613      	movlt	r3, r2
 8007668:	f8c9 3000 	str.w	r3, [r9]
 800766c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007670:	460c      	mov	r4, r1
 8007672:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007676:	b112      	cbz	r2, 800767e <_printf_common+0x2a>
 8007678:	3301      	adds	r3, #1
 800767a:	f8c9 3000 	str.w	r3, [r9]
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	0699      	lsls	r1, r3, #26
 8007682:	bf42      	ittt	mi
 8007684:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007688:	3302      	addmi	r3, #2
 800768a:	f8c9 3000 	strmi.w	r3, [r9]
 800768e:	6825      	ldr	r5, [r4, #0]
 8007690:	f015 0506 	ands.w	r5, r5, #6
 8007694:	d107      	bne.n	80076a6 <_printf_common+0x52>
 8007696:	f104 0a19 	add.w	sl, r4, #25
 800769a:	68e3      	ldr	r3, [r4, #12]
 800769c:	f8d9 2000 	ldr.w	r2, [r9]
 80076a0:	1a9b      	subs	r3, r3, r2
 80076a2:	42ab      	cmp	r3, r5
 80076a4:	dc29      	bgt.n	80076fa <_printf_common+0xa6>
 80076a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80076aa:	6822      	ldr	r2, [r4, #0]
 80076ac:	3300      	adds	r3, #0
 80076ae:	bf18      	it	ne
 80076b0:	2301      	movne	r3, #1
 80076b2:	0692      	lsls	r2, r2, #26
 80076b4:	d42e      	bmi.n	8007714 <_printf_common+0xc0>
 80076b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076ba:	4639      	mov	r1, r7
 80076bc:	4630      	mov	r0, r6
 80076be:	47c0      	blx	r8
 80076c0:	3001      	adds	r0, #1
 80076c2:	d021      	beq.n	8007708 <_printf_common+0xb4>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	68e5      	ldr	r5, [r4, #12]
 80076c8:	f003 0306 	and.w	r3, r3, #6
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	bf18      	it	ne
 80076d0:	2500      	movne	r5, #0
 80076d2:	f8d9 2000 	ldr.w	r2, [r9]
 80076d6:	f04f 0900 	mov.w	r9, #0
 80076da:	bf08      	it	eq
 80076dc:	1aad      	subeq	r5, r5, r2
 80076de:	68a3      	ldr	r3, [r4, #8]
 80076e0:	6922      	ldr	r2, [r4, #16]
 80076e2:	bf08      	it	eq
 80076e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076e8:	4293      	cmp	r3, r2
 80076ea:	bfc4      	itt	gt
 80076ec:	1a9b      	subgt	r3, r3, r2
 80076ee:	18ed      	addgt	r5, r5, r3
 80076f0:	341a      	adds	r4, #26
 80076f2:	454d      	cmp	r5, r9
 80076f4:	d11a      	bne.n	800772c <_printf_common+0xd8>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e008      	b.n	800770c <_printf_common+0xb8>
 80076fa:	2301      	movs	r3, #1
 80076fc:	4652      	mov	r2, sl
 80076fe:	4639      	mov	r1, r7
 8007700:	4630      	mov	r0, r6
 8007702:	47c0      	blx	r8
 8007704:	3001      	adds	r0, #1
 8007706:	d103      	bne.n	8007710 <_printf_common+0xbc>
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007710:	3501      	adds	r5, #1
 8007712:	e7c2      	b.n	800769a <_printf_common+0x46>
 8007714:	2030      	movs	r0, #48	; 0x30
 8007716:	18e1      	adds	r1, r4, r3
 8007718:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007722:	4422      	add	r2, r4
 8007724:	3302      	adds	r3, #2
 8007726:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800772a:	e7c4      	b.n	80076b6 <_printf_common+0x62>
 800772c:	2301      	movs	r3, #1
 800772e:	4622      	mov	r2, r4
 8007730:	4639      	mov	r1, r7
 8007732:	4630      	mov	r0, r6
 8007734:	47c0      	blx	r8
 8007736:	3001      	adds	r0, #1
 8007738:	d0e6      	beq.n	8007708 <_printf_common+0xb4>
 800773a:	f109 0901 	add.w	r9, r9, #1
 800773e:	e7d8      	b.n	80076f2 <_printf_common+0x9e>

08007740 <_printf_i>:
 8007740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007744:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007748:	460c      	mov	r4, r1
 800774a:	7e09      	ldrb	r1, [r1, #24]
 800774c:	b085      	sub	sp, #20
 800774e:	296e      	cmp	r1, #110	; 0x6e
 8007750:	4617      	mov	r7, r2
 8007752:	4606      	mov	r6, r0
 8007754:	4698      	mov	r8, r3
 8007756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007758:	f000 80b3 	beq.w	80078c2 <_printf_i+0x182>
 800775c:	d822      	bhi.n	80077a4 <_printf_i+0x64>
 800775e:	2963      	cmp	r1, #99	; 0x63
 8007760:	d036      	beq.n	80077d0 <_printf_i+0x90>
 8007762:	d80a      	bhi.n	800777a <_printf_i+0x3a>
 8007764:	2900      	cmp	r1, #0
 8007766:	f000 80b9 	beq.w	80078dc <_printf_i+0x19c>
 800776a:	2958      	cmp	r1, #88	; 0x58
 800776c:	f000 8083 	beq.w	8007876 <_printf_i+0x136>
 8007770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007774:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007778:	e032      	b.n	80077e0 <_printf_i+0xa0>
 800777a:	2964      	cmp	r1, #100	; 0x64
 800777c:	d001      	beq.n	8007782 <_printf_i+0x42>
 800777e:	2969      	cmp	r1, #105	; 0x69
 8007780:	d1f6      	bne.n	8007770 <_printf_i+0x30>
 8007782:	6820      	ldr	r0, [r4, #0]
 8007784:	6813      	ldr	r3, [r2, #0]
 8007786:	0605      	lsls	r5, r0, #24
 8007788:	f103 0104 	add.w	r1, r3, #4
 800778c:	d52a      	bpl.n	80077e4 <_printf_i+0xa4>
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6011      	str	r1, [r2, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	da03      	bge.n	800779e <_printf_i+0x5e>
 8007796:	222d      	movs	r2, #45	; 0x2d
 8007798:	425b      	negs	r3, r3
 800779a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800779e:	486f      	ldr	r0, [pc, #444]	; (800795c <_printf_i+0x21c>)
 80077a0:	220a      	movs	r2, #10
 80077a2:	e039      	b.n	8007818 <_printf_i+0xd8>
 80077a4:	2973      	cmp	r1, #115	; 0x73
 80077a6:	f000 809d 	beq.w	80078e4 <_printf_i+0x1a4>
 80077aa:	d808      	bhi.n	80077be <_printf_i+0x7e>
 80077ac:	296f      	cmp	r1, #111	; 0x6f
 80077ae:	d020      	beq.n	80077f2 <_printf_i+0xb2>
 80077b0:	2970      	cmp	r1, #112	; 0x70
 80077b2:	d1dd      	bne.n	8007770 <_printf_i+0x30>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	f043 0320 	orr.w	r3, r3, #32
 80077ba:	6023      	str	r3, [r4, #0]
 80077bc:	e003      	b.n	80077c6 <_printf_i+0x86>
 80077be:	2975      	cmp	r1, #117	; 0x75
 80077c0:	d017      	beq.n	80077f2 <_printf_i+0xb2>
 80077c2:	2978      	cmp	r1, #120	; 0x78
 80077c4:	d1d4      	bne.n	8007770 <_printf_i+0x30>
 80077c6:	2378      	movs	r3, #120	; 0x78
 80077c8:	4865      	ldr	r0, [pc, #404]	; (8007960 <_printf_i+0x220>)
 80077ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077ce:	e055      	b.n	800787c <_printf_i+0x13c>
 80077d0:	6813      	ldr	r3, [r2, #0]
 80077d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077d6:	1d19      	adds	r1, r3, #4
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6011      	str	r1, [r2, #0]
 80077dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077e0:	2301      	movs	r3, #1
 80077e2:	e08c      	b.n	80078fe <_printf_i+0x1be>
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077ea:	6011      	str	r1, [r2, #0]
 80077ec:	bf18      	it	ne
 80077ee:	b21b      	sxthne	r3, r3
 80077f0:	e7cf      	b.n	8007792 <_printf_i+0x52>
 80077f2:	6813      	ldr	r3, [r2, #0]
 80077f4:	6825      	ldr	r5, [r4, #0]
 80077f6:	1d18      	adds	r0, r3, #4
 80077f8:	6010      	str	r0, [r2, #0]
 80077fa:	0628      	lsls	r0, r5, #24
 80077fc:	d501      	bpl.n	8007802 <_printf_i+0xc2>
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	e002      	b.n	8007808 <_printf_i+0xc8>
 8007802:	0668      	lsls	r0, r5, #25
 8007804:	d5fb      	bpl.n	80077fe <_printf_i+0xbe>
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	296f      	cmp	r1, #111	; 0x6f
 800780a:	bf14      	ite	ne
 800780c:	220a      	movne	r2, #10
 800780e:	2208      	moveq	r2, #8
 8007810:	4852      	ldr	r0, [pc, #328]	; (800795c <_printf_i+0x21c>)
 8007812:	2100      	movs	r1, #0
 8007814:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007818:	6865      	ldr	r5, [r4, #4]
 800781a:	2d00      	cmp	r5, #0
 800781c:	60a5      	str	r5, [r4, #8]
 800781e:	f2c0 8095 	blt.w	800794c <_printf_i+0x20c>
 8007822:	6821      	ldr	r1, [r4, #0]
 8007824:	f021 0104 	bic.w	r1, r1, #4
 8007828:	6021      	str	r1, [r4, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d13d      	bne.n	80078aa <_printf_i+0x16a>
 800782e:	2d00      	cmp	r5, #0
 8007830:	f040 808e 	bne.w	8007950 <_printf_i+0x210>
 8007834:	4665      	mov	r5, ip
 8007836:	2a08      	cmp	r2, #8
 8007838:	d10b      	bne.n	8007852 <_printf_i+0x112>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	07db      	lsls	r3, r3, #31
 800783e:	d508      	bpl.n	8007852 <_printf_i+0x112>
 8007840:	6923      	ldr	r3, [r4, #16]
 8007842:	6862      	ldr	r2, [r4, #4]
 8007844:	429a      	cmp	r2, r3
 8007846:	bfde      	ittt	le
 8007848:	2330      	movle	r3, #48	; 0x30
 800784a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800784e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007852:	ebac 0305 	sub.w	r3, ip, r5
 8007856:	6123      	str	r3, [r4, #16]
 8007858:	f8cd 8000 	str.w	r8, [sp]
 800785c:	463b      	mov	r3, r7
 800785e:	aa03      	add	r2, sp, #12
 8007860:	4621      	mov	r1, r4
 8007862:	4630      	mov	r0, r6
 8007864:	f7ff fef6 	bl	8007654 <_printf_common>
 8007868:	3001      	adds	r0, #1
 800786a:	d14d      	bne.n	8007908 <_printf_i+0x1c8>
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	b005      	add	sp, #20
 8007872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007876:	4839      	ldr	r0, [pc, #228]	; (800795c <_printf_i+0x21c>)
 8007878:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800787c:	6813      	ldr	r3, [r2, #0]
 800787e:	6821      	ldr	r1, [r4, #0]
 8007880:	1d1d      	adds	r5, r3, #4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6015      	str	r5, [r2, #0]
 8007886:	060a      	lsls	r2, r1, #24
 8007888:	d50b      	bpl.n	80078a2 <_printf_i+0x162>
 800788a:	07ca      	lsls	r2, r1, #31
 800788c:	bf44      	itt	mi
 800788e:	f041 0120 	orrmi.w	r1, r1, #32
 8007892:	6021      	strmi	r1, [r4, #0]
 8007894:	b91b      	cbnz	r3, 800789e <_printf_i+0x15e>
 8007896:	6822      	ldr	r2, [r4, #0]
 8007898:	f022 0220 	bic.w	r2, r2, #32
 800789c:	6022      	str	r2, [r4, #0]
 800789e:	2210      	movs	r2, #16
 80078a0:	e7b7      	b.n	8007812 <_printf_i+0xd2>
 80078a2:	064d      	lsls	r5, r1, #25
 80078a4:	bf48      	it	mi
 80078a6:	b29b      	uxthmi	r3, r3
 80078a8:	e7ef      	b.n	800788a <_printf_i+0x14a>
 80078aa:	4665      	mov	r5, ip
 80078ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80078b0:	fb02 3311 	mls	r3, r2, r1, r3
 80078b4:	5cc3      	ldrb	r3, [r0, r3]
 80078b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80078ba:	460b      	mov	r3, r1
 80078bc:	2900      	cmp	r1, #0
 80078be:	d1f5      	bne.n	80078ac <_printf_i+0x16c>
 80078c0:	e7b9      	b.n	8007836 <_printf_i+0xf6>
 80078c2:	6813      	ldr	r3, [r2, #0]
 80078c4:	6825      	ldr	r5, [r4, #0]
 80078c6:	1d18      	adds	r0, r3, #4
 80078c8:	6961      	ldr	r1, [r4, #20]
 80078ca:	6010      	str	r0, [r2, #0]
 80078cc:	0628      	lsls	r0, r5, #24
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	d501      	bpl.n	80078d6 <_printf_i+0x196>
 80078d2:	6019      	str	r1, [r3, #0]
 80078d4:	e002      	b.n	80078dc <_printf_i+0x19c>
 80078d6:	066a      	lsls	r2, r5, #25
 80078d8:	d5fb      	bpl.n	80078d2 <_printf_i+0x192>
 80078da:	8019      	strh	r1, [r3, #0]
 80078dc:	2300      	movs	r3, #0
 80078de:	4665      	mov	r5, ip
 80078e0:	6123      	str	r3, [r4, #16]
 80078e2:	e7b9      	b.n	8007858 <_printf_i+0x118>
 80078e4:	6813      	ldr	r3, [r2, #0]
 80078e6:	1d19      	adds	r1, r3, #4
 80078e8:	6011      	str	r1, [r2, #0]
 80078ea:	681d      	ldr	r5, [r3, #0]
 80078ec:	6862      	ldr	r2, [r4, #4]
 80078ee:	2100      	movs	r1, #0
 80078f0:	4628      	mov	r0, r5
 80078f2:	f000 feaf 	bl	8008654 <memchr>
 80078f6:	b108      	cbz	r0, 80078fc <_printf_i+0x1bc>
 80078f8:	1b40      	subs	r0, r0, r5
 80078fa:	6060      	str	r0, [r4, #4]
 80078fc:	6863      	ldr	r3, [r4, #4]
 80078fe:	6123      	str	r3, [r4, #16]
 8007900:	2300      	movs	r3, #0
 8007902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007906:	e7a7      	b.n	8007858 <_printf_i+0x118>
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	462a      	mov	r2, r5
 800790c:	4639      	mov	r1, r7
 800790e:	4630      	mov	r0, r6
 8007910:	47c0      	blx	r8
 8007912:	3001      	adds	r0, #1
 8007914:	d0aa      	beq.n	800786c <_printf_i+0x12c>
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	079b      	lsls	r3, r3, #30
 800791a:	d413      	bmi.n	8007944 <_printf_i+0x204>
 800791c:	68e0      	ldr	r0, [r4, #12]
 800791e:	9b03      	ldr	r3, [sp, #12]
 8007920:	4298      	cmp	r0, r3
 8007922:	bfb8      	it	lt
 8007924:	4618      	movlt	r0, r3
 8007926:	e7a3      	b.n	8007870 <_printf_i+0x130>
 8007928:	2301      	movs	r3, #1
 800792a:	464a      	mov	r2, r9
 800792c:	4639      	mov	r1, r7
 800792e:	4630      	mov	r0, r6
 8007930:	47c0      	blx	r8
 8007932:	3001      	adds	r0, #1
 8007934:	d09a      	beq.n	800786c <_printf_i+0x12c>
 8007936:	3501      	adds	r5, #1
 8007938:	68e3      	ldr	r3, [r4, #12]
 800793a:	9a03      	ldr	r2, [sp, #12]
 800793c:	1a9b      	subs	r3, r3, r2
 800793e:	42ab      	cmp	r3, r5
 8007940:	dcf2      	bgt.n	8007928 <_printf_i+0x1e8>
 8007942:	e7eb      	b.n	800791c <_printf_i+0x1dc>
 8007944:	2500      	movs	r5, #0
 8007946:	f104 0919 	add.w	r9, r4, #25
 800794a:	e7f5      	b.n	8007938 <_printf_i+0x1f8>
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1ac      	bne.n	80078aa <_printf_i+0x16a>
 8007950:	7803      	ldrb	r3, [r0, #0]
 8007952:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007956:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800795a:	e76c      	b.n	8007836 <_printf_i+0xf6>
 800795c:	0800a092 	.word	0x0800a092
 8007960:	0800a0a3 	.word	0x0800a0a3

08007964 <siprintf>:
 8007964:	b40e      	push	{r1, r2, r3}
 8007966:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800796a:	b500      	push	{lr}
 800796c:	b09c      	sub	sp, #112	; 0x70
 800796e:	ab1d      	add	r3, sp, #116	; 0x74
 8007970:	9002      	str	r0, [sp, #8]
 8007972:	9006      	str	r0, [sp, #24]
 8007974:	9107      	str	r1, [sp, #28]
 8007976:	9104      	str	r1, [sp, #16]
 8007978:	4808      	ldr	r0, [pc, #32]	; (800799c <siprintf+0x38>)
 800797a:	4909      	ldr	r1, [pc, #36]	; (80079a0 <siprintf+0x3c>)
 800797c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007980:	9105      	str	r1, [sp, #20]
 8007982:	6800      	ldr	r0, [r0, #0]
 8007984:	a902      	add	r1, sp, #8
 8007986:	9301      	str	r3, [sp, #4]
 8007988:	f001 fa5c 	bl	8008e44 <_svfiprintf_r>
 800798c:	2200      	movs	r2, #0
 800798e:	9b02      	ldr	r3, [sp, #8]
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	b01c      	add	sp, #112	; 0x70
 8007994:	f85d eb04 	ldr.w	lr, [sp], #4
 8007998:	b003      	add	sp, #12
 800799a:	4770      	bx	lr
 800799c:	20000018 	.word	0x20000018
 80079a0:	ffff0208 	.word	0xffff0208

080079a4 <quorem>:
 80079a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a8:	6903      	ldr	r3, [r0, #16]
 80079aa:	690c      	ldr	r4, [r1, #16]
 80079ac:	4680      	mov	r8, r0
 80079ae:	42a3      	cmp	r3, r4
 80079b0:	f2c0 8084 	blt.w	8007abc <quorem+0x118>
 80079b4:	3c01      	subs	r4, #1
 80079b6:	f101 0714 	add.w	r7, r1, #20
 80079ba:	f100 0614 	add.w	r6, r0, #20
 80079be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80079c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80079c6:	3501      	adds	r5, #1
 80079c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80079cc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80079d0:	eb06 030c 	add.w	r3, r6, ip
 80079d4:	eb07 090c 	add.w	r9, r7, ip
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	b39d      	cbz	r5, 8007a44 <quorem+0xa0>
 80079dc:	f04f 0a00 	mov.w	sl, #0
 80079e0:	4638      	mov	r0, r7
 80079e2:	46b6      	mov	lr, r6
 80079e4:	46d3      	mov	fp, sl
 80079e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80079ea:	b293      	uxth	r3, r2
 80079ec:	fb05 a303 	mla	r3, r5, r3, sl
 80079f0:	0c12      	lsrs	r2, r2, #16
 80079f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079f6:	fb05 a202 	mla	r2, r5, r2, sl
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	ebab 0303 	sub.w	r3, fp, r3
 8007a00:	f8de b000 	ldr.w	fp, [lr]
 8007a04:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007a08:	fa1f fb8b 	uxth.w	fp, fp
 8007a0c:	445b      	add	r3, fp
 8007a0e:	fa1f fb82 	uxth.w	fp, r2
 8007a12:	f8de 2000 	ldr.w	r2, [lr]
 8007a16:	4581      	cmp	r9, r0
 8007a18:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007a1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a26:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007a2a:	f84e 3b04 	str.w	r3, [lr], #4
 8007a2e:	d2da      	bcs.n	80079e6 <quorem+0x42>
 8007a30:	f856 300c 	ldr.w	r3, [r6, ip]
 8007a34:	b933      	cbnz	r3, 8007a44 <quorem+0xa0>
 8007a36:	9b01      	ldr	r3, [sp, #4]
 8007a38:	3b04      	subs	r3, #4
 8007a3a:	429e      	cmp	r6, r3
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	d331      	bcc.n	8007aa4 <quorem+0x100>
 8007a40:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a44:	4640      	mov	r0, r8
 8007a46:	f001 f827 	bl	8008a98 <__mcmp>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	db26      	blt.n	8007a9c <quorem+0xf8>
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f04f 0c00 	mov.w	ip, #0
 8007a54:	3501      	adds	r5, #1
 8007a56:	f857 1b04 	ldr.w	r1, [r7], #4
 8007a5a:	f8d0 e000 	ldr.w	lr, [r0]
 8007a5e:	b28b      	uxth	r3, r1
 8007a60:	ebac 0303 	sub.w	r3, ip, r3
 8007a64:	fa1f f28e 	uxth.w	r2, lr
 8007a68:	4413      	add	r3, r2
 8007a6a:	0c0a      	lsrs	r2, r1, #16
 8007a6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a7a:	45b9      	cmp	r9, r7
 8007a7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a80:	f840 3b04 	str.w	r3, [r0], #4
 8007a84:	d2e7      	bcs.n	8007a56 <quorem+0xb2>
 8007a86:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007a8a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007a8e:	b92a      	cbnz	r2, 8007a9c <quorem+0xf8>
 8007a90:	3b04      	subs	r3, #4
 8007a92:	429e      	cmp	r6, r3
 8007a94:	461a      	mov	r2, r3
 8007a96:	d30b      	bcc.n	8007ab0 <quorem+0x10c>
 8007a98:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	b003      	add	sp, #12
 8007aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa4:	6812      	ldr	r2, [r2, #0]
 8007aa6:	3b04      	subs	r3, #4
 8007aa8:	2a00      	cmp	r2, #0
 8007aaa:	d1c9      	bne.n	8007a40 <quorem+0x9c>
 8007aac:	3c01      	subs	r4, #1
 8007aae:	e7c4      	b.n	8007a3a <quorem+0x96>
 8007ab0:	6812      	ldr	r2, [r2, #0]
 8007ab2:	3b04      	subs	r3, #4
 8007ab4:	2a00      	cmp	r2, #0
 8007ab6:	d1ef      	bne.n	8007a98 <quorem+0xf4>
 8007ab8:	3c01      	subs	r4, #1
 8007aba:	e7ea      	b.n	8007a92 <quorem+0xee>
 8007abc:	2000      	movs	r0, #0
 8007abe:	e7ee      	b.n	8007a9e <quorem+0xfa>

08007ac0 <_dtoa_r>:
 8007ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac4:	4616      	mov	r6, r2
 8007ac6:	461f      	mov	r7, r3
 8007ac8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007aca:	b095      	sub	sp, #84	; 0x54
 8007acc:	4604      	mov	r4, r0
 8007ace:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007ad2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007ad6:	b93d      	cbnz	r5, 8007ae8 <_dtoa_r+0x28>
 8007ad8:	2010      	movs	r0, #16
 8007ada:	f000 fdb3 	bl	8008644 <malloc>
 8007ade:	6260      	str	r0, [r4, #36]	; 0x24
 8007ae0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ae4:	6005      	str	r5, [r0, #0]
 8007ae6:	60c5      	str	r5, [r0, #12]
 8007ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aea:	6819      	ldr	r1, [r3, #0]
 8007aec:	b151      	cbz	r1, 8007b04 <_dtoa_r+0x44>
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	2301      	movs	r3, #1
 8007af2:	4093      	lsls	r3, r2
 8007af4:	604a      	str	r2, [r1, #4]
 8007af6:	608b      	str	r3, [r1, #8]
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 fded 	bl	80086d8 <_Bfree>
 8007afe:	2200      	movs	r2, #0
 8007b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	1e3b      	subs	r3, r7, #0
 8007b06:	bfaf      	iteee	ge
 8007b08:	2300      	movge	r3, #0
 8007b0a:	2201      	movlt	r2, #1
 8007b0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b10:	9303      	strlt	r3, [sp, #12]
 8007b12:	bfac      	ite	ge
 8007b14:	f8c8 3000 	strge.w	r3, [r8]
 8007b18:	f8c8 2000 	strlt.w	r2, [r8]
 8007b1c:	4bae      	ldr	r3, [pc, #696]	; (8007dd8 <_dtoa_r+0x318>)
 8007b1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b22:	ea33 0308 	bics.w	r3, r3, r8
 8007b26:	d11b      	bne.n	8007b60 <_dtoa_r+0xa0>
 8007b28:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	9b02      	ldr	r3, [sp, #8]
 8007b32:	b923      	cbnz	r3, 8007b3e <_dtoa_r+0x7e>
 8007b34:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	f000 8545 	beq.w	80085c8 <_dtoa_r+0xb08>
 8007b3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b40:	b953      	cbnz	r3, 8007b58 <_dtoa_r+0x98>
 8007b42:	4ba6      	ldr	r3, [pc, #664]	; (8007ddc <_dtoa_r+0x31c>)
 8007b44:	e021      	b.n	8007b8a <_dtoa_r+0xca>
 8007b46:	4ba6      	ldr	r3, [pc, #664]	; (8007de0 <_dtoa_r+0x320>)
 8007b48:	9306      	str	r3, [sp, #24]
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	9806      	ldr	r0, [sp, #24]
 8007b52:	b015      	add	sp, #84	; 0x54
 8007b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b58:	4ba0      	ldr	r3, [pc, #640]	; (8007ddc <_dtoa_r+0x31c>)
 8007b5a:	9306      	str	r3, [sp, #24]
 8007b5c:	3303      	adds	r3, #3
 8007b5e:	e7f5      	b.n	8007b4c <_dtoa_r+0x8c>
 8007b60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b64:	2200      	movs	r2, #0
 8007b66:	2300      	movs	r3, #0
 8007b68:	4630      	mov	r0, r6
 8007b6a:	4639      	mov	r1, r7
 8007b6c:	f7f8 ff1c 	bl	80009a8 <__aeabi_dcmpeq>
 8007b70:	4682      	mov	sl, r0
 8007b72:	b160      	cbz	r0, 8007b8e <_dtoa_r+0xce>
 8007b74:	2301      	movs	r3, #1
 8007b76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 8520 	beq.w	80085c2 <_dtoa_r+0xb02>
 8007b82:	4b98      	ldr	r3, [pc, #608]	; (8007de4 <_dtoa_r+0x324>)
 8007b84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	9306      	str	r3, [sp, #24]
 8007b8c:	e7e0      	b.n	8007b50 <_dtoa_r+0x90>
 8007b8e:	ab12      	add	r3, sp, #72	; 0x48
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	ab13      	add	r3, sp, #76	; 0x4c
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	4632      	mov	r2, r6
 8007b98:	463b      	mov	r3, r7
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f000 fff4 	bl	8008b88 <__d2b>
 8007ba0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007ba4:	4683      	mov	fp, r0
 8007ba6:	2d00      	cmp	r5, #0
 8007ba8:	d07d      	beq.n	8007ca6 <_dtoa_r+0x1e6>
 8007baa:	46b0      	mov	r8, r6
 8007bac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007bb0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007bb4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007bb8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bbc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	4b89      	ldr	r3, [pc, #548]	; (8007de8 <_dtoa_r+0x328>)
 8007bc4:	4640      	mov	r0, r8
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	f7f8 face 	bl	8000168 <__aeabi_dsub>
 8007bcc:	a37c      	add	r3, pc, #496	; (adr r3, 8007dc0 <_dtoa_r+0x300>)
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	f7f8 fc81 	bl	80004d8 <__aeabi_dmul>
 8007bd6:	a37c      	add	r3, pc, #496	; (adr r3, 8007dc8 <_dtoa_r+0x308>)
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	f7f8 fac6 	bl	800016c <__adddf3>
 8007be0:	4606      	mov	r6, r0
 8007be2:	4628      	mov	r0, r5
 8007be4:	460f      	mov	r7, r1
 8007be6:	f7f8 fc0d 	bl	8000404 <__aeabi_i2d>
 8007bea:	a379      	add	r3, pc, #484	; (adr r3, 8007dd0 <_dtoa_r+0x310>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 fc72 	bl	80004d8 <__aeabi_dmul>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	f7f8 fab6 	bl	800016c <__adddf3>
 8007c00:	4606      	mov	r6, r0
 8007c02:	460f      	mov	r7, r1
 8007c04:	f7f8 ff18 	bl	8000a38 <__aeabi_d2iz>
 8007c08:	2200      	movs	r2, #0
 8007c0a:	4682      	mov	sl, r0
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4630      	mov	r0, r6
 8007c10:	4639      	mov	r1, r7
 8007c12:	f7f8 fed3 	bl	80009bc <__aeabi_dcmplt>
 8007c16:	b148      	cbz	r0, 8007c2c <_dtoa_r+0x16c>
 8007c18:	4650      	mov	r0, sl
 8007c1a:	f7f8 fbf3 	bl	8000404 <__aeabi_i2d>
 8007c1e:	4632      	mov	r2, r6
 8007c20:	463b      	mov	r3, r7
 8007c22:	f7f8 fec1 	bl	80009a8 <__aeabi_dcmpeq>
 8007c26:	b908      	cbnz	r0, 8007c2c <_dtoa_r+0x16c>
 8007c28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c2c:	f1ba 0f16 	cmp.w	sl, #22
 8007c30:	d85a      	bhi.n	8007ce8 <_dtoa_r+0x228>
 8007c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c36:	496d      	ldr	r1, [pc, #436]	; (8007dec <_dtoa_r+0x32c>)
 8007c38:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c40:	f7f8 feda 	bl	80009f8 <__aeabi_dcmpgt>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d051      	beq.n	8007cec <_dtoa_r+0x22c>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c4e:	930d      	str	r3, [sp, #52]	; 0x34
 8007c50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c52:	1b5d      	subs	r5, r3, r5
 8007c54:	1e6b      	subs	r3, r5, #1
 8007c56:	9307      	str	r3, [sp, #28]
 8007c58:	bf43      	ittte	mi
 8007c5a:	2300      	movmi	r3, #0
 8007c5c:	f1c5 0901 	rsbmi	r9, r5, #1
 8007c60:	9307      	strmi	r3, [sp, #28]
 8007c62:	f04f 0900 	movpl.w	r9, #0
 8007c66:	f1ba 0f00 	cmp.w	sl, #0
 8007c6a:	db41      	blt.n	8007cf0 <_dtoa_r+0x230>
 8007c6c:	9b07      	ldr	r3, [sp, #28]
 8007c6e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007c72:	4453      	add	r3, sl
 8007c74:	9307      	str	r3, [sp, #28]
 8007c76:	2300      	movs	r3, #0
 8007c78:	9308      	str	r3, [sp, #32]
 8007c7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c7c:	2b09      	cmp	r3, #9
 8007c7e:	f200 808f 	bhi.w	8007da0 <_dtoa_r+0x2e0>
 8007c82:	2b05      	cmp	r3, #5
 8007c84:	bfc4      	itt	gt
 8007c86:	3b04      	subgt	r3, #4
 8007c88:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007c8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c8c:	bfc8      	it	gt
 8007c8e:	2500      	movgt	r5, #0
 8007c90:	f1a3 0302 	sub.w	r3, r3, #2
 8007c94:	bfd8      	it	le
 8007c96:	2501      	movle	r5, #1
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	f200 808d 	bhi.w	8007db8 <_dtoa_r+0x2f8>
 8007c9e:	e8df f003 	tbb	[pc, r3]
 8007ca2:	7d7b      	.short	0x7d7b
 8007ca4:	6f2f      	.short	0x6f2f
 8007ca6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007caa:	441d      	add	r5, r3
 8007cac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007cb0:	2820      	cmp	r0, #32
 8007cb2:	dd13      	ble.n	8007cdc <_dtoa_r+0x21c>
 8007cb4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007cb8:	9b02      	ldr	r3, [sp, #8]
 8007cba:	fa08 f800 	lsl.w	r8, r8, r0
 8007cbe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007cc2:	fa23 f000 	lsr.w	r0, r3, r0
 8007cc6:	ea48 0000 	orr.w	r0, r8, r0
 8007cca:	f7f8 fb8b 	bl	80003e4 <__aeabi_ui2d>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	4680      	mov	r8, r0
 8007cd2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007cd6:	3d01      	subs	r5, #1
 8007cd8:	9310      	str	r3, [sp, #64]	; 0x40
 8007cda:	e771      	b.n	8007bc0 <_dtoa_r+0x100>
 8007cdc:	9b02      	ldr	r3, [sp, #8]
 8007cde:	f1c0 0020 	rsb	r0, r0, #32
 8007ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ce6:	e7f0      	b.n	8007cca <_dtoa_r+0x20a>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e7b0      	b.n	8007c4e <_dtoa_r+0x18e>
 8007cec:	900d      	str	r0, [sp, #52]	; 0x34
 8007cee:	e7af      	b.n	8007c50 <_dtoa_r+0x190>
 8007cf0:	f1ca 0300 	rsb	r3, sl, #0
 8007cf4:	9308      	str	r3, [sp, #32]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	eba9 090a 	sub.w	r9, r9, sl
 8007cfc:	930c      	str	r3, [sp, #48]	; 0x30
 8007cfe:	e7bc      	b.n	8007c7a <_dtoa_r+0x1ba>
 8007d00:	2301      	movs	r3, #1
 8007d02:	9309      	str	r3, [sp, #36]	; 0x24
 8007d04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	dd74      	ble.n	8007df4 <_dtoa_r+0x334>
 8007d0a:	4698      	mov	r8, r3
 8007d0c:	9304      	str	r3, [sp, #16]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007d12:	6072      	str	r2, [r6, #4]
 8007d14:	2204      	movs	r2, #4
 8007d16:	f102 0014 	add.w	r0, r2, #20
 8007d1a:	4298      	cmp	r0, r3
 8007d1c:	6871      	ldr	r1, [r6, #4]
 8007d1e:	d96e      	bls.n	8007dfe <_dtoa_r+0x33e>
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 fca5 	bl	8008670 <_Balloc>
 8007d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d28:	6030      	str	r0, [r6, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f1b8 0f0e 	cmp.w	r8, #14
 8007d30:	9306      	str	r3, [sp, #24]
 8007d32:	f200 80ed 	bhi.w	8007f10 <_dtoa_r+0x450>
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	f000 80ea 	beq.w	8007f10 <_dtoa_r+0x450>
 8007d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d40:	f1ba 0f00 	cmp.w	sl, #0
 8007d44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007d48:	dd77      	ble.n	8007e3a <_dtoa_r+0x37a>
 8007d4a:	4a28      	ldr	r2, [pc, #160]	; (8007dec <_dtoa_r+0x32c>)
 8007d4c:	f00a 030f 	and.w	r3, sl, #15
 8007d50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007d54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d58:	06f0      	lsls	r0, r6, #27
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007d62:	d568      	bpl.n	8007e36 <_dtoa_r+0x376>
 8007d64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007d68:	4b21      	ldr	r3, [pc, #132]	; (8007df0 <_dtoa_r+0x330>)
 8007d6a:	2503      	movs	r5, #3
 8007d6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d70:	f7f8 fcdc 	bl	800072c <__aeabi_ddiv>
 8007d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d78:	f006 060f 	and.w	r6, r6, #15
 8007d7c:	4f1c      	ldr	r7, [pc, #112]	; (8007df0 <_dtoa_r+0x330>)
 8007d7e:	e04f      	b.n	8007e20 <_dtoa_r+0x360>
 8007d80:	2301      	movs	r3, #1
 8007d82:	9309      	str	r3, [sp, #36]	; 0x24
 8007d84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d86:	4453      	add	r3, sl
 8007d88:	f103 0801 	add.w	r8, r3, #1
 8007d8c:	9304      	str	r3, [sp, #16]
 8007d8e:	4643      	mov	r3, r8
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	bfb8      	it	lt
 8007d94:	2301      	movlt	r3, #1
 8007d96:	e7ba      	b.n	8007d0e <_dtoa_r+0x24e>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	e7b2      	b.n	8007d02 <_dtoa_r+0x242>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e7f0      	b.n	8007d82 <_dtoa_r+0x2c2>
 8007da0:	2501      	movs	r5, #1
 8007da2:	2300      	movs	r3, #0
 8007da4:	9509      	str	r5, [sp, #36]	; 0x24
 8007da6:	931e      	str	r3, [sp, #120]	; 0x78
 8007da8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dac:	2200      	movs	r2, #0
 8007dae:	9304      	str	r3, [sp, #16]
 8007db0:	4698      	mov	r8, r3
 8007db2:	2312      	movs	r3, #18
 8007db4:	921f      	str	r2, [sp, #124]	; 0x7c
 8007db6:	e7aa      	b.n	8007d0e <_dtoa_r+0x24e>
 8007db8:	2301      	movs	r3, #1
 8007dba:	9309      	str	r3, [sp, #36]	; 0x24
 8007dbc:	e7f4      	b.n	8007da8 <_dtoa_r+0x2e8>
 8007dbe:	bf00      	nop
 8007dc0:	636f4361 	.word	0x636f4361
 8007dc4:	3fd287a7 	.word	0x3fd287a7
 8007dc8:	8b60c8b3 	.word	0x8b60c8b3
 8007dcc:	3fc68a28 	.word	0x3fc68a28
 8007dd0:	509f79fb 	.word	0x509f79fb
 8007dd4:	3fd34413 	.word	0x3fd34413
 8007dd8:	7ff00000 	.word	0x7ff00000
 8007ddc:	0800a0bd 	.word	0x0800a0bd
 8007de0:	0800a0b4 	.word	0x0800a0b4
 8007de4:	0800a091 	.word	0x0800a091
 8007de8:	3ff80000 	.word	0x3ff80000
 8007dec:	0800a0f0 	.word	0x0800a0f0
 8007df0:	0800a0c8 	.word	0x0800a0c8
 8007df4:	2301      	movs	r3, #1
 8007df6:	9304      	str	r3, [sp, #16]
 8007df8:	4698      	mov	r8, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	e7da      	b.n	8007db4 <_dtoa_r+0x2f4>
 8007dfe:	3101      	adds	r1, #1
 8007e00:	6071      	str	r1, [r6, #4]
 8007e02:	0052      	lsls	r2, r2, #1
 8007e04:	e787      	b.n	8007d16 <_dtoa_r+0x256>
 8007e06:	07f1      	lsls	r1, r6, #31
 8007e08:	d508      	bpl.n	8007e1c <_dtoa_r+0x35c>
 8007e0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e12:	f7f8 fb61 	bl	80004d8 <__aeabi_dmul>
 8007e16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e1a:	3501      	adds	r5, #1
 8007e1c:	1076      	asrs	r6, r6, #1
 8007e1e:	3708      	adds	r7, #8
 8007e20:	2e00      	cmp	r6, #0
 8007e22:	d1f0      	bne.n	8007e06 <_dtoa_r+0x346>
 8007e24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e2c:	f7f8 fc7e 	bl	800072c <__aeabi_ddiv>
 8007e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e34:	e01b      	b.n	8007e6e <_dtoa_r+0x3ae>
 8007e36:	2502      	movs	r5, #2
 8007e38:	e7a0      	b.n	8007d7c <_dtoa_r+0x2bc>
 8007e3a:	f000 80a4 	beq.w	8007f86 <_dtoa_r+0x4c6>
 8007e3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e42:	f1ca 0600 	rsb	r6, sl, #0
 8007e46:	4ba0      	ldr	r3, [pc, #640]	; (80080c8 <_dtoa_r+0x608>)
 8007e48:	f006 020f 	and.w	r2, r6, #15
 8007e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e54:	f7f8 fb40 	bl	80004d8 <__aeabi_dmul>
 8007e58:	2502      	movs	r5, #2
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e60:	4f9a      	ldr	r7, [pc, #616]	; (80080cc <_dtoa_r+0x60c>)
 8007e62:	1136      	asrs	r6, r6, #4
 8007e64:	2e00      	cmp	r6, #0
 8007e66:	f040 8083 	bne.w	8007f70 <_dtoa_r+0x4b0>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e0      	bne.n	8007e30 <_dtoa_r+0x370>
 8007e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 808a 	beq.w	8007f8a <_dtoa_r+0x4ca>
 8007e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007e7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e82:	2200      	movs	r2, #0
 8007e84:	4b92      	ldr	r3, [pc, #584]	; (80080d0 <_dtoa_r+0x610>)
 8007e86:	f7f8 fd99 	bl	80009bc <__aeabi_dcmplt>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d07d      	beq.n	8007f8a <_dtoa_r+0x4ca>
 8007e8e:	f1b8 0f00 	cmp.w	r8, #0
 8007e92:	d07a      	beq.n	8007f8a <_dtoa_r+0x4ca>
 8007e94:	9b04      	ldr	r3, [sp, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	dd36      	ble.n	8007f08 <_dtoa_r+0x448>
 8007e9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4b8c      	ldr	r3, [pc, #560]	; (80080d4 <_dtoa_r+0x614>)
 8007ea2:	f7f8 fb19 	bl	80004d8 <__aeabi_dmul>
 8007ea6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eaa:	9e04      	ldr	r6, [sp, #16]
 8007eac:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007eb0:	3501      	adds	r5, #1
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	f7f8 faa6 	bl	8000404 <__aeabi_i2d>
 8007eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ebc:	f7f8 fb0c 	bl	80004d8 <__aeabi_dmul>
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	4b85      	ldr	r3, [pc, #532]	; (80080d8 <_dtoa_r+0x618>)
 8007ec4:	f7f8 f952 	bl	800016c <__adddf3>
 8007ec8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007ecc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ed0:	950b      	str	r5, [sp, #44]	; 0x2c
 8007ed2:	2e00      	cmp	r6, #0
 8007ed4:	d15c      	bne.n	8007f90 <_dtoa_r+0x4d0>
 8007ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eda:	2200      	movs	r2, #0
 8007edc:	4b7f      	ldr	r3, [pc, #508]	; (80080dc <_dtoa_r+0x61c>)
 8007ede:	f7f8 f943 	bl	8000168 <__aeabi_dsub>
 8007ee2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ee4:	462b      	mov	r3, r5
 8007ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eea:	f7f8 fd85 	bl	80009f8 <__aeabi_dcmpgt>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	f040 8281 	bne.w	80083f6 <_dtoa_r+0x936>
 8007ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007efa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007efe:	f7f8 fd5d 	bl	80009bc <__aeabi_dcmplt>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	f040 8275 	bne.w	80083f2 <_dtoa_r+0x932>
 8007f08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007f0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f2c0 814b 	blt.w	80081ae <_dtoa_r+0x6ee>
 8007f18:	f1ba 0f0e 	cmp.w	sl, #14
 8007f1c:	f300 8147 	bgt.w	80081ae <_dtoa_r+0x6ee>
 8007f20:	4b69      	ldr	r3, [pc, #420]	; (80080c8 <_dtoa_r+0x608>)
 8007f22:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f280 80d7 	bge.w	80080e4 <_dtoa_r+0x624>
 8007f36:	f1b8 0f00 	cmp.w	r8, #0
 8007f3a:	f300 80d3 	bgt.w	80080e4 <_dtoa_r+0x624>
 8007f3e:	f040 8257 	bne.w	80083f0 <_dtoa_r+0x930>
 8007f42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f46:	2200      	movs	r2, #0
 8007f48:	4b64      	ldr	r3, [pc, #400]	; (80080dc <_dtoa_r+0x61c>)
 8007f4a:	f7f8 fac5 	bl	80004d8 <__aeabi_dmul>
 8007f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f52:	f7f8 fd47 	bl	80009e4 <__aeabi_dcmpge>
 8007f56:	4646      	mov	r6, r8
 8007f58:	4647      	mov	r7, r8
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	f040 822d 	bne.w	80083ba <_dtoa_r+0x8fa>
 8007f60:	9b06      	ldr	r3, [sp, #24]
 8007f62:	9a06      	ldr	r2, [sp, #24]
 8007f64:	1c5d      	adds	r5, r3, #1
 8007f66:	2331      	movs	r3, #49	; 0x31
 8007f68:	f10a 0a01 	add.w	sl, sl, #1
 8007f6c:	7013      	strb	r3, [r2, #0]
 8007f6e:	e228      	b.n	80083c2 <_dtoa_r+0x902>
 8007f70:	07f2      	lsls	r2, r6, #31
 8007f72:	d505      	bpl.n	8007f80 <_dtoa_r+0x4c0>
 8007f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f78:	f7f8 faae 	bl	80004d8 <__aeabi_dmul>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	3501      	adds	r5, #1
 8007f80:	1076      	asrs	r6, r6, #1
 8007f82:	3708      	adds	r7, #8
 8007f84:	e76e      	b.n	8007e64 <_dtoa_r+0x3a4>
 8007f86:	2502      	movs	r5, #2
 8007f88:	e771      	b.n	8007e6e <_dtoa_r+0x3ae>
 8007f8a:	4657      	mov	r7, sl
 8007f8c:	4646      	mov	r6, r8
 8007f8e:	e790      	b.n	8007eb2 <_dtoa_r+0x3f2>
 8007f90:	4b4d      	ldr	r3, [pc, #308]	; (80080c8 <_dtoa_r+0x608>)
 8007f92:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f96:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d048      	beq.n	8008032 <_dtoa_r+0x572>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	494e      	ldr	r1, [pc, #312]	; (80080e0 <_dtoa_r+0x620>)
 8007fa8:	f7f8 fbc0 	bl	800072c <__aeabi_ddiv>
 8007fac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fb0:	f7f8 f8da 	bl	8000168 <__aeabi_dsub>
 8007fb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007fb8:	9d06      	ldr	r5, [sp, #24]
 8007fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fbe:	f7f8 fd3b 	bl	8000a38 <__aeabi_d2iz>
 8007fc2:	9011      	str	r0, [sp, #68]	; 0x44
 8007fc4:	f7f8 fa1e 	bl	8000404 <__aeabi_i2d>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd0:	f7f8 f8ca 	bl	8000168 <__aeabi_dsub>
 8007fd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fda:	3330      	adds	r3, #48	; 0x30
 8007fdc:	f805 3b01 	strb.w	r3, [r5], #1
 8007fe0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fe4:	f7f8 fcea 	bl	80009bc <__aeabi_dcmplt>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d163      	bne.n	80080b4 <_dtoa_r+0x5f4>
 8007fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	4937      	ldr	r1, [pc, #220]	; (80080d0 <_dtoa_r+0x610>)
 8007ff4:	f7f8 f8b8 	bl	8000168 <__aeabi_dsub>
 8007ff8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ffc:	f7f8 fcde 	bl	80009bc <__aeabi_dcmplt>
 8008000:	2800      	cmp	r0, #0
 8008002:	f040 80b5 	bne.w	8008170 <_dtoa_r+0x6b0>
 8008006:	9b06      	ldr	r3, [sp, #24]
 8008008:	1aeb      	subs	r3, r5, r3
 800800a:	429e      	cmp	r6, r3
 800800c:	f77f af7c 	ble.w	8007f08 <_dtoa_r+0x448>
 8008010:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008014:	2200      	movs	r2, #0
 8008016:	4b2f      	ldr	r3, [pc, #188]	; (80080d4 <_dtoa_r+0x614>)
 8008018:	f7f8 fa5e 	bl	80004d8 <__aeabi_dmul>
 800801c:	2200      	movs	r2, #0
 800801e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008026:	4b2b      	ldr	r3, [pc, #172]	; (80080d4 <_dtoa_r+0x614>)
 8008028:	f7f8 fa56 	bl	80004d8 <__aeabi_dmul>
 800802c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008030:	e7c3      	b.n	8007fba <_dtoa_r+0x4fa>
 8008032:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008036:	f7f8 fa4f 	bl	80004d8 <__aeabi_dmul>
 800803a:	9b06      	ldr	r3, [sp, #24]
 800803c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008040:	199d      	adds	r5, r3, r6
 8008042:	461e      	mov	r6, r3
 8008044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008048:	f7f8 fcf6 	bl	8000a38 <__aeabi_d2iz>
 800804c:	9011      	str	r0, [sp, #68]	; 0x44
 800804e:	f7f8 f9d9 	bl	8000404 <__aeabi_i2d>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800805a:	f7f8 f885 	bl	8000168 <__aeabi_dsub>
 800805e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008064:	3330      	adds	r3, #48	; 0x30
 8008066:	f806 3b01 	strb.w	r3, [r6], #1
 800806a:	42ae      	cmp	r6, r5
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	d124      	bne.n	80080bc <_dtoa_r+0x5fc>
 8008072:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008076:	4b1a      	ldr	r3, [pc, #104]	; (80080e0 <_dtoa_r+0x620>)
 8008078:	f7f8 f878 	bl	800016c <__adddf3>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008084:	f7f8 fcb8 	bl	80009f8 <__aeabi_dcmpgt>
 8008088:	2800      	cmp	r0, #0
 800808a:	d171      	bne.n	8008170 <_dtoa_r+0x6b0>
 800808c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008090:	2000      	movs	r0, #0
 8008092:	4913      	ldr	r1, [pc, #76]	; (80080e0 <_dtoa_r+0x620>)
 8008094:	f7f8 f868 	bl	8000168 <__aeabi_dsub>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080a0:	f7f8 fc8c 	bl	80009bc <__aeabi_dcmplt>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	f43f af2f 	beq.w	8007f08 <_dtoa_r+0x448>
 80080aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080ae:	1e6a      	subs	r2, r5, #1
 80080b0:	2b30      	cmp	r3, #48	; 0x30
 80080b2:	d001      	beq.n	80080b8 <_dtoa_r+0x5f8>
 80080b4:	46ba      	mov	sl, r7
 80080b6:	e04a      	b.n	800814e <_dtoa_r+0x68e>
 80080b8:	4615      	mov	r5, r2
 80080ba:	e7f6      	b.n	80080aa <_dtoa_r+0x5ea>
 80080bc:	4b05      	ldr	r3, [pc, #20]	; (80080d4 <_dtoa_r+0x614>)
 80080be:	f7f8 fa0b 	bl	80004d8 <__aeabi_dmul>
 80080c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080c6:	e7bd      	b.n	8008044 <_dtoa_r+0x584>
 80080c8:	0800a0f0 	.word	0x0800a0f0
 80080cc:	0800a0c8 	.word	0x0800a0c8
 80080d0:	3ff00000 	.word	0x3ff00000
 80080d4:	40240000 	.word	0x40240000
 80080d8:	401c0000 	.word	0x401c0000
 80080dc:	40140000 	.word	0x40140000
 80080e0:	3fe00000 	.word	0x3fe00000
 80080e4:	9d06      	ldr	r5, [sp, #24]
 80080e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ee:	4630      	mov	r0, r6
 80080f0:	4639      	mov	r1, r7
 80080f2:	f7f8 fb1b 	bl	800072c <__aeabi_ddiv>
 80080f6:	f7f8 fc9f 	bl	8000a38 <__aeabi_d2iz>
 80080fa:	4681      	mov	r9, r0
 80080fc:	f7f8 f982 	bl	8000404 <__aeabi_i2d>
 8008100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008104:	f7f8 f9e8 	bl	80004d8 <__aeabi_dmul>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4630      	mov	r0, r6
 800810e:	4639      	mov	r1, r7
 8008110:	f7f8 f82a 	bl	8000168 <__aeabi_dsub>
 8008114:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008118:	f805 6b01 	strb.w	r6, [r5], #1
 800811c:	9e06      	ldr	r6, [sp, #24]
 800811e:	4602      	mov	r2, r0
 8008120:	1bae      	subs	r6, r5, r6
 8008122:	45b0      	cmp	r8, r6
 8008124:	460b      	mov	r3, r1
 8008126:	d135      	bne.n	8008194 <_dtoa_r+0x6d4>
 8008128:	f7f8 f820 	bl	800016c <__adddf3>
 800812c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008130:	4606      	mov	r6, r0
 8008132:	460f      	mov	r7, r1
 8008134:	f7f8 fc60 	bl	80009f8 <__aeabi_dcmpgt>
 8008138:	b9c8      	cbnz	r0, 800816e <_dtoa_r+0x6ae>
 800813a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800813e:	4630      	mov	r0, r6
 8008140:	4639      	mov	r1, r7
 8008142:	f7f8 fc31 	bl	80009a8 <__aeabi_dcmpeq>
 8008146:	b110      	cbz	r0, 800814e <_dtoa_r+0x68e>
 8008148:	f019 0f01 	tst.w	r9, #1
 800814c:	d10f      	bne.n	800816e <_dtoa_r+0x6ae>
 800814e:	4659      	mov	r1, fp
 8008150:	4620      	mov	r0, r4
 8008152:	f000 fac1 	bl	80086d8 <_Bfree>
 8008156:	2300      	movs	r3, #0
 8008158:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800815a:	702b      	strb	r3, [r5, #0]
 800815c:	f10a 0301 	add.w	r3, sl, #1
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008164:	2b00      	cmp	r3, #0
 8008166:	f43f acf3 	beq.w	8007b50 <_dtoa_r+0x90>
 800816a:	601d      	str	r5, [r3, #0]
 800816c:	e4f0      	b.n	8007b50 <_dtoa_r+0x90>
 800816e:	4657      	mov	r7, sl
 8008170:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008174:	1e6b      	subs	r3, r5, #1
 8008176:	2a39      	cmp	r2, #57	; 0x39
 8008178:	d106      	bne.n	8008188 <_dtoa_r+0x6c8>
 800817a:	9a06      	ldr	r2, [sp, #24]
 800817c:	429a      	cmp	r2, r3
 800817e:	d107      	bne.n	8008190 <_dtoa_r+0x6d0>
 8008180:	2330      	movs	r3, #48	; 0x30
 8008182:	7013      	strb	r3, [r2, #0]
 8008184:	4613      	mov	r3, r2
 8008186:	3701      	adds	r7, #1
 8008188:	781a      	ldrb	r2, [r3, #0]
 800818a:	3201      	adds	r2, #1
 800818c:	701a      	strb	r2, [r3, #0]
 800818e:	e791      	b.n	80080b4 <_dtoa_r+0x5f4>
 8008190:	461d      	mov	r5, r3
 8008192:	e7ed      	b.n	8008170 <_dtoa_r+0x6b0>
 8008194:	2200      	movs	r2, #0
 8008196:	4b99      	ldr	r3, [pc, #612]	; (80083fc <_dtoa_r+0x93c>)
 8008198:	f7f8 f99e 	bl	80004d8 <__aeabi_dmul>
 800819c:	2200      	movs	r2, #0
 800819e:	2300      	movs	r3, #0
 80081a0:	4606      	mov	r6, r0
 80081a2:	460f      	mov	r7, r1
 80081a4:	f7f8 fc00 	bl	80009a8 <__aeabi_dcmpeq>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d09e      	beq.n	80080ea <_dtoa_r+0x62a>
 80081ac:	e7cf      	b.n	800814e <_dtoa_r+0x68e>
 80081ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b0:	2a00      	cmp	r2, #0
 80081b2:	f000 8088 	beq.w	80082c6 <_dtoa_r+0x806>
 80081b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80081b8:	2a01      	cmp	r2, #1
 80081ba:	dc6d      	bgt.n	8008298 <_dtoa_r+0x7d8>
 80081bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081be:	2a00      	cmp	r2, #0
 80081c0:	d066      	beq.n	8008290 <_dtoa_r+0x7d0>
 80081c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081c6:	464d      	mov	r5, r9
 80081c8:	9e08      	ldr	r6, [sp, #32]
 80081ca:	9a07      	ldr	r2, [sp, #28]
 80081cc:	2101      	movs	r1, #1
 80081ce:	441a      	add	r2, r3
 80081d0:	4620      	mov	r0, r4
 80081d2:	4499      	add	r9, r3
 80081d4:	9207      	str	r2, [sp, #28]
 80081d6:	f000 fb1f 	bl	8008818 <__i2b>
 80081da:	4607      	mov	r7, r0
 80081dc:	2d00      	cmp	r5, #0
 80081de:	dd0b      	ble.n	80081f8 <_dtoa_r+0x738>
 80081e0:	9b07      	ldr	r3, [sp, #28]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dd08      	ble.n	80081f8 <_dtoa_r+0x738>
 80081e6:	42ab      	cmp	r3, r5
 80081e8:	bfa8      	it	ge
 80081ea:	462b      	movge	r3, r5
 80081ec:	9a07      	ldr	r2, [sp, #28]
 80081ee:	eba9 0903 	sub.w	r9, r9, r3
 80081f2:	1aed      	subs	r5, r5, r3
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	9307      	str	r3, [sp, #28]
 80081f8:	9b08      	ldr	r3, [sp, #32]
 80081fa:	b1eb      	cbz	r3, 8008238 <_dtoa_r+0x778>
 80081fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d065      	beq.n	80082ce <_dtoa_r+0x80e>
 8008202:	b18e      	cbz	r6, 8008228 <_dtoa_r+0x768>
 8008204:	4639      	mov	r1, r7
 8008206:	4632      	mov	r2, r6
 8008208:	4620      	mov	r0, r4
 800820a:	f000 fba3 	bl	8008954 <__pow5mult>
 800820e:	465a      	mov	r2, fp
 8008210:	4601      	mov	r1, r0
 8008212:	4607      	mov	r7, r0
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fb08 	bl	800882a <__multiply>
 800821a:	4659      	mov	r1, fp
 800821c:	900a      	str	r0, [sp, #40]	; 0x28
 800821e:	4620      	mov	r0, r4
 8008220:	f000 fa5a 	bl	80086d8 <_Bfree>
 8008224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008226:	469b      	mov	fp, r3
 8008228:	9b08      	ldr	r3, [sp, #32]
 800822a:	1b9a      	subs	r2, r3, r6
 800822c:	d004      	beq.n	8008238 <_dtoa_r+0x778>
 800822e:	4659      	mov	r1, fp
 8008230:	4620      	mov	r0, r4
 8008232:	f000 fb8f 	bl	8008954 <__pow5mult>
 8008236:	4683      	mov	fp, r0
 8008238:	2101      	movs	r1, #1
 800823a:	4620      	mov	r0, r4
 800823c:	f000 faec 	bl	8008818 <__i2b>
 8008240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008242:	4606      	mov	r6, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 81c6 	beq.w	80085d6 <_dtoa_r+0xb16>
 800824a:	461a      	mov	r2, r3
 800824c:	4601      	mov	r1, r0
 800824e:	4620      	mov	r0, r4
 8008250:	f000 fb80 	bl	8008954 <__pow5mult>
 8008254:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008256:	4606      	mov	r6, r0
 8008258:	2b01      	cmp	r3, #1
 800825a:	dc3e      	bgt.n	80082da <_dtoa_r+0x81a>
 800825c:	9b02      	ldr	r3, [sp, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d137      	bne.n	80082d2 <_dtoa_r+0x812>
 8008262:	9b03      	ldr	r3, [sp, #12]
 8008264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008268:	2b00      	cmp	r3, #0
 800826a:	d134      	bne.n	80082d6 <_dtoa_r+0x816>
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008272:	0d1b      	lsrs	r3, r3, #20
 8008274:	051b      	lsls	r3, r3, #20
 8008276:	b12b      	cbz	r3, 8008284 <_dtoa_r+0x7c4>
 8008278:	9b07      	ldr	r3, [sp, #28]
 800827a:	f109 0901 	add.w	r9, r9, #1
 800827e:	3301      	adds	r3, #1
 8008280:	9307      	str	r3, [sp, #28]
 8008282:	2301      	movs	r3, #1
 8008284:	9308      	str	r3, [sp, #32]
 8008286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008288:	2b00      	cmp	r3, #0
 800828a:	d128      	bne.n	80082de <_dtoa_r+0x81e>
 800828c:	2001      	movs	r0, #1
 800828e:	e02e      	b.n	80082ee <_dtoa_r+0x82e>
 8008290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008292:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008296:	e796      	b.n	80081c6 <_dtoa_r+0x706>
 8008298:	9b08      	ldr	r3, [sp, #32]
 800829a:	f108 36ff 	add.w	r6, r8, #4294967295
 800829e:	42b3      	cmp	r3, r6
 80082a0:	bfb7      	itett	lt
 80082a2:	9b08      	ldrlt	r3, [sp, #32]
 80082a4:	1b9e      	subge	r6, r3, r6
 80082a6:	1af2      	sublt	r2, r6, r3
 80082a8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80082aa:	bfbf      	itttt	lt
 80082ac:	9608      	strlt	r6, [sp, #32]
 80082ae:	189b      	addlt	r3, r3, r2
 80082b0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80082b2:	2600      	movlt	r6, #0
 80082b4:	f1b8 0f00 	cmp.w	r8, #0
 80082b8:	bfb9      	ittee	lt
 80082ba:	eba9 0508 	sublt.w	r5, r9, r8
 80082be:	2300      	movlt	r3, #0
 80082c0:	464d      	movge	r5, r9
 80082c2:	4643      	movge	r3, r8
 80082c4:	e781      	b.n	80081ca <_dtoa_r+0x70a>
 80082c6:	9e08      	ldr	r6, [sp, #32]
 80082c8:	464d      	mov	r5, r9
 80082ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80082cc:	e786      	b.n	80081dc <_dtoa_r+0x71c>
 80082ce:	9a08      	ldr	r2, [sp, #32]
 80082d0:	e7ad      	b.n	800822e <_dtoa_r+0x76e>
 80082d2:	2300      	movs	r3, #0
 80082d4:	e7d6      	b.n	8008284 <_dtoa_r+0x7c4>
 80082d6:	9b02      	ldr	r3, [sp, #8]
 80082d8:	e7d4      	b.n	8008284 <_dtoa_r+0x7c4>
 80082da:	2300      	movs	r3, #0
 80082dc:	9308      	str	r3, [sp, #32]
 80082de:	6933      	ldr	r3, [r6, #16]
 80082e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082e4:	6918      	ldr	r0, [r3, #16]
 80082e6:	f000 fa49 	bl	800877c <__hi0bits>
 80082ea:	f1c0 0020 	rsb	r0, r0, #32
 80082ee:	9b07      	ldr	r3, [sp, #28]
 80082f0:	4418      	add	r0, r3
 80082f2:	f010 001f 	ands.w	r0, r0, #31
 80082f6:	d047      	beq.n	8008388 <_dtoa_r+0x8c8>
 80082f8:	f1c0 0320 	rsb	r3, r0, #32
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	dd3b      	ble.n	8008378 <_dtoa_r+0x8b8>
 8008300:	9b07      	ldr	r3, [sp, #28]
 8008302:	f1c0 001c 	rsb	r0, r0, #28
 8008306:	4481      	add	r9, r0
 8008308:	4405      	add	r5, r0
 800830a:	4403      	add	r3, r0
 800830c:	9307      	str	r3, [sp, #28]
 800830e:	f1b9 0f00 	cmp.w	r9, #0
 8008312:	dd05      	ble.n	8008320 <_dtoa_r+0x860>
 8008314:	4659      	mov	r1, fp
 8008316:	464a      	mov	r2, r9
 8008318:	4620      	mov	r0, r4
 800831a:	f000 fb69 	bl	80089f0 <__lshift>
 800831e:	4683      	mov	fp, r0
 8008320:	9b07      	ldr	r3, [sp, #28]
 8008322:	2b00      	cmp	r3, #0
 8008324:	dd05      	ble.n	8008332 <_dtoa_r+0x872>
 8008326:	4631      	mov	r1, r6
 8008328:	461a      	mov	r2, r3
 800832a:	4620      	mov	r0, r4
 800832c:	f000 fb60 	bl	80089f0 <__lshift>
 8008330:	4606      	mov	r6, r0
 8008332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008334:	b353      	cbz	r3, 800838c <_dtoa_r+0x8cc>
 8008336:	4631      	mov	r1, r6
 8008338:	4658      	mov	r0, fp
 800833a:	f000 fbad 	bl	8008a98 <__mcmp>
 800833e:	2800      	cmp	r0, #0
 8008340:	da24      	bge.n	800838c <_dtoa_r+0x8cc>
 8008342:	2300      	movs	r3, #0
 8008344:	4659      	mov	r1, fp
 8008346:	220a      	movs	r2, #10
 8008348:	4620      	mov	r0, r4
 800834a:	f000 f9dc 	bl	8008706 <__multadd>
 800834e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008350:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008354:	4683      	mov	fp, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 8144 	beq.w	80085e4 <_dtoa_r+0xb24>
 800835c:	2300      	movs	r3, #0
 800835e:	4639      	mov	r1, r7
 8008360:	220a      	movs	r2, #10
 8008362:	4620      	mov	r0, r4
 8008364:	f000 f9cf 	bl	8008706 <__multadd>
 8008368:	9b04      	ldr	r3, [sp, #16]
 800836a:	4607      	mov	r7, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	dc4d      	bgt.n	800840c <_dtoa_r+0x94c>
 8008370:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008372:	2b02      	cmp	r3, #2
 8008374:	dd4a      	ble.n	800840c <_dtoa_r+0x94c>
 8008376:	e011      	b.n	800839c <_dtoa_r+0x8dc>
 8008378:	d0c9      	beq.n	800830e <_dtoa_r+0x84e>
 800837a:	9a07      	ldr	r2, [sp, #28]
 800837c:	331c      	adds	r3, #28
 800837e:	441a      	add	r2, r3
 8008380:	4499      	add	r9, r3
 8008382:	441d      	add	r5, r3
 8008384:	4613      	mov	r3, r2
 8008386:	e7c1      	b.n	800830c <_dtoa_r+0x84c>
 8008388:	4603      	mov	r3, r0
 800838a:	e7f6      	b.n	800837a <_dtoa_r+0x8ba>
 800838c:	f1b8 0f00 	cmp.w	r8, #0
 8008390:	dc36      	bgt.n	8008400 <_dtoa_r+0x940>
 8008392:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008394:	2b02      	cmp	r3, #2
 8008396:	dd33      	ble.n	8008400 <_dtoa_r+0x940>
 8008398:	f8cd 8010 	str.w	r8, [sp, #16]
 800839c:	9b04      	ldr	r3, [sp, #16]
 800839e:	b963      	cbnz	r3, 80083ba <_dtoa_r+0x8fa>
 80083a0:	4631      	mov	r1, r6
 80083a2:	2205      	movs	r2, #5
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 f9ae 	bl	8008706 <__multadd>
 80083aa:	4601      	mov	r1, r0
 80083ac:	4606      	mov	r6, r0
 80083ae:	4658      	mov	r0, fp
 80083b0:	f000 fb72 	bl	8008a98 <__mcmp>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	f73f add3 	bgt.w	8007f60 <_dtoa_r+0x4a0>
 80083ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80083bc:	9d06      	ldr	r5, [sp, #24]
 80083be:	ea6f 0a03 	mvn.w	sl, r3
 80083c2:	f04f 0900 	mov.w	r9, #0
 80083c6:	4631      	mov	r1, r6
 80083c8:	4620      	mov	r0, r4
 80083ca:	f000 f985 	bl	80086d8 <_Bfree>
 80083ce:	2f00      	cmp	r7, #0
 80083d0:	f43f aebd 	beq.w	800814e <_dtoa_r+0x68e>
 80083d4:	f1b9 0f00 	cmp.w	r9, #0
 80083d8:	d005      	beq.n	80083e6 <_dtoa_r+0x926>
 80083da:	45b9      	cmp	r9, r7
 80083dc:	d003      	beq.n	80083e6 <_dtoa_r+0x926>
 80083de:	4649      	mov	r1, r9
 80083e0:	4620      	mov	r0, r4
 80083e2:	f000 f979 	bl	80086d8 <_Bfree>
 80083e6:	4639      	mov	r1, r7
 80083e8:	4620      	mov	r0, r4
 80083ea:	f000 f975 	bl	80086d8 <_Bfree>
 80083ee:	e6ae      	b.n	800814e <_dtoa_r+0x68e>
 80083f0:	2600      	movs	r6, #0
 80083f2:	4637      	mov	r7, r6
 80083f4:	e7e1      	b.n	80083ba <_dtoa_r+0x8fa>
 80083f6:	46ba      	mov	sl, r7
 80083f8:	4637      	mov	r7, r6
 80083fa:	e5b1      	b.n	8007f60 <_dtoa_r+0x4a0>
 80083fc:	40240000 	.word	0x40240000
 8008400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008402:	f8cd 8010 	str.w	r8, [sp, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 80f3 	beq.w	80085f2 <_dtoa_r+0xb32>
 800840c:	2d00      	cmp	r5, #0
 800840e:	dd05      	ble.n	800841c <_dtoa_r+0x95c>
 8008410:	4639      	mov	r1, r7
 8008412:	462a      	mov	r2, r5
 8008414:	4620      	mov	r0, r4
 8008416:	f000 faeb 	bl	80089f0 <__lshift>
 800841a:	4607      	mov	r7, r0
 800841c:	9b08      	ldr	r3, [sp, #32]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d04c      	beq.n	80084bc <_dtoa_r+0x9fc>
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	4620      	mov	r0, r4
 8008426:	f000 f923 	bl	8008670 <_Balloc>
 800842a:	4605      	mov	r5, r0
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	f107 010c 	add.w	r1, r7, #12
 8008432:	3202      	adds	r2, #2
 8008434:	0092      	lsls	r2, r2, #2
 8008436:	300c      	adds	r0, #12
 8008438:	f7fe fe32 	bl	80070a0 <memcpy>
 800843c:	2201      	movs	r2, #1
 800843e:	4629      	mov	r1, r5
 8008440:	4620      	mov	r0, r4
 8008442:	f000 fad5 	bl	80089f0 <__lshift>
 8008446:	46b9      	mov	r9, r7
 8008448:	4607      	mov	r7, r0
 800844a:	9b06      	ldr	r3, [sp, #24]
 800844c:	9307      	str	r3, [sp, #28]
 800844e:	9b02      	ldr	r3, [sp, #8]
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	9308      	str	r3, [sp, #32]
 8008456:	4631      	mov	r1, r6
 8008458:	4658      	mov	r0, fp
 800845a:	f7ff faa3 	bl	80079a4 <quorem>
 800845e:	4649      	mov	r1, r9
 8008460:	4605      	mov	r5, r0
 8008462:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008466:	4658      	mov	r0, fp
 8008468:	f000 fb16 	bl	8008a98 <__mcmp>
 800846c:	463a      	mov	r2, r7
 800846e:	9002      	str	r0, [sp, #8]
 8008470:	4631      	mov	r1, r6
 8008472:	4620      	mov	r0, r4
 8008474:	f000 fb2a 	bl	8008acc <__mdiff>
 8008478:	68c3      	ldr	r3, [r0, #12]
 800847a:	4602      	mov	r2, r0
 800847c:	bb03      	cbnz	r3, 80084c0 <_dtoa_r+0xa00>
 800847e:	4601      	mov	r1, r0
 8008480:	9009      	str	r0, [sp, #36]	; 0x24
 8008482:	4658      	mov	r0, fp
 8008484:	f000 fb08 	bl	8008a98 <__mcmp>
 8008488:	4603      	mov	r3, r0
 800848a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800848c:	4611      	mov	r1, r2
 800848e:	4620      	mov	r0, r4
 8008490:	9309      	str	r3, [sp, #36]	; 0x24
 8008492:	f000 f921 	bl	80086d8 <_Bfree>
 8008496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008498:	b9a3      	cbnz	r3, 80084c4 <_dtoa_r+0xa04>
 800849a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800849c:	b992      	cbnz	r2, 80084c4 <_dtoa_r+0xa04>
 800849e:	9a08      	ldr	r2, [sp, #32]
 80084a0:	b982      	cbnz	r2, 80084c4 <_dtoa_r+0xa04>
 80084a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80084a6:	d029      	beq.n	80084fc <_dtoa_r+0xa3c>
 80084a8:	9b02      	ldr	r3, [sp, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	dd01      	ble.n	80084b2 <_dtoa_r+0x9f2>
 80084ae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80084b2:	9b07      	ldr	r3, [sp, #28]
 80084b4:	1c5d      	adds	r5, r3, #1
 80084b6:	f883 8000 	strb.w	r8, [r3]
 80084ba:	e784      	b.n	80083c6 <_dtoa_r+0x906>
 80084bc:	4638      	mov	r0, r7
 80084be:	e7c2      	b.n	8008446 <_dtoa_r+0x986>
 80084c0:	2301      	movs	r3, #1
 80084c2:	e7e3      	b.n	800848c <_dtoa_r+0x9cc>
 80084c4:	9a02      	ldr	r2, [sp, #8]
 80084c6:	2a00      	cmp	r2, #0
 80084c8:	db04      	blt.n	80084d4 <_dtoa_r+0xa14>
 80084ca:	d123      	bne.n	8008514 <_dtoa_r+0xa54>
 80084cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80084ce:	bb0a      	cbnz	r2, 8008514 <_dtoa_r+0xa54>
 80084d0:	9a08      	ldr	r2, [sp, #32]
 80084d2:	b9fa      	cbnz	r2, 8008514 <_dtoa_r+0xa54>
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	ddec      	ble.n	80084b2 <_dtoa_r+0x9f2>
 80084d8:	4659      	mov	r1, fp
 80084da:	2201      	movs	r2, #1
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 fa87 	bl	80089f0 <__lshift>
 80084e2:	4631      	mov	r1, r6
 80084e4:	4683      	mov	fp, r0
 80084e6:	f000 fad7 	bl	8008a98 <__mcmp>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	dc03      	bgt.n	80084f6 <_dtoa_r+0xa36>
 80084ee:	d1e0      	bne.n	80084b2 <_dtoa_r+0x9f2>
 80084f0:	f018 0f01 	tst.w	r8, #1
 80084f4:	d0dd      	beq.n	80084b2 <_dtoa_r+0x9f2>
 80084f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80084fa:	d1d8      	bne.n	80084ae <_dtoa_r+0x9ee>
 80084fc:	9b07      	ldr	r3, [sp, #28]
 80084fe:	9a07      	ldr	r2, [sp, #28]
 8008500:	1c5d      	adds	r5, r3, #1
 8008502:	2339      	movs	r3, #57	; 0x39
 8008504:	7013      	strb	r3, [r2, #0]
 8008506:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800850a:	1e6a      	subs	r2, r5, #1
 800850c:	2b39      	cmp	r3, #57	; 0x39
 800850e:	d04d      	beq.n	80085ac <_dtoa_r+0xaec>
 8008510:	3301      	adds	r3, #1
 8008512:	e052      	b.n	80085ba <_dtoa_r+0xafa>
 8008514:	9a07      	ldr	r2, [sp, #28]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f102 0501 	add.w	r5, r2, #1
 800851c:	dd06      	ble.n	800852c <_dtoa_r+0xa6c>
 800851e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008522:	d0eb      	beq.n	80084fc <_dtoa_r+0xa3c>
 8008524:	f108 0801 	add.w	r8, r8, #1
 8008528:	9b07      	ldr	r3, [sp, #28]
 800852a:	e7c4      	b.n	80084b6 <_dtoa_r+0x9f6>
 800852c:	9b06      	ldr	r3, [sp, #24]
 800852e:	9a04      	ldr	r2, [sp, #16]
 8008530:	1aeb      	subs	r3, r5, r3
 8008532:	4293      	cmp	r3, r2
 8008534:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008538:	d021      	beq.n	800857e <_dtoa_r+0xabe>
 800853a:	4659      	mov	r1, fp
 800853c:	2300      	movs	r3, #0
 800853e:	220a      	movs	r2, #10
 8008540:	4620      	mov	r0, r4
 8008542:	f000 f8e0 	bl	8008706 <__multadd>
 8008546:	45b9      	cmp	r9, r7
 8008548:	4683      	mov	fp, r0
 800854a:	f04f 0300 	mov.w	r3, #0
 800854e:	f04f 020a 	mov.w	r2, #10
 8008552:	4649      	mov	r1, r9
 8008554:	4620      	mov	r0, r4
 8008556:	d105      	bne.n	8008564 <_dtoa_r+0xaa4>
 8008558:	f000 f8d5 	bl	8008706 <__multadd>
 800855c:	4681      	mov	r9, r0
 800855e:	4607      	mov	r7, r0
 8008560:	9507      	str	r5, [sp, #28]
 8008562:	e778      	b.n	8008456 <_dtoa_r+0x996>
 8008564:	f000 f8cf 	bl	8008706 <__multadd>
 8008568:	4639      	mov	r1, r7
 800856a:	4681      	mov	r9, r0
 800856c:	2300      	movs	r3, #0
 800856e:	220a      	movs	r2, #10
 8008570:	4620      	mov	r0, r4
 8008572:	f000 f8c8 	bl	8008706 <__multadd>
 8008576:	4607      	mov	r7, r0
 8008578:	e7f2      	b.n	8008560 <_dtoa_r+0xaa0>
 800857a:	f04f 0900 	mov.w	r9, #0
 800857e:	4659      	mov	r1, fp
 8008580:	2201      	movs	r2, #1
 8008582:	4620      	mov	r0, r4
 8008584:	f000 fa34 	bl	80089f0 <__lshift>
 8008588:	4631      	mov	r1, r6
 800858a:	4683      	mov	fp, r0
 800858c:	f000 fa84 	bl	8008a98 <__mcmp>
 8008590:	2800      	cmp	r0, #0
 8008592:	dcb8      	bgt.n	8008506 <_dtoa_r+0xa46>
 8008594:	d102      	bne.n	800859c <_dtoa_r+0xadc>
 8008596:	f018 0f01 	tst.w	r8, #1
 800859a:	d1b4      	bne.n	8008506 <_dtoa_r+0xa46>
 800859c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085a0:	1e6a      	subs	r2, r5, #1
 80085a2:	2b30      	cmp	r3, #48	; 0x30
 80085a4:	f47f af0f 	bne.w	80083c6 <_dtoa_r+0x906>
 80085a8:	4615      	mov	r5, r2
 80085aa:	e7f7      	b.n	800859c <_dtoa_r+0xadc>
 80085ac:	9b06      	ldr	r3, [sp, #24]
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d105      	bne.n	80085be <_dtoa_r+0xafe>
 80085b2:	2331      	movs	r3, #49	; 0x31
 80085b4:	9a06      	ldr	r2, [sp, #24]
 80085b6:	f10a 0a01 	add.w	sl, sl, #1
 80085ba:	7013      	strb	r3, [r2, #0]
 80085bc:	e703      	b.n	80083c6 <_dtoa_r+0x906>
 80085be:	4615      	mov	r5, r2
 80085c0:	e7a1      	b.n	8008506 <_dtoa_r+0xa46>
 80085c2:	4b17      	ldr	r3, [pc, #92]	; (8008620 <_dtoa_r+0xb60>)
 80085c4:	f7ff bae1 	b.w	8007b8a <_dtoa_r+0xca>
 80085c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f47f aabb 	bne.w	8007b46 <_dtoa_r+0x86>
 80085d0:	4b14      	ldr	r3, [pc, #80]	; (8008624 <_dtoa_r+0xb64>)
 80085d2:	f7ff bada 	b.w	8007b8a <_dtoa_r+0xca>
 80085d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80085d8:	2b01      	cmp	r3, #1
 80085da:	f77f ae3f 	ble.w	800825c <_dtoa_r+0x79c>
 80085de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085e0:	9308      	str	r3, [sp, #32]
 80085e2:	e653      	b.n	800828c <_dtoa_r+0x7cc>
 80085e4:	9b04      	ldr	r3, [sp, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	dc03      	bgt.n	80085f2 <_dtoa_r+0xb32>
 80085ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	f73f aed5 	bgt.w	800839c <_dtoa_r+0x8dc>
 80085f2:	9d06      	ldr	r5, [sp, #24]
 80085f4:	4631      	mov	r1, r6
 80085f6:	4658      	mov	r0, fp
 80085f8:	f7ff f9d4 	bl	80079a4 <quorem>
 80085fc:	9b06      	ldr	r3, [sp, #24]
 80085fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008602:	f805 8b01 	strb.w	r8, [r5], #1
 8008606:	9a04      	ldr	r2, [sp, #16]
 8008608:	1aeb      	subs	r3, r5, r3
 800860a:	429a      	cmp	r2, r3
 800860c:	ddb5      	ble.n	800857a <_dtoa_r+0xaba>
 800860e:	4659      	mov	r1, fp
 8008610:	2300      	movs	r3, #0
 8008612:	220a      	movs	r2, #10
 8008614:	4620      	mov	r0, r4
 8008616:	f000 f876 	bl	8008706 <__multadd>
 800861a:	4683      	mov	fp, r0
 800861c:	e7ea      	b.n	80085f4 <_dtoa_r+0xb34>
 800861e:	bf00      	nop
 8008620:	0800a090 	.word	0x0800a090
 8008624:	0800a0b4 	.word	0x0800a0b4

08008628 <_localeconv_r>:
 8008628:	4b04      	ldr	r3, [pc, #16]	; (800863c <_localeconv_r+0x14>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6a18      	ldr	r0, [r3, #32]
 800862e:	4b04      	ldr	r3, [pc, #16]	; (8008640 <_localeconv_r+0x18>)
 8008630:	2800      	cmp	r0, #0
 8008632:	bf08      	it	eq
 8008634:	4618      	moveq	r0, r3
 8008636:	30f0      	adds	r0, #240	; 0xf0
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	20000018 	.word	0x20000018
 8008640:	2000007c 	.word	0x2000007c

08008644 <malloc>:
 8008644:	4b02      	ldr	r3, [pc, #8]	; (8008650 <malloc+0xc>)
 8008646:	4601      	mov	r1, r0
 8008648:	6818      	ldr	r0, [r3, #0]
 800864a:	f000 bb47 	b.w	8008cdc <_malloc_r>
 800864e:	bf00      	nop
 8008650:	20000018 	.word	0x20000018

08008654 <memchr>:
 8008654:	b510      	push	{r4, lr}
 8008656:	b2c9      	uxtb	r1, r1
 8008658:	4402      	add	r2, r0
 800865a:	4290      	cmp	r0, r2
 800865c:	4603      	mov	r3, r0
 800865e:	d101      	bne.n	8008664 <memchr+0x10>
 8008660:	2300      	movs	r3, #0
 8008662:	e003      	b.n	800866c <memchr+0x18>
 8008664:	781c      	ldrb	r4, [r3, #0]
 8008666:	3001      	adds	r0, #1
 8008668:	428c      	cmp	r4, r1
 800866a:	d1f6      	bne.n	800865a <memchr+0x6>
 800866c:	4618      	mov	r0, r3
 800866e:	bd10      	pop	{r4, pc}

08008670 <_Balloc>:
 8008670:	b570      	push	{r4, r5, r6, lr}
 8008672:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008674:	4604      	mov	r4, r0
 8008676:	460e      	mov	r6, r1
 8008678:	b93d      	cbnz	r5, 800868a <_Balloc+0x1a>
 800867a:	2010      	movs	r0, #16
 800867c:	f7ff ffe2 	bl	8008644 <malloc>
 8008680:	6260      	str	r0, [r4, #36]	; 0x24
 8008682:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008686:	6005      	str	r5, [r0, #0]
 8008688:	60c5      	str	r5, [r0, #12]
 800868a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800868c:	68eb      	ldr	r3, [r5, #12]
 800868e:	b183      	cbz	r3, 80086b2 <_Balloc+0x42>
 8008690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008698:	b9b8      	cbnz	r0, 80086ca <_Balloc+0x5a>
 800869a:	2101      	movs	r1, #1
 800869c:	fa01 f506 	lsl.w	r5, r1, r6
 80086a0:	1d6a      	adds	r2, r5, #5
 80086a2:	0092      	lsls	r2, r2, #2
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 fabe 	bl	8008c26 <_calloc_r>
 80086aa:	b160      	cbz	r0, 80086c6 <_Balloc+0x56>
 80086ac:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80086b0:	e00e      	b.n	80086d0 <_Balloc+0x60>
 80086b2:	2221      	movs	r2, #33	; 0x21
 80086b4:	2104      	movs	r1, #4
 80086b6:	4620      	mov	r0, r4
 80086b8:	f000 fab5 	bl	8008c26 <_calloc_r>
 80086bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086be:	60e8      	str	r0, [r5, #12]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e4      	bne.n	8008690 <_Balloc+0x20>
 80086c6:	2000      	movs	r0, #0
 80086c8:	bd70      	pop	{r4, r5, r6, pc}
 80086ca:	6802      	ldr	r2, [r0, #0]
 80086cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80086d0:	2300      	movs	r3, #0
 80086d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086d6:	e7f7      	b.n	80086c8 <_Balloc+0x58>

080086d8 <_Bfree>:
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80086dc:	4606      	mov	r6, r0
 80086de:	460d      	mov	r5, r1
 80086e0:	b93c      	cbnz	r4, 80086f2 <_Bfree+0x1a>
 80086e2:	2010      	movs	r0, #16
 80086e4:	f7ff ffae 	bl	8008644 <malloc>
 80086e8:	6270      	str	r0, [r6, #36]	; 0x24
 80086ea:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086ee:	6004      	str	r4, [r0, #0]
 80086f0:	60c4      	str	r4, [r0, #12]
 80086f2:	b13d      	cbz	r5, 8008704 <_Bfree+0x2c>
 80086f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80086f6:	686a      	ldr	r2, [r5, #4]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086fe:	6029      	str	r1, [r5, #0]
 8008700:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008704:	bd70      	pop	{r4, r5, r6, pc}

08008706 <__multadd>:
 8008706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800870a:	461f      	mov	r7, r3
 800870c:	4606      	mov	r6, r0
 800870e:	460c      	mov	r4, r1
 8008710:	2300      	movs	r3, #0
 8008712:	690d      	ldr	r5, [r1, #16]
 8008714:	f101 0c14 	add.w	ip, r1, #20
 8008718:	f8dc 0000 	ldr.w	r0, [ip]
 800871c:	3301      	adds	r3, #1
 800871e:	b281      	uxth	r1, r0
 8008720:	fb02 7101 	mla	r1, r2, r1, r7
 8008724:	0c00      	lsrs	r0, r0, #16
 8008726:	0c0f      	lsrs	r7, r1, #16
 8008728:	fb02 7000 	mla	r0, r2, r0, r7
 800872c:	b289      	uxth	r1, r1
 800872e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008732:	429d      	cmp	r5, r3
 8008734:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008738:	f84c 1b04 	str.w	r1, [ip], #4
 800873c:	dcec      	bgt.n	8008718 <__multadd+0x12>
 800873e:	b1d7      	cbz	r7, 8008776 <__multadd+0x70>
 8008740:	68a3      	ldr	r3, [r4, #8]
 8008742:	42ab      	cmp	r3, r5
 8008744:	dc12      	bgt.n	800876c <__multadd+0x66>
 8008746:	6861      	ldr	r1, [r4, #4]
 8008748:	4630      	mov	r0, r6
 800874a:	3101      	adds	r1, #1
 800874c:	f7ff ff90 	bl	8008670 <_Balloc>
 8008750:	4680      	mov	r8, r0
 8008752:	6922      	ldr	r2, [r4, #16]
 8008754:	f104 010c 	add.w	r1, r4, #12
 8008758:	3202      	adds	r2, #2
 800875a:	0092      	lsls	r2, r2, #2
 800875c:	300c      	adds	r0, #12
 800875e:	f7fe fc9f 	bl	80070a0 <memcpy>
 8008762:	4621      	mov	r1, r4
 8008764:	4630      	mov	r0, r6
 8008766:	f7ff ffb7 	bl	80086d8 <_Bfree>
 800876a:	4644      	mov	r4, r8
 800876c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008770:	3501      	adds	r5, #1
 8008772:	615f      	str	r7, [r3, #20]
 8008774:	6125      	str	r5, [r4, #16]
 8008776:	4620      	mov	r0, r4
 8008778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800877c <__hi0bits>:
 800877c:	0c02      	lsrs	r2, r0, #16
 800877e:	0412      	lsls	r2, r2, #16
 8008780:	4603      	mov	r3, r0
 8008782:	b9b2      	cbnz	r2, 80087b2 <__hi0bits+0x36>
 8008784:	0403      	lsls	r3, r0, #16
 8008786:	2010      	movs	r0, #16
 8008788:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800878c:	bf04      	itt	eq
 800878e:	021b      	lsleq	r3, r3, #8
 8008790:	3008      	addeq	r0, #8
 8008792:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008796:	bf04      	itt	eq
 8008798:	011b      	lsleq	r3, r3, #4
 800879a:	3004      	addeq	r0, #4
 800879c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80087a0:	bf04      	itt	eq
 80087a2:	009b      	lsleq	r3, r3, #2
 80087a4:	3002      	addeq	r0, #2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	db06      	blt.n	80087b8 <__hi0bits+0x3c>
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	d503      	bpl.n	80087b6 <__hi0bits+0x3a>
 80087ae:	3001      	adds	r0, #1
 80087b0:	4770      	bx	lr
 80087b2:	2000      	movs	r0, #0
 80087b4:	e7e8      	b.n	8008788 <__hi0bits+0xc>
 80087b6:	2020      	movs	r0, #32
 80087b8:	4770      	bx	lr

080087ba <__lo0bits>:
 80087ba:	6803      	ldr	r3, [r0, #0]
 80087bc:	4601      	mov	r1, r0
 80087be:	f013 0207 	ands.w	r2, r3, #7
 80087c2:	d00b      	beq.n	80087dc <__lo0bits+0x22>
 80087c4:	07da      	lsls	r2, r3, #31
 80087c6:	d423      	bmi.n	8008810 <__lo0bits+0x56>
 80087c8:	0798      	lsls	r0, r3, #30
 80087ca:	bf49      	itett	mi
 80087cc:	085b      	lsrmi	r3, r3, #1
 80087ce:	089b      	lsrpl	r3, r3, #2
 80087d0:	2001      	movmi	r0, #1
 80087d2:	600b      	strmi	r3, [r1, #0]
 80087d4:	bf5c      	itt	pl
 80087d6:	600b      	strpl	r3, [r1, #0]
 80087d8:	2002      	movpl	r0, #2
 80087da:	4770      	bx	lr
 80087dc:	b298      	uxth	r0, r3
 80087de:	b9a8      	cbnz	r0, 800880c <__lo0bits+0x52>
 80087e0:	2010      	movs	r0, #16
 80087e2:	0c1b      	lsrs	r3, r3, #16
 80087e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80087e8:	bf04      	itt	eq
 80087ea:	0a1b      	lsreq	r3, r3, #8
 80087ec:	3008      	addeq	r0, #8
 80087ee:	071a      	lsls	r2, r3, #28
 80087f0:	bf04      	itt	eq
 80087f2:	091b      	lsreq	r3, r3, #4
 80087f4:	3004      	addeq	r0, #4
 80087f6:	079a      	lsls	r2, r3, #30
 80087f8:	bf04      	itt	eq
 80087fa:	089b      	lsreq	r3, r3, #2
 80087fc:	3002      	addeq	r0, #2
 80087fe:	07da      	lsls	r2, r3, #31
 8008800:	d402      	bmi.n	8008808 <__lo0bits+0x4e>
 8008802:	085b      	lsrs	r3, r3, #1
 8008804:	d006      	beq.n	8008814 <__lo0bits+0x5a>
 8008806:	3001      	adds	r0, #1
 8008808:	600b      	str	r3, [r1, #0]
 800880a:	4770      	bx	lr
 800880c:	4610      	mov	r0, r2
 800880e:	e7e9      	b.n	80087e4 <__lo0bits+0x2a>
 8008810:	2000      	movs	r0, #0
 8008812:	4770      	bx	lr
 8008814:	2020      	movs	r0, #32
 8008816:	4770      	bx	lr

08008818 <__i2b>:
 8008818:	b510      	push	{r4, lr}
 800881a:	460c      	mov	r4, r1
 800881c:	2101      	movs	r1, #1
 800881e:	f7ff ff27 	bl	8008670 <_Balloc>
 8008822:	2201      	movs	r2, #1
 8008824:	6144      	str	r4, [r0, #20]
 8008826:	6102      	str	r2, [r0, #16]
 8008828:	bd10      	pop	{r4, pc}

0800882a <__multiply>:
 800882a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882e:	4614      	mov	r4, r2
 8008830:	690a      	ldr	r2, [r1, #16]
 8008832:	6923      	ldr	r3, [r4, #16]
 8008834:	4688      	mov	r8, r1
 8008836:	429a      	cmp	r2, r3
 8008838:	bfbe      	ittt	lt
 800883a:	460b      	movlt	r3, r1
 800883c:	46a0      	movlt	r8, r4
 800883e:	461c      	movlt	r4, r3
 8008840:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008844:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008848:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800884c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008850:	eb07 0609 	add.w	r6, r7, r9
 8008854:	42b3      	cmp	r3, r6
 8008856:	bfb8      	it	lt
 8008858:	3101      	addlt	r1, #1
 800885a:	f7ff ff09 	bl	8008670 <_Balloc>
 800885e:	f100 0514 	add.w	r5, r0, #20
 8008862:	462b      	mov	r3, r5
 8008864:	2200      	movs	r2, #0
 8008866:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800886a:	4573      	cmp	r3, lr
 800886c:	d316      	bcc.n	800889c <__multiply+0x72>
 800886e:	f104 0214 	add.w	r2, r4, #20
 8008872:	f108 0114 	add.w	r1, r8, #20
 8008876:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800887a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	9b00      	ldr	r3, [sp, #0]
 8008882:	9201      	str	r2, [sp, #4]
 8008884:	4293      	cmp	r3, r2
 8008886:	d80c      	bhi.n	80088a2 <__multiply+0x78>
 8008888:	2e00      	cmp	r6, #0
 800888a:	dd03      	ble.n	8008894 <__multiply+0x6a>
 800888c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008890:	2b00      	cmp	r3, #0
 8008892:	d05d      	beq.n	8008950 <__multiply+0x126>
 8008894:	6106      	str	r6, [r0, #16]
 8008896:	b003      	add	sp, #12
 8008898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889c:	f843 2b04 	str.w	r2, [r3], #4
 80088a0:	e7e3      	b.n	800886a <__multiply+0x40>
 80088a2:	f8b2 b000 	ldrh.w	fp, [r2]
 80088a6:	f1bb 0f00 	cmp.w	fp, #0
 80088aa:	d023      	beq.n	80088f4 <__multiply+0xca>
 80088ac:	4689      	mov	r9, r1
 80088ae:	46ac      	mov	ip, r5
 80088b0:	f04f 0800 	mov.w	r8, #0
 80088b4:	f859 4b04 	ldr.w	r4, [r9], #4
 80088b8:	f8dc a000 	ldr.w	sl, [ip]
 80088bc:	b2a3      	uxth	r3, r4
 80088be:	fa1f fa8a 	uxth.w	sl, sl
 80088c2:	fb0b a303 	mla	r3, fp, r3, sl
 80088c6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80088ca:	f8dc 4000 	ldr.w	r4, [ip]
 80088ce:	4443      	add	r3, r8
 80088d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80088d4:	fb0b 840a 	mla	r4, fp, sl, r8
 80088d8:	46e2      	mov	sl, ip
 80088da:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80088de:	b29b      	uxth	r3, r3
 80088e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80088e4:	454f      	cmp	r7, r9
 80088e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80088ea:	f84a 3b04 	str.w	r3, [sl], #4
 80088ee:	d82b      	bhi.n	8008948 <__multiply+0x11e>
 80088f0:	f8cc 8004 	str.w	r8, [ip, #4]
 80088f4:	9b01      	ldr	r3, [sp, #4]
 80088f6:	3204      	adds	r2, #4
 80088f8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80088fc:	f1ba 0f00 	cmp.w	sl, #0
 8008900:	d020      	beq.n	8008944 <__multiply+0x11a>
 8008902:	4689      	mov	r9, r1
 8008904:	46a8      	mov	r8, r5
 8008906:	f04f 0b00 	mov.w	fp, #0
 800890a:	682b      	ldr	r3, [r5, #0]
 800890c:	f8b9 c000 	ldrh.w	ip, [r9]
 8008910:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008914:	b29b      	uxth	r3, r3
 8008916:	fb0a 440c 	mla	r4, sl, ip, r4
 800891a:	46c4      	mov	ip, r8
 800891c:	445c      	add	r4, fp
 800891e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008922:	f84c 3b04 	str.w	r3, [ip], #4
 8008926:	f859 3b04 	ldr.w	r3, [r9], #4
 800892a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800892e:	0c1b      	lsrs	r3, r3, #16
 8008930:	fb0a b303 	mla	r3, sl, r3, fp
 8008934:	454f      	cmp	r7, r9
 8008936:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800893a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800893e:	d805      	bhi.n	800894c <__multiply+0x122>
 8008940:	f8c8 3004 	str.w	r3, [r8, #4]
 8008944:	3504      	adds	r5, #4
 8008946:	e79b      	b.n	8008880 <__multiply+0x56>
 8008948:	46d4      	mov	ip, sl
 800894a:	e7b3      	b.n	80088b4 <__multiply+0x8a>
 800894c:	46e0      	mov	r8, ip
 800894e:	e7dd      	b.n	800890c <__multiply+0xe2>
 8008950:	3e01      	subs	r6, #1
 8008952:	e799      	b.n	8008888 <__multiply+0x5e>

08008954 <__pow5mult>:
 8008954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008958:	4615      	mov	r5, r2
 800895a:	f012 0203 	ands.w	r2, r2, #3
 800895e:	4606      	mov	r6, r0
 8008960:	460f      	mov	r7, r1
 8008962:	d007      	beq.n	8008974 <__pow5mult+0x20>
 8008964:	4c21      	ldr	r4, [pc, #132]	; (80089ec <__pow5mult+0x98>)
 8008966:	3a01      	subs	r2, #1
 8008968:	2300      	movs	r3, #0
 800896a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800896e:	f7ff feca 	bl	8008706 <__multadd>
 8008972:	4607      	mov	r7, r0
 8008974:	10ad      	asrs	r5, r5, #2
 8008976:	d035      	beq.n	80089e4 <__pow5mult+0x90>
 8008978:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800897a:	b93c      	cbnz	r4, 800898c <__pow5mult+0x38>
 800897c:	2010      	movs	r0, #16
 800897e:	f7ff fe61 	bl	8008644 <malloc>
 8008982:	6270      	str	r0, [r6, #36]	; 0x24
 8008984:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008988:	6004      	str	r4, [r0, #0]
 800898a:	60c4      	str	r4, [r0, #12]
 800898c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008990:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008994:	b94c      	cbnz	r4, 80089aa <__pow5mult+0x56>
 8008996:	f240 2171 	movw	r1, #625	; 0x271
 800899a:	4630      	mov	r0, r6
 800899c:	f7ff ff3c 	bl	8008818 <__i2b>
 80089a0:	2300      	movs	r3, #0
 80089a2:	4604      	mov	r4, r0
 80089a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80089a8:	6003      	str	r3, [r0, #0]
 80089aa:	f04f 0800 	mov.w	r8, #0
 80089ae:	07eb      	lsls	r3, r5, #31
 80089b0:	d50a      	bpl.n	80089c8 <__pow5mult+0x74>
 80089b2:	4639      	mov	r1, r7
 80089b4:	4622      	mov	r2, r4
 80089b6:	4630      	mov	r0, r6
 80089b8:	f7ff ff37 	bl	800882a <__multiply>
 80089bc:	4681      	mov	r9, r0
 80089be:	4639      	mov	r1, r7
 80089c0:	4630      	mov	r0, r6
 80089c2:	f7ff fe89 	bl	80086d8 <_Bfree>
 80089c6:	464f      	mov	r7, r9
 80089c8:	106d      	asrs	r5, r5, #1
 80089ca:	d00b      	beq.n	80089e4 <__pow5mult+0x90>
 80089cc:	6820      	ldr	r0, [r4, #0]
 80089ce:	b938      	cbnz	r0, 80089e0 <__pow5mult+0x8c>
 80089d0:	4622      	mov	r2, r4
 80089d2:	4621      	mov	r1, r4
 80089d4:	4630      	mov	r0, r6
 80089d6:	f7ff ff28 	bl	800882a <__multiply>
 80089da:	6020      	str	r0, [r4, #0]
 80089dc:	f8c0 8000 	str.w	r8, [r0]
 80089e0:	4604      	mov	r4, r0
 80089e2:	e7e4      	b.n	80089ae <__pow5mult+0x5a>
 80089e4:	4638      	mov	r0, r7
 80089e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ea:	bf00      	nop
 80089ec:	0800a1b8 	.word	0x0800a1b8

080089f0 <__lshift>:
 80089f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f4:	460c      	mov	r4, r1
 80089f6:	4607      	mov	r7, r0
 80089f8:	4616      	mov	r6, r2
 80089fa:	6923      	ldr	r3, [r4, #16]
 80089fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a00:	eb0a 0903 	add.w	r9, sl, r3
 8008a04:	6849      	ldr	r1, [r1, #4]
 8008a06:	68a3      	ldr	r3, [r4, #8]
 8008a08:	f109 0501 	add.w	r5, r9, #1
 8008a0c:	42ab      	cmp	r3, r5
 8008a0e:	db32      	blt.n	8008a76 <__lshift+0x86>
 8008a10:	4638      	mov	r0, r7
 8008a12:	f7ff fe2d 	bl	8008670 <_Balloc>
 8008a16:	2300      	movs	r3, #0
 8008a18:	4680      	mov	r8, r0
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f100 0114 	add.w	r1, r0, #20
 8008a20:	4553      	cmp	r3, sl
 8008a22:	db2b      	blt.n	8008a7c <__lshift+0x8c>
 8008a24:	6920      	ldr	r0, [r4, #16]
 8008a26:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a2a:	f104 0314 	add.w	r3, r4, #20
 8008a2e:	f016 021f 	ands.w	r2, r6, #31
 8008a32:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a36:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a3a:	d025      	beq.n	8008a88 <__lshift+0x98>
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	f1c2 0e20 	rsb	lr, r2, #32
 8008a42:	468a      	mov	sl, r1
 8008a44:	681e      	ldr	r6, [r3, #0]
 8008a46:	4096      	lsls	r6, r2
 8008a48:	4330      	orrs	r0, r6
 8008a4a:	f84a 0b04 	str.w	r0, [sl], #4
 8008a4e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008a52:	459c      	cmp	ip, r3
 8008a54:	fa20 f00e 	lsr.w	r0, r0, lr
 8008a58:	d814      	bhi.n	8008a84 <__lshift+0x94>
 8008a5a:	6048      	str	r0, [r1, #4]
 8008a5c:	b108      	cbz	r0, 8008a62 <__lshift+0x72>
 8008a5e:	f109 0502 	add.w	r5, r9, #2
 8008a62:	3d01      	subs	r5, #1
 8008a64:	4638      	mov	r0, r7
 8008a66:	f8c8 5010 	str.w	r5, [r8, #16]
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	f7ff fe34 	bl	80086d8 <_Bfree>
 8008a70:	4640      	mov	r0, r8
 8008a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a76:	3101      	adds	r1, #1
 8008a78:	005b      	lsls	r3, r3, #1
 8008a7a:	e7c7      	b.n	8008a0c <__lshift+0x1c>
 8008a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008a80:	3301      	adds	r3, #1
 8008a82:	e7cd      	b.n	8008a20 <__lshift+0x30>
 8008a84:	4651      	mov	r1, sl
 8008a86:	e7dc      	b.n	8008a42 <__lshift+0x52>
 8008a88:	3904      	subs	r1, #4
 8008a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a8e:	459c      	cmp	ip, r3
 8008a90:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a94:	d8f9      	bhi.n	8008a8a <__lshift+0x9a>
 8008a96:	e7e4      	b.n	8008a62 <__lshift+0x72>

08008a98 <__mcmp>:
 8008a98:	6903      	ldr	r3, [r0, #16]
 8008a9a:	690a      	ldr	r2, [r1, #16]
 8008a9c:	b530      	push	{r4, r5, lr}
 8008a9e:	1a9b      	subs	r3, r3, r2
 8008aa0:	d10c      	bne.n	8008abc <__mcmp+0x24>
 8008aa2:	0092      	lsls	r2, r2, #2
 8008aa4:	3014      	adds	r0, #20
 8008aa6:	3114      	adds	r1, #20
 8008aa8:	1884      	adds	r4, r0, r2
 8008aaa:	4411      	add	r1, r2
 8008aac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ab0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ab4:	4295      	cmp	r5, r2
 8008ab6:	d003      	beq.n	8008ac0 <__mcmp+0x28>
 8008ab8:	d305      	bcc.n	8008ac6 <__mcmp+0x2e>
 8008aba:	2301      	movs	r3, #1
 8008abc:	4618      	mov	r0, r3
 8008abe:	bd30      	pop	{r4, r5, pc}
 8008ac0:	42a0      	cmp	r0, r4
 8008ac2:	d3f3      	bcc.n	8008aac <__mcmp+0x14>
 8008ac4:	e7fa      	b.n	8008abc <__mcmp+0x24>
 8008ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aca:	e7f7      	b.n	8008abc <__mcmp+0x24>

08008acc <__mdiff>:
 8008acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad0:	460d      	mov	r5, r1
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	4614      	mov	r4, r2
 8008ada:	f7ff ffdd 	bl	8008a98 <__mcmp>
 8008ade:	1e06      	subs	r6, r0, #0
 8008ae0:	d108      	bne.n	8008af4 <__mdiff+0x28>
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	f7ff fdc3 	bl	8008670 <_Balloc>
 8008aea:	2301      	movs	r3, #1
 8008aec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af4:	bfa4      	itt	ge
 8008af6:	4623      	movge	r3, r4
 8008af8:	462c      	movge	r4, r5
 8008afa:	4638      	mov	r0, r7
 8008afc:	6861      	ldr	r1, [r4, #4]
 8008afe:	bfa6      	itte	ge
 8008b00:	461d      	movge	r5, r3
 8008b02:	2600      	movge	r6, #0
 8008b04:	2601      	movlt	r6, #1
 8008b06:	f7ff fdb3 	bl	8008670 <_Balloc>
 8008b0a:	f04f 0e00 	mov.w	lr, #0
 8008b0e:	60c6      	str	r6, [r0, #12]
 8008b10:	692b      	ldr	r3, [r5, #16]
 8008b12:	6926      	ldr	r6, [r4, #16]
 8008b14:	f104 0214 	add.w	r2, r4, #20
 8008b18:	f105 0914 	add.w	r9, r5, #20
 8008b1c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008b20:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008b24:	f100 0114 	add.w	r1, r0, #20
 8008b28:	f852 ab04 	ldr.w	sl, [r2], #4
 8008b2c:	f859 5b04 	ldr.w	r5, [r9], #4
 8008b30:	fa1f f38a 	uxth.w	r3, sl
 8008b34:	4473      	add	r3, lr
 8008b36:	b2ac      	uxth	r4, r5
 8008b38:	1b1b      	subs	r3, r3, r4
 8008b3a:	0c2c      	lsrs	r4, r5, #16
 8008b3c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008b40:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008b4a:	45c8      	cmp	r8, r9
 8008b4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008b50:	4694      	mov	ip, r2
 8008b52:	f841 4b04 	str.w	r4, [r1], #4
 8008b56:	d8e7      	bhi.n	8008b28 <__mdiff+0x5c>
 8008b58:	45bc      	cmp	ip, r7
 8008b5a:	d304      	bcc.n	8008b66 <__mdiff+0x9a>
 8008b5c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008b60:	b183      	cbz	r3, 8008b84 <__mdiff+0xb8>
 8008b62:	6106      	str	r6, [r0, #16]
 8008b64:	e7c4      	b.n	8008af0 <__mdiff+0x24>
 8008b66:	f85c 4b04 	ldr.w	r4, [ip], #4
 8008b6a:	b2a2      	uxth	r2, r4
 8008b6c:	4472      	add	r2, lr
 8008b6e:	1413      	asrs	r3, r2, #16
 8008b70:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008b74:	b292      	uxth	r2, r2
 8008b76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008b7a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008b7e:	f841 2b04 	str.w	r2, [r1], #4
 8008b82:	e7e9      	b.n	8008b58 <__mdiff+0x8c>
 8008b84:	3e01      	subs	r6, #1
 8008b86:	e7e9      	b.n	8008b5c <__mdiff+0x90>

08008b88 <__d2b>:
 8008b88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b8c:	461c      	mov	r4, r3
 8008b8e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008b92:	2101      	movs	r1, #1
 8008b94:	4690      	mov	r8, r2
 8008b96:	f7ff fd6b 	bl	8008670 <_Balloc>
 8008b9a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008b9e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008ba2:	4607      	mov	r7, r0
 8008ba4:	bb34      	cbnz	r4, 8008bf4 <__d2b+0x6c>
 8008ba6:	9201      	str	r2, [sp, #4]
 8008ba8:	f1b8 0200 	subs.w	r2, r8, #0
 8008bac:	d027      	beq.n	8008bfe <__d2b+0x76>
 8008bae:	a802      	add	r0, sp, #8
 8008bb0:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008bb4:	f7ff fe01 	bl	80087ba <__lo0bits>
 8008bb8:	9900      	ldr	r1, [sp, #0]
 8008bba:	b1f0      	cbz	r0, 8008bfa <__d2b+0x72>
 8008bbc:	9a01      	ldr	r2, [sp, #4]
 8008bbe:	f1c0 0320 	rsb	r3, r0, #32
 8008bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc6:	430b      	orrs	r3, r1
 8008bc8:	40c2      	lsrs	r2, r0
 8008bca:	617b      	str	r3, [r7, #20]
 8008bcc:	9201      	str	r2, [sp, #4]
 8008bce:	9b01      	ldr	r3, [sp, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	bf14      	ite	ne
 8008bd4:	2102      	movne	r1, #2
 8008bd6:	2101      	moveq	r1, #1
 8008bd8:	61bb      	str	r3, [r7, #24]
 8008bda:	6139      	str	r1, [r7, #16]
 8008bdc:	b1c4      	cbz	r4, 8008c10 <__d2b+0x88>
 8008bde:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008be2:	4404      	add	r4, r0
 8008be4:	6034      	str	r4, [r6, #0]
 8008be6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bea:	6028      	str	r0, [r5, #0]
 8008bec:	4638      	mov	r0, r7
 8008bee:	b002      	add	sp, #8
 8008bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008bf8:	e7d5      	b.n	8008ba6 <__d2b+0x1e>
 8008bfa:	6179      	str	r1, [r7, #20]
 8008bfc:	e7e7      	b.n	8008bce <__d2b+0x46>
 8008bfe:	a801      	add	r0, sp, #4
 8008c00:	f7ff fddb 	bl	80087ba <__lo0bits>
 8008c04:	2101      	movs	r1, #1
 8008c06:	9b01      	ldr	r3, [sp, #4]
 8008c08:	6139      	str	r1, [r7, #16]
 8008c0a:	617b      	str	r3, [r7, #20]
 8008c0c:	3020      	adds	r0, #32
 8008c0e:	e7e5      	b.n	8008bdc <__d2b+0x54>
 8008c10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c14:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008c18:	6030      	str	r0, [r6, #0]
 8008c1a:	6918      	ldr	r0, [r3, #16]
 8008c1c:	f7ff fdae 	bl	800877c <__hi0bits>
 8008c20:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008c24:	e7e1      	b.n	8008bea <__d2b+0x62>

08008c26 <_calloc_r>:
 8008c26:	b538      	push	{r3, r4, r5, lr}
 8008c28:	fb02 f401 	mul.w	r4, r2, r1
 8008c2c:	4621      	mov	r1, r4
 8008c2e:	f000 f855 	bl	8008cdc <_malloc_r>
 8008c32:	4605      	mov	r5, r0
 8008c34:	b118      	cbz	r0, 8008c3e <_calloc_r+0x18>
 8008c36:	4622      	mov	r2, r4
 8008c38:	2100      	movs	r1, #0
 8008c3a:	f7fe fa3c 	bl	80070b6 <memset>
 8008c3e:	4628      	mov	r0, r5
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
	...

08008c44 <_free_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4605      	mov	r5, r0
 8008c48:	2900      	cmp	r1, #0
 8008c4a:	d043      	beq.n	8008cd4 <_free_r+0x90>
 8008c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c50:	1f0c      	subs	r4, r1, #4
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	bfb8      	it	lt
 8008c56:	18e4      	addlt	r4, r4, r3
 8008c58:	f000 fa27 	bl	80090aa <__malloc_lock>
 8008c5c:	4a1e      	ldr	r2, [pc, #120]	; (8008cd8 <_free_r+0x94>)
 8008c5e:	6813      	ldr	r3, [r2, #0]
 8008c60:	4610      	mov	r0, r2
 8008c62:	b933      	cbnz	r3, 8008c72 <_free_r+0x2e>
 8008c64:	6063      	str	r3, [r4, #4]
 8008c66:	6014      	str	r4, [r2, #0]
 8008c68:	4628      	mov	r0, r5
 8008c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c6e:	f000 ba1d 	b.w	80090ac <__malloc_unlock>
 8008c72:	42a3      	cmp	r3, r4
 8008c74:	d90b      	bls.n	8008c8e <_free_r+0x4a>
 8008c76:	6821      	ldr	r1, [r4, #0]
 8008c78:	1862      	adds	r2, r4, r1
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	bf01      	itttt	eq
 8008c7e:	681a      	ldreq	r2, [r3, #0]
 8008c80:	685b      	ldreq	r3, [r3, #4]
 8008c82:	1852      	addeq	r2, r2, r1
 8008c84:	6022      	streq	r2, [r4, #0]
 8008c86:	6063      	str	r3, [r4, #4]
 8008c88:	6004      	str	r4, [r0, #0]
 8008c8a:	e7ed      	b.n	8008c68 <_free_r+0x24>
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	b10a      	cbz	r2, 8008c96 <_free_r+0x52>
 8008c92:	42a2      	cmp	r2, r4
 8008c94:	d9fa      	bls.n	8008c8c <_free_r+0x48>
 8008c96:	6819      	ldr	r1, [r3, #0]
 8008c98:	1858      	adds	r0, r3, r1
 8008c9a:	42a0      	cmp	r0, r4
 8008c9c:	d10b      	bne.n	8008cb6 <_free_r+0x72>
 8008c9e:	6820      	ldr	r0, [r4, #0]
 8008ca0:	4401      	add	r1, r0
 8008ca2:	1858      	adds	r0, r3, r1
 8008ca4:	4282      	cmp	r2, r0
 8008ca6:	6019      	str	r1, [r3, #0]
 8008ca8:	d1de      	bne.n	8008c68 <_free_r+0x24>
 8008caa:	6810      	ldr	r0, [r2, #0]
 8008cac:	6852      	ldr	r2, [r2, #4]
 8008cae:	4401      	add	r1, r0
 8008cb0:	6019      	str	r1, [r3, #0]
 8008cb2:	605a      	str	r2, [r3, #4]
 8008cb4:	e7d8      	b.n	8008c68 <_free_r+0x24>
 8008cb6:	d902      	bls.n	8008cbe <_free_r+0x7a>
 8008cb8:	230c      	movs	r3, #12
 8008cba:	602b      	str	r3, [r5, #0]
 8008cbc:	e7d4      	b.n	8008c68 <_free_r+0x24>
 8008cbe:	6820      	ldr	r0, [r4, #0]
 8008cc0:	1821      	adds	r1, r4, r0
 8008cc2:	428a      	cmp	r2, r1
 8008cc4:	bf01      	itttt	eq
 8008cc6:	6811      	ldreq	r1, [r2, #0]
 8008cc8:	6852      	ldreq	r2, [r2, #4]
 8008cca:	1809      	addeq	r1, r1, r0
 8008ccc:	6021      	streq	r1, [r4, #0]
 8008cce:	6062      	str	r2, [r4, #4]
 8008cd0:	605c      	str	r4, [r3, #4]
 8008cd2:	e7c9      	b.n	8008c68 <_free_r+0x24>
 8008cd4:	bd38      	pop	{r3, r4, r5, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20002130 	.word	0x20002130

08008cdc <_malloc_r>:
 8008cdc:	b570      	push	{r4, r5, r6, lr}
 8008cde:	1ccd      	adds	r5, r1, #3
 8008ce0:	f025 0503 	bic.w	r5, r5, #3
 8008ce4:	3508      	adds	r5, #8
 8008ce6:	2d0c      	cmp	r5, #12
 8008ce8:	bf38      	it	cc
 8008cea:	250c      	movcc	r5, #12
 8008cec:	2d00      	cmp	r5, #0
 8008cee:	4606      	mov	r6, r0
 8008cf0:	db01      	blt.n	8008cf6 <_malloc_r+0x1a>
 8008cf2:	42a9      	cmp	r1, r5
 8008cf4:	d903      	bls.n	8008cfe <_malloc_r+0x22>
 8008cf6:	230c      	movs	r3, #12
 8008cf8:	6033      	str	r3, [r6, #0]
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	bd70      	pop	{r4, r5, r6, pc}
 8008cfe:	f000 f9d4 	bl	80090aa <__malloc_lock>
 8008d02:	4a21      	ldr	r2, [pc, #132]	; (8008d88 <_malloc_r+0xac>)
 8008d04:	6814      	ldr	r4, [r2, #0]
 8008d06:	4621      	mov	r1, r4
 8008d08:	b991      	cbnz	r1, 8008d30 <_malloc_r+0x54>
 8008d0a:	4c20      	ldr	r4, [pc, #128]	; (8008d8c <_malloc_r+0xb0>)
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	b91b      	cbnz	r3, 8008d18 <_malloc_r+0x3c>
 8008d10:	4630      	mov	r0, r6
 8008d12:	f000 f98f 	bl	8009034 <_sbrk_r>
 8008d16:	6020      	str	r0, [r4, #0]
 8008d18:	4629      	mov	r1, r5
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f000 f98a 	bl	8009034 <_sbrk_r>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d124      	bne.n	8008d6e <_malloc_r+0x92>
 8008d24:	230c      	movs	r3, #12
 8008d26:	4630      	mov	r0, r6
 8008d28:	6033      	str	r3, [r6, #0]
 8008d2a:	f000 f9bf 	bl	80090ac <__malloc_unlock>
 8008d2e:	e7e4      	b.n	8008cfa <_malloc_r+0x1e>
 8008d30:	680b      	ldr	r3, [r1, #0]
 8008d32:	1b5b      	subs	r3, r3, r5
 8008d34:	d418      	bmi.n	8008d68 <_malloc_r+0x8c>
 8008d36:	2b0b      	cmp	r3, #11
 8008d38:	d90f      	bls.n	8008d5a <_malloc_r+0x7e>
 8008d3a:	600b      	str	r3, [r1, #0]
 8008d3c:	18cc      	adds	r4, r1, r3
 8008d3e:	50cd      	str	r5, [r1, r3]
 8008d40:	4630      	mov	r0, r6
 8008d42:	f000 f9b3 	bl	80090ac <__malloc_unlock>
 8008d46:	f104 000b 	add.w	r0, r4, #11
 8008d4a:	1d23      	adds	r3, r4, #4
 8008d4c:	f020 0007 	bic.w	r0, r0, #7
 8008d50:	1ac3      	subs	r3, r0, r3
 8008d52:	d0d3      	beq.n	8008cfc <_malloc_r+0x20>
 8008d54:	425a      	negs	r2, r3
 8008d56:	50e2      	str	r2, [r4, r3]
 8008d58:	e7d0      	b.n	8008cfc <_malloc_r+0x20>
 8008d5a:	684b      	ldr	r3, [r1, #4]
 8008d5c:	428c      	cmp	r4, r1
 8008d5e:	bf16      	itet	ne
 8008d60:	6063      	strne	r3, [r4, #4]
 8008d62:	6013      	streq	r3, [r2, #0]
 8008d64:	460c      	movne	r4, r1
 8008d66:	e7eb      	b.n	8008d40 <_malloc_r+0x64>
 8008d68:	460c      	mov	r4, r1
 8008d6a:	6849      	ldr	r1, [r1, #4]
 8008d6c:	e7cc      	b.n	8008d08 <_malloc_r+0x2c>
 8008d6e:	1cc4      	adds	r4, r0, #3
 8008d70:	f024 0403 	bic.w	r4, r4, #3
 8008d74:	42a0      	cmp	r0, r4
 8008d76:	d005      	beq.n	8008d84 <_malloc_r+0xa8>
 8008d78:	1a21      	subs	r1, r4, r0
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f000 f95a 	bl	8009034 <_sbrk_r>
 8008d80:	3001      	adds	r0, #1
 8008d82:	d0cf      	beq.n	8008d24 <_malloc_r+0x48>
 8008d84:	6025      	str	r5, [r4, #0]
 8008d86:	e7db      	b.n	8008d40 <_malloc_r+0x64>
 8008d88:	20002130 	.word	0x20002130
 8008d8c:	20002134 	.word	0x20002134

08008d90 <__ssputs_r>:
 8008d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d94:	688e      	ldr	r6, [r1, #8]
 8008d96:	4682      	mov	sl, r0
 8008d98:	429e      	cmp	r6, r3
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	4690      	mov	r8, r2
 8008d9e:	4699      	mov	r9, r3
 8008da0:	d837      	bhi.n	8008e12 <__ssputs_r+0x82>
 8008da2:	898a      	ldrh	r2, [r1, #12]
 8008da4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008da8:	d031      	beq.n	8008e0e <__ssputs_r+0x7e>
 8008daa:	2302      	movs	r3, #2
 8008dac:	6825      	ldr	r5, [r4, #0]
 8008dae:	6909      	ldr	r1, [r1, #16]
 8008db0:	1a6f      	subs	r7, r5, r1
 8008db2:	6965      	ldr	r5, [r4, #20]
 8008db4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008db8:	fb95 f5f3 	sdiv	r5, r5, r3
 8008dbc:	f109 0301 	add.w	r3, r9, #1
 8008dc0:	443b      	add	r3, r7
 8008dc2:	429d      	cmp	r5, r3
 8008dc4:	bf38      	it	cc
 8008dc6:	461d      	movcc	r5, r3
 8008dc8:	0553      	lsls	r3, r2, #21
 8008dca:	d530      	bpl.n	8008e2e <__ssputs_r+0x9e>
 8008dcc:	4629      	mov	r1, r5
 8008dce:	f7ff ff85 	bl	8008cdc <_malloc_r>
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	b950      	cbnz	r0, 8008dec <__ssputs_r+0x5c>
 8008dd6:	230c      	movs	r3, #12
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	f8ca 3000 	str.w	r3, [sl]
 8008de0:	89a3      	ldrh	r3, [r4, #12]
 8008de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008de6:	81a3      	strh	r3, [r4, #12]
 8008de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dec:	463a      	mov	r2, r7
 8008dee:	6921      	ldr	r1, [r4, #16]
 8008df0:	f7fe f956 	bl	80070a0 <memcpy>
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dfe:	81a3      	strh	r3, [r4, #12]
 8008e00:	6126      	str	r6, [r4, #16]
 8008e02:	443e      	add	r6, r7
 8008e04:	6026      	str	r6, [r4, #0]
 8008e06:	464e      	mov	r6, r9
 8008e08:	6165      	str	r5, [r4, #20]
 8008e0a:	1bed      	subs	r5, r5, r7
 8008e0c:	60a5      	str	r5, [r4, #8]
 8008e0e:	454e      	cmp	r6, r9
 8008e10:	d900      	bls.n	8008e14 <__ssputs_r+0x84>
 8008e12:	464e      	mov	r6, r9
 8008e14:	4632      	mov	r2, r6
 8008e16:	4641      	mov	r1, r8
 8008e18:	6820      	ldr	r0, [r4, #0]
 8008e1a:	f000 f92d 	bl	8009078 <memmove>
 8008e1e:	68a3      	ldr	r3, [r4, #8]
 8008e20:	2000      	movs	r0, #0
 8008e22:	1b9b      	subs	r3, r3, r6
 8008e24:	60a3      	str	r3, [r4, #8]
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	441e      	add	r6, r3
 8008e2a:	6026      	str	r6, [r4, #0]
 8008e2c:	e7dc      	b.n	8008de8 <__ssputs_r+0x58>
 8008e2e:	462a      	mov	r2, r5
 8008e30:	f000 f93d 	bl	80090ae <_realloc_r>
 8008e34:	4606      	mov	r6, r0
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d1e2      	bne.n	8008e00 <__ssputs_r+0x70>
 8008e3a:	6921      	ldr	r1, [r4, #16]
 8008e3c:	4650      	mov	r0, sl
 8008e3e:	f7ff ff01 	bl	8008c44 <_free_r>
 8008e42:	e7c8      	b.n	8008dd6 <__ssputs_r+0x46>

08008e44 <_svfiprintf_r>:
 8008e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e48:	461d      	mov	r5, r3
 8008e4a:	898b      	ldrh	r3, [r1, #12]
 8008e4c:	b09d      	sub	sp, #116	; 0x74
 8008e4e:	061f      	lsls	r7, r3, #24
 8008e50:	4680      	mov	r8, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	4616      	mov	r6, r2
 8008e56:	d50f      	bpl.n	8008e78 <_svfiprintf_r+0x34>
 8008e58:	690b      	ldr	r3, [r1, #16]
 8008e5a:	b96b      	cbnz	r3, 8008e78 <_svfiprintf_r+0x34>
 8008e5c:	2140      	movs	r1, #64	; 0x40
 8008e5e:	f7ff ff3d 	bl	8008cdc <_malloc_r>
 8008e62:	6020      	str	r0, [r4, #0]
 8008e64:	6120      	str	r0, [r4, #16]
 8008e66:	b928      	cbnz	r0, 8008e74 <_svfiprintf_r+0x30>
 8008e68:	230c      	movs	r3, #12
 8008e6a:	f8c8 3000 	str.w	r3, [r8]
 8008e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e72:	e0c8      	b.n	8009006 <_svfiprintf_r+0x1c2>
 8008e74:	2340      	movs	r3, #64	; 0x40
 8008e76:	6163      	str	r3, [r4, #20]
 8008e78:	2300      	movs	r3, #0
 8008e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e7c:	2320      	movs	r3, #32
 8008e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e82:	2330      	movs	r3, #48	; 0x30
 8008e84:	f04f 0b01 	mov.w	fp, #1
 8008e88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e8c:	9503      	str	r5, [sp, #12]
 8008e8e:	4637      	mov	r7, r6
 8008e90:	463d      	mov	r5, r7
 8008e92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008e96:	b10b      	cbz	r3, 8008e9c <_svfiprintf_r+0x58>
 8008e98:	2b25      	cmp	r3, #37	; 0x25
 8008e9a:	d13e      	bne.n	8008f1a <_svfiprintf_r+0xd6>
 8008e9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008ea0:	d00b      	beq.n	8008eba <_svfiprintf_r+0x76>
 8008ea2:	4653      	mov	r3, sl
 8008ea4:	4632      	mov	r2, r6
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4640      	mov	r0, r8
 8008eaa:	f7ff ff71 	bl	8008d90 <__ssputs_r>
 8008eae:	3001      	adds	r0, #1
 8008eb0:	f000 80a4 	beq.w	8008ffc <_svfiprintf_r+0x1b8>
 8008eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb6:	4453      	add	r3, sl
 8008eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eba:	783b      	ldrb	r3, [r7, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 809d 	beq.w	8008ffc <_svfiprintf_r+0x1b8>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ecc:	9304      	str	r3, [sp, #16]
 8008ece:	9307      	str	r3, [sp, #28]
 8008ed0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ed4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ed6:	462f      	mov	r7, r5
 8008ed8:	2205      	movs	r2, #5
 8008eda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008ede:	4850      	ldr	r0, [pc, #320]	; (8009020 <_svfiprintf_r+0x1dc>)
 8008ee0:	f7ff fbb8 	bl	8008654 <memchr>
 8008ee4:	9b04      	ldr	r3, [sp, #16]
 8008ee6:	b9d0      	cbnz	r0, 8008f1e <_svfiprintf_r+0xda>
 8008ee8:	06d9      	lsls	r1, r3, #27
 8008eea:	bf44      	itt	mi
 8008eec:	2220      	movmi	r2, #32
 8008eee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ef2:	071a      	lsls	r2, r3, #28
 8008ef4:	bf44      	itt	mi
 8008ef6:	222b      	movmi	r2, #43	; 0x2b
 8008ef8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008efc:	782a      	ldrb	r2, [r5, #0]
 8008efe:	2a2a      	cmp	r2, #42	; 0x2a
 8008f00:	d015      	beq.n	8008f2e <_svfiprintf_r+0xea>
 8008f02:	462f      	mov	r7, r5
 8008f04:	2000      	movs	r0, #0
 8008f06:	250a      	movs	r5, #10
 8008f08:	9a07      	ldr	r2, [sp, #28]
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f10:	3b30      	subs	r3, #48	; 0x30
 8008f12:	2b09      	cmp	r3, #9
 8008f14:	d94d      	bls.n	8008fb2 <_svfiprintf_r+0x16e>
 8008f16:	b1b8      	cbz	r0, 8008f48 <_svfiprintf_r+0x104>
 8008f18:	e00f      	b.n	8008f3a <_svfiprintf_r+0xf6>
 8008f1a:	462f      	mov	r7, r5
 8008f1c:	e7b8      	b.n	8008e90 <_svfiprintf_r+0x4c>
 8008f1e:	4a40      	ldr	r2, [pc, #256]	; (8009020 <_svfiprintf_r+0x1dc>)
 8008f20:	463d      	mov	r5, r7
 8008f22:	1a80      	subs	r0, r0, r2
 8008f24:	fa0b f000 	lsl.w	r0, fp, r0
 8008f28:	4318      	orrs	r0, r3
 8008f2a:	9004      	str	r0, [sp, #16]
 8008f2c:	e7d3      	b.n	8008ed6 <_svfiprintf_r+0x92>
 8008f2e:	9a03      	ldr	r2, [sp, #12]
 8008f30:	1d11      	adds	r1, r2, #4
 8008f32:	6812      	ldr	r2, [r2, #0]
 8008f34:	9103      	str	r1, [sp, #12]
 8008f36:	2a00      	cmp	r2, #0
 8008f38:	db01      	blt.n	8008f3e <_svfiprintf_r+0xfa>
 8008f3a:	9207      	str	r2, [sp, #28]
 8008f3c:	e004      	b.n	8008f48 <_svfiprintf_r+0x104>
 8008f3e:	4252      	negs	r2, r2
 8008f40:	f043 0302 	orr.w	r3, r3, #2
 8008f44:	9207      	str	r2, [sp, #28]
 8008f46:	9304      	str	r3, [sp, #16]
 8008f48:	783b      	ldrb	r3, [r7, #0]
 8008f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f4c:	d10c      	bne.n	8008f68 <_svfiprintf_r+0x124>
 8008f4e:	787b      	ldrb	r3, [r7, #1]
 8008f50:	2b2a      	cmp	r3, #42	; 0x2a
 8008f52:	d133      	bne.n	8008fbc <_svfiprintf_r+0x178>
 8008f54:	9b03      	ldr	r3, [sp, #12]
 8008f56:	3702      	adds	r7, #2
 8008f58:	1d1a      	adds	r2, r3, #4
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	9203      	str	r2, [sp, #12]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	bfb8      	it	lt
 8008f62:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f66:	9305      	str	r3, [sp, #20]
 8008f68:	4d2e      	ldr	r5, [pc, #184]	; (8009024 <_svfiprintf_r+0x1e0>)
 8008f6a:	2203      	movs	r2, #3
 8008f6c:	7839      	ldrb	r1, [r7, #0]
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f7ff fb70 	bl	8008654 <memchr>
 8008f74:	b138      	cbz	r0, 8008f86 <_svfiprintf_r+0x142>
 8008f76:	2340      	movs	r3, #64	; 0x40
 8008f78:	1b40      	subs	r0, r0, r5
 8008f7a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	3701      	adds	r7, #1
 8008f82:	4303      	orrs	r3, r0
 8008f84:	9304      	str	r3, [sp, #16]
 8008f86:	7839      	ldrb	r1, [r7, #0]
 8008f88:	2206      	movs	r2, #6
 8008f8a:	4827      	ldr	r0, [pc, #156]	; (8009028 <_svfiprintf_r+0x1e4>)
 8008f8c:	1c7e      	adds	r6, r7, #1
 8008f8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f92:	f7ff fb5f 	bl	8008654 <memchr>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d038      	beq.n	800900c <_svfiprintf_r+0x1c8>
 8008f9a:	4b24      	ldr	r3, [pc, #144]	; (800902c <_svfiprintf_r+0x1e8>)
 8008f9c:	bb13      	cbnz	r3, 8008fe4 <_svfiprintf_r+0x1a0>
 8008f9e:	9b03      	ldr	r3, [sp, #12]
 8008fa0:	3307      	adds	r3, #7
 8008fa2:	f023 0307 	bic.w	r3, r3, #7
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	9303      	str	r3, [sp, #12]
 8008faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fac:	444b      	add	r3, r9
 8008fae:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb0:	e76d      	b.n	8008e8e <_svfiprintf_r+0x4a>
 8008fb2:	fb05 3202 	mla	r2, r5, r2, r3
 8008fb6:	2001      	movs	r0, #1
 8008fb8:	460f      	mov	r7, r1
 8008fba:	e7a6      	b.n	8008f0a <_svfiprintf_r+0xc6>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	250a      	movs	r5, #10
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	3701      	adds	r7, #1
 8008fc4:	9305      	str	r3, [sp, #20]
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fcc:	3a30      	subs	r2, #48	; 0x30
 8008fce:	2a09      	cmp	r2, #9
 8008fd0:	d903      	bls.n	8008fda <_svfiprintf_r+0x196>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0c8      	beq.n	8008f68 <_svfiprintf_r+0x124>
 8008fd6:	9105      	str	r1, [sp, #20]
 8008fd8:	e7c6      	b.n	8008f68 <_svfiprintf_r+0x124>
 8008fda:	fb05 2101 	mla	r1, r5, r1, r2
 8008fde:	2301      	movs	r3, #1
 8008fe0:	4607      	mov	r7, r0
 8008fe2:	e7f0      	b.n	8008fc6 <_svfiprintf_r+0x182>
 8008fe4:	ab03      	add	r3, sp, #12
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	4622      	mov	r2, r4
 8008fea:	4b11      	ldr	r3, [pc, #68]	; (8009030 <_svfiprintf_r+0x1ec>)
 8008fec:	a904      	add	r1, sp, #16
 8008fee:	4640      	mov	r0, r8
 8008ff0:	f7fe f8fa 	bl	80071e8 <_printf_float>
 8008ff4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ff8:	4681      	mov	r9, r0
 8008ffa:	d1d6      	bne.n	8008faa <_svfiprintf_r+0x166>
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	065b      	lsls	r3, r3, #25
 8009000:	f53f af35 	bmi.w	8008e6e <_svfiprintf_r+0x2a>
 8009004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009006:	b01d      	add	sp, #116	; 0x74
 8009008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800900c:	ab03      	add	r3, sp, #12
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	4622      	mov	r2, r4
 8009012:	4b07      	ldr	r3, [pc, #28]	; (8009030 <_svfiprintf_r+0x1ec>)
 8009014:	a904      	add	r1, sp, #16
 8009016:	4640      	mov	r0, r8
 8009018:	f7fe fb92 	bl	8007740 <_printf_i>
 800901c:	e7ea      	b.n	8008ff4 <_svfiprintf_r+0x1b0>
 800901e:	bf00      	nop
 8009020:	0800a1c4 	.word	0x0800a1c4
 8009024:	0800a1ca 	.word	0x0800a1ca
 8009028:	0800a1ce 	.word	0x0800a1ce
 800902c:	080071e9 	.word	0x080071e9
 8009030:	08008d91 	.word	0x08008d91

08009034 <_sbrk_r>:
 8009034:	b538      	push	{r3, r4, r5, lr}
 8009036:	2300      	movs	r3, #0
 8009038:	4c05      	ldr	r4, [pc, #20]	; (8009050 <_sbrk_r+0x1c>)
 800903a:	4605      	mov	r5, r0
 800903c:	4608      	mov	r0, r1
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	f7f8 fc28 	bl	8001894 <_sbrk>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d102      	bne.n	800904e <_sbrk_r+0x1a>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	b103      	cbz	r3, 800904e <_sbrk_r+0x1a>
 800904c:	602b      	str	r3, [r5, #0]
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	200022dc 	.word	0x200022dc

08009054 <__ascii_mbtowc>:
 8009054:	b082      	sub	sp, #8
 8009056:	b901      	cbnz	r1, 800905a <__ascii_mbtowc+0x6>
 8009058:	a901      	add	r1, sp, #4
 800905a:	b142      	cbz	r2, 800906e <__ascii_mbtowc+0x1a>
 800905c:	b14b      	cbz	r3, 8009072 <__ascii_mbtowc+0x1e>
 800905e:	7813      	ldrb	r3, [r2, #0]
 8009060:	600b      	str	r3, [r1, #0]
 8009062:	7812      	ldrb	r2, [r2, #0]
 8009064:	1c10      	adds	r0, r2, #0
 8009066:	bf18      	it	ne
 8009068:	2001      	movne	r0, #1
 800906a:	b002      	add	sp, #8
 800906c:	4770      	bx	lr
 800906e:	4610      	mov	r0, r2
 8009070:	e7fb      	b.n	800906a <__ascii_mbtowc+0x16>
 8009072:	f06f 0001 	mvn.w	r0, #1
 8009076:	e7f8      	b.n	800906a <__ascii_mbtowc+0x16>

08009078 <memmove>:
 8009078:	4288      	cmp	r0, r1
 800907a:	b510      	push	{r4, lr}
 800907c:	eb01 0302 	add.w	r3, r1, r2
 8009080:	d807      	bhi.n	8009092 <memmove+0x1a>
 8009082:	1e42      	subs	r2, r0, #1
 8009084:	4299      	cmp	r1, r3
 8009086:	d00a      	beq.n	800909e <memmove+0x26>
 8009088:	f811 4b01 	ldrb.w	r4, [r1], #1
 800908c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009090:	e7f8      	b.n	8009084 <memmove+0xc>
 8009092:	4283      	cmp	r3, r0
 8009094:	d9f5      	bls.n	8009082 <memmove+0xa>
 8009096:	1881      	adds	r1, r0, r2
 8009098:	1ad2      	subs	r2, r2, r3
 800909a:	42d3      	cmn	r3, r2
 800909c:	d100      	bne.n	80090a0 <memmove+0x28>
 800909e:	bd10      	pop	{r4, pc}
 80090a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80090a8:	e7f7      	b.n	800909a <memmove+0x22>

080090aa <__malloc_lock>:
 80090aa:	4770      	bx	lr

080090ac <__malloc_unlock>:
 80090ac:	4770      	bx	lr

080090ae <_realloc_r>:
 80090ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b0:	4607      	mov	r7, r0
 80090b2:	4614      	mov	r4, r2
 80090b4:	460e      	mov	r6, r1
 80090b6:	b921      	cbnz	r1, 80090c2 <_realloc_r+0x14>
 80090b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80090bc:	4611      	mov	r1, r2
 80090be:	f7ff be0d 	b.w	8008cdc <_malloc_r>
 80090c2:	b922      	cbnz	r2, 80090ce <_realloc_r+0x20>
 80090c4:	f7ff fdbe 	bl	8008c44 <_free_r>
 80090c8:	4625      	mov	r5, r4
 80090ca:	4628      	mov	r0, r5
 80090cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ce:	f000 f821 	bl	8009114 <_malloc_usable_size_r>
 80090d2:	42a0      	cmp	r0, r4
 80090d4:	d20f      	bcs.n	80090f6 <_realloc_r+0x48>
 80090d6:	4621      	mov	r1, r4
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff fdff 	bl	8008cdc <_malloc_r>
 80090de:	4605      	mov	r5, r0
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d0f2      	beq.n	80090ca <_realloc_r+0x1c>
 80090e4:	4631      	mov	r1, r6
 80090e6:	4622      	mov	r2, r4
 80090e8:	f7fd ffda 	bl	80070a0 <memcpy>
 80090ec:	4631      	mov	r1, r6
 80090ee:	4638      	mov	r0, r7
 80090f0:	f7ff fda8 	bl	8008c44 <_free_r>
 80090f4:	e7e9      	b.n	80090ca <_realloc_r+0x1c>
 80090f6:	4635      	mov	r5, r6
 80090f8:	e7e7      	b.n	80090ca <_realloc_r+0x1c>

080090fa <__ascii_wctomb>:
 80090fa:	b149      	cbz	r1, 8009110 <__ascii_wctomb+0x16>
 80090fc:	2aff      	cmp	r2, #255	; 0xff
 80090fe:	bf8b      	itete	hi
 8009100:	238a      	movhi	r3, #138	; 0x8a
 8009102:	700a      	strbls	r2, [r1, #0]
 8009104:	6003      	strhi	r3, [r0, #0]
 8009106:	2001      	movls	r0, #1
 8009108:	bf88      	it	hi
 800910a:	f04f 30ff 	movhi.w	r0, #4294967295
 800910e:	4770      	bx	lr
 8009110:	4608      	mov	r0, r1
 8009112:	4770      	bx	lr

08009114 <_malloc_usable_size_r>:
 8009114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009118:	1f18      	subs	r0, r3, #4
 800911a:	2b00      	cmp	r3, #0
 800911c:	bfbc      	itt	lt
 800911e:	580b      	ldrlt	r3, [r1, r0]
 8009120:	18c0      	addlt	r0, r0, r3
 8009122:	4770      	bx	lr

08009124 <_init>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	bf00      	nop
 8009128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912a:	bc08      	pop	{r3}
 800912c:	469e      	mov	lr, r3
 800912e:	4770      	bx	lr

08009130 <_fini>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	bf00      	nop
 8009134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009136:	bc08      	pop	{r3}
 8009138:	469e      	mov	lr, r3
 800913a:	4770      	bx	lr
